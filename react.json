[
    {
        "title": "Start a New React Project \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/start-a-new-react-project",
        "sections": {
            "summary": "If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community.\nYou can use React without a framework, however we\u2019ve found that most apps and sites eventually build solutions to common problems such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.\nBy starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.\nIf your app has unusual constraints not served well by these frameworks, or you prefer to solve these problems yourself, you can roll your own custom setup with React. Grabreactandreact-domfrom npm, set up your custom build process with a bundler likeViteorParcel, and add other tools as you need them for routing, static generation or server-side rendering, and more.\nReact frameworks on this page solve problems like these by default, with no extra work from your side.They let you start very lean and then scale your app with your needs. Each React framework has a community, so finding answers to questions and upgrading tooling is easier. Frameworks also give structure to your code, helping you and others retain context and skills between different projects. Conversely, with a custom setup it\u2019s easier to get stuck on unsupported dependency versions, and you\u2019ll essentially end up creating your own framework\u2014albeit one with no community or upgrade path (and if it\u2019s anything like the ones we\u2019ve made in the past, more haphazardly designed).\nThese problems are not React-specific. This is why Svelte has SvelteKit, Vue has Nuxt, and so on.To solve these problems on your own, you\u2019ll need to integrate your bundler with your router and with your data fetching library. It\u2019s not hard to get an initial setup working, but there are a lot of subtleties involved in making an app that loads quickly even as it grows over time. You\u2019ll want to send down the minimal amount of app code but do so in a single client\u2013server roundtrip, in parallel with any data required for the page. You\u2019ll likely want the page to be interactive before your JavaScript code even runs, to support progressive enhancement. You may want to generate a folder of fully static HTML files for your marketing pages that can be hosted anywhere and still work with JavaScript disabled. Building these capabilities yourself takes real work.\nEven if you don\u2019t need routing or data fetching at first, you\u2019ll likely want to add some libraries for them. As your JavaScript bundle grows with every new feature, you might have to figure out how to split code for every route individually. As your data fetching needs get more complex, you are likely to encounter server-client network waterfalls that make your app feel very slow. As your audience includes more users with poor network conditions and low-end devices, you might need to generate HTML from your components to display content early\u2014either on the server, or during the build time. Changing your setup to run some of your code on the server or during the build can be very tricky.\nHere\u2019s why.\nYou can definitely use React without a framework\u2014that\u2019s how you\u2019duse React for a part of your page.However, if you\u2019re building a new app or a site fully with React, we recommend using a framework.",
            "content": [
                {
                    "title": "Production-grade React frameworks",
                    "description": "These frameworks support all the features you need to deploy and scale your app in production and are working towards supporting ourfull-stack architecture vision. All of the frameworks we recommend are open source with active communities for support, and can be deployed to your own server or a hosting provider. If you\u2019re a framework author interested in being included on this list,please let us know.\nNext.js\u2019 Pages Routeris a full-stack React framework.It\u2019s versatile and lets you create React apps of any size\u2014from a mostly static blog to a complex dynamic application. To create a new Next.js project, run in your terminal:\nIf you\u2019re new to Next.js, check out thelearn Next.js course.\nNext.js is maintained byVercel. You candeploy a Next.js appto any Node.js or serverless hosting, or to your own server. Next.js also supports astatic exportwhich doesn\u2019t require a server.\nRemixis a full-stack React framework with nested routing.It lets you break your app into nested parts that can load data in parallel and refresh in response to the user actions. To create a new Remix project, run:\nIf you\u2019re new to Remix, check out the Remixblog tutorial(short) andapp tutorial(long).\nRemix is maintained byShopify. When you create a Remix project, you need topick your deployment target. You can deploy a Remix app to any Node.js or serverless hosting by using or writing anadapter.\nGatsbyis a React framework for fast CMS-backed websites.Its rich plugin ecosystem and its GraphQL data layer simplify integrating content, APIs, and services into one website. To create a new Gatsby project, run:\nIf you\u2019re new to Gatsby, check out theGatsby tutorial.\nGatsby is maintained byNetlify. You candeploy a fully static Gatsby siteto any static hosting. If you opt into using server-only features, make sure your hosting provider supports them for Gatsby.\nExpois a React framework that lets you create universal Android, iOS, and web apps with truly native UIs.It provides an SDK forReact Nativethat makes the native parts easier to use. To create a new Expo project, run:\nIf you\u2019re new to Expo, check out theExpo tutorial.\nExpo is maintained byExpo (the company). Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision",
                        "https://github.com/reactjs/react.dev/issues/new?assignees=&labels=type%3A+framework&projects=&template=3-framework.yml&title=%5BFramework%5D%3A+",
                        "https://nextjs.org/",
                        "https://nextjs.org/learn",
                        "https://vercel.com/",
                        "https://nextjs.org/docs/app/building-your-application/deploying",
                        "https://nextjs.org/docs/pages/building-your-application/deploying/static-exports",
                        "https://remix.run/",
                        "https://remix.run/docs/en/main/tutorials/blog",
                        "https://remix.run/docs/en/main/tutorials/jokes",
                        "https://www.shopify.com/",
                        "https://remix.run/docs/en/main/guides/deployment",
                        "https://remix.run/docs/en/main/other-api/adapter",
                        "https://www.gatsbyjs.com/",
                        "https://www.gatsbyjs.com/docs/tutorial/",
                        "https://www.netlify.com/",
                        "https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting",
                        "https://expo.dev/",
                        "https://reactnative.dev/",
                        "https://docs.expo.dev/tutorial/introduction/",
                        "https://expo.dev/about"
                    ],
                    "subsections": [
                        {
                            "title": "Next.js",
                            "description": "Next.js\u2019 Pages Routeris a full-stack React framework.It\u2019s versatile and lets you create React apps of any size\u2014from a mostly static blog to a complex dynamic application. To create a new Next.js project, run in your terminal:\nIf you\u2019re new to Next.js, check out thelearn Next.js course.\nNext.js is maintained byVercel. You candeploy a Next.js appto any Node.js or serverless hosting, or to your own server. Next.js also supports astatic exportwhich doesn\u2019t require a server.",
                            "code_sample": [],
                            "urls": [
                                "https://nextjs.org/",
                                "https://nextjs.org/learn",
                                "https://vercel.com/",
                                "https://nextjs.org/docs/app/building-your-application/deploying",
                                "https://nextjs.org/docs/pages/building-your-application/deploying/static-exports"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Remix",
                            "description": "Remixis a full-stack React framework with nested routing.It lets you break your app into nested parts that can load data in parallel and refresh in response to the user actions. To create a new Remix project, run:\nIf you\u2019re new to Remix, check out the Remixblog tutorial(short) andapp tutorial(long).\nRemix is maintained byShopify. When you create a Remix project, you need topick your deployment target. You can deploy a Remix app to any Node.js or serverless hosting by using or writing anadapter.",
                            "code_sample": [],
                            "urls": [
                                "https://remix.run/",
                                "https://remix.run/docs/en/main/tutorials/blog",
                                "https://remix.run/docs/en/main/tutorials/jokes",
                                "https://www.shopify.com/",
                                "https://remix.run/docs/en/main/guides/deployment",
                                "https://remix.run/docs/en/main/other-api/adapter"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Gatsby",
                            "description": "Gatsbyis a React framework for fast CMS-backed websites.Its rich plugin ecosystem and its GraphQL data layer simplify integrating content, APIs, and services into one website. To create a new Gatsby project, run:\nIf you\u2019re new to Gatsby, check out theGatsby tutorial.\nGatsby is maintained byNetlify. You candeploy a fully static Gatsby siteto any static hosting. If you opt into using server-only features, make sure your hosting provider supports them for Gatsby.",
                            "code_sample": [],
                            "urls": [
                                "https://www.gatsbyjs.com/",
                                "https://www.gatsbyjs.com/docs/tutorial/",
                                "https://www.netlify.com/",
                                "https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Expo (for native apps)",
                            "description": "Expois a React framework that lets you create universal Android, iOS, and web apps with truly native UIs.It provides an SDK forReact Nativethat makes the native parts easier to use. To create a new Expo project, run:\nIf you\u2019re new to Expo, check out theExpo tutorial.\nExpo is maintained byExpo (the company). Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services.",
                            "code_sample": [],
                            "urls": [
                                "https://expo.dev/",
                                "https://reactnative.dev/",
                                "https://docs.expo.dev/tutorial/introduction/",
                                "https://expo.dev/about"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Bleeding-edge React frameworks",
                    "description": "As we\u2019ve explored how to continue improving React, we realized that integrating React more closely with frameworks (specifically, with routing, bundling, and server technologies) is our biggest opportunity to help React users build better apps. The Next.js team has agreed to collaborate with us in researching, developing, integrating, and testing framework-agnostic bleeding-edge React features likeReact Server Components.\nThese features are getting closer to being production-ready every day, and we\u2019ve been in talks with other bundler and framework developers about integrating them. Our hope is that in a year or two, all frameworks listed on this page will have full support for these features. (If you\u2019re a framework author interested in partnering with us to experiment with these features, please let us know!)\nNext.js\u2019s App Routeris a redesign of the Next.js APIs aiming to fulfill the React team\u2019s full-stack architecture vision.It lets you fetch data in asynchronous components that run on the server or even during the build.\nNext.js is maintained byVercel. You candeploy a Next.js appto any Node.js or serverless hosting, or to your own server. Next.js also supportsstatic exportwhich doesn\u2019t require a server.\nNext.js\u2019s App Router bundler fully implements the officialReact Server Components specification. This lets you mix build-time, server-only, and interactive components in a single React tree.\nFor example, you can write a server-only React component as anasyncfunction that reads from a database or from a file. Then you can pass data down from it to your interactive components:\nNext.js\u2019s App Router also integratesdata fetching with Suspense. This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:\nServer Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "// This component runs *only* on the server (or during the build).\nasync function Talks ( { confId } ) {\n// 1. You're on the server, so you can talk to your data layer. API endpoint not required.\nconst talks await db Talks findAll ( { confId } ) ;\n\n// 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.\nconst videos talks map ( talk => talk video ) ;\n\n// 3. Pass the data down to the components that will run in the browser.\nreturn < SearchableVideoList videos { videos } /> ;\n}\n< Suspense fallback { < TalksLoading /> } >\n< Talks confId { conf id } />\n</ Suspense >"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/start-a-new-react-project/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-server-components",
                        "https://nextjs.org/docs",
                        "https://vercel.com/",
                        "https://nextjs.org/docs/app/building-your-application/deploying",
                        "https://nextjs.org/docs/app/building-your-application/deploying/static-exports",
                        "https://react.dev/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision",
                        "https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md",
                        "https://react.dev/learn/start-a-new-react-project/blog/2022/03/29/react-v18#suspense-in-data-frameworks"
                    ],
                    "subsections": [
                        {
                            "title": "Next.js (App Router)",
                            "description": "Next.js\u2019s App Routeris a redesign of the Next.js APIs aiming to fulfill the React team\u2019s full-stack architecture vision.It lets you fetch data in asynchronous components that run on the server or even during the build.\nNext.js is maintained byVercel. You candeploy a Next.js appto any Node.js or serverless hosting, or to your own server. Next.js also supportsstatic exportwhich doesn\u2019t require a server.\nNext.js\u2019s App Router bundler fully implements the officialReact Server Components specification. This lets you mix build-time, server-only, and interactive components in a single React tree.\nFor example, you can write a server-only React component as anasyncfunction that reads from a database or from a file. Then you can pass data down from it to your interactive components:\nNext.js\u2019s App Router also integratesdata fetching with Suspense. This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:\nServer Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "// This component runs *only* on the server (or during the build).\nasync function Talks ( { confId } ) {\n// 1. You're on the server, so you can talk to your data layer. API endpoint not required.\nconst talks await db Talks findAll ( { confId } ) ;\n\n// 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.\nconst videos talks map ( talk => talk video ) ;\n\n// 3. Pass the data down to the components that will run in the browser.\nreturn < SearchableVideoList videos { videos } /> ;\n}\n< Suspense fallback { < TalksLoading /> } >\n< Talks confId { conf id } />\n</ Suspense >"
                                }
                            ],
                            "urls": [
                                "https://nextjs.org/docs",
                                "https://vercel.com/",
                                "https://nextjs.org/docs/app/building-your-application/deploying",
                                "https://nextjs.org/docs/app/building-your-application/deploying/static-exports",
                                "https://react.dev/learn/start-a-new-react-project#which-features-make-up-the-react-teams-full-stack-architecture-vision",
                                "https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md",
                                "https://react.dev/learn/start-a-new-react-project/blog/2022/03/29/react-v18#suspense-in-data-frameworks"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "On this page",
                    "description": "OverviewProduction-grade React frameworksNext.jsRemixGatsbyExpo (for native apps)Bleeding-edge React frameworksNext.js (App Router)",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/start-a-new-react-project#",
                        "https://react.dev/learn/start-a-new-react-project#production-grade-react-frameworks",
                        "https://react.dev/learn/start-a-new-react-project#nextjs-pages-router",
                        "https://react.dev/learn/start-a-new-react-project#remix",
                        "https://react.dev/learn/start-a-new-react-project#gatsby",
                        "https://react.dev/learn/start-a-new-react-project#expo",
                        "https://react.dev/learn/start-a-new-react-project#bleeding-edge-react-frameworks",
                        "https://react.dev/learn/start-a-new-react-project#nextjs-app-router"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Thinking in React \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/thinking-in-react",
        "sections": {
            "summary": "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces calledcomponents. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we\u2019ll guide you through the thought process of building a searchable product data table with React.",
            "content": [
                {
                    "title": "Start with the mockup",
                    "description": "Imagine that you already have a JSON API and a mockup from a designer.\nThe JSON API returns some data that looks like this:\nThe mockup looks like this:\nTo implement a UI in React, you will usually follow the same five steps.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "[\n{ category : \"Fruits\" , price : \"$1\" , stocked : true , name : \"Apple\" } ,\n{ category : \"Fruits\" , price : \"$1\" , stocked : true , name : \"Dragonfruit\" } ,\n{ category : \"Fruits\" , price : \"$2\" , stocked : false , name : \"Passionfruit\" } ,\n{ category : \"Vegetables\" , price : \"$2\" , stocked : true , name : \"Spinach\" } ,\n{ category : \"Vegetables\" , price : \"$4\" , stocked : false , name : \"Pumpkin\" } ,\n{ category : \"Vegetables\" , price : \"$1\" , stocked : true , name : \"Peas\" }\n]"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Step 1: Break the UI into a component hierarchy",
                    "description": "Start by drawing boxes around every component and subcomponent in the mockup and naming them. If you work with a designer, they may have already named these components in their design tool. Ask them!\nDepending on your background, you can think about splitting up a design into components in different ways:\nProgramming\u2014use the same techniques for deciding if you should create a new function or object. One such technique is thesingle responsibility principle, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.CSS\u2014consider what you would make class selectors for. (However, components are a bit less granular.)Design\u2014consider how you would organize the design\u2019s layers.\nIf your JSON is well-structured, you\u2019ll often find that it naturally maps to the component structure of your UI. That\u2019s because UI and data models often have the same information architecture\u2014that is, the same shape. Separate your UI into components, where each component matches one piece of your data model.\nThere are five components on this screen:",
                    "code_sample": [],
                    "urls": [
                        "https://en.wikipedia.org/wiki/Single_responsibility_principle"
                    ],
                    "subsections": []
                },
                {
                    "title": "Step 2: Build a static version in React",
                    "description": "Now that you have your component hierarchy, it\u2019s time to implement your app. The most straightforward approach is to build a version that renders the UI from your data model without adding any interactivity\u2026 yet! It\u2019s often easier to build the static version first and add interactivity later. Building a static version requires a lot of typing and no thinking, but adding interactivity requires a lot of thinking and not a lot of typing.\nTo build a static version of your app that renders your data model, you\u2019ll want to buildcomponentsthat reuse other components and pass data usingprops.Props are a way of passing data from parent to child. (If you\u2019re familiar with the concept ofstate, don\u2019t use state at all to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don\u2019t need it.)\nYou can either build \u201ctop down\u201d by starting with building the components higher up in the hierarchy (likeFilterableProductTable) or \u201cbottom up\u201d by working from components lower down (likeProductRow). In simpler examples, it\u2019s usually easier to go top-down, and on larger projects, it\u2019s easier to go bottom-up.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/thinking-in-react/learn/your-first-component",
                        "https://react.dev/learn/thinking-in-react/learn/passing-props-to-a-component",
                        "https://react.dev/learn/thinking-in-react/learn/state-a-components-memory"
                    ],
                    "subsections": []
                },
                {
                    "title": "Step 3: Find the minimal but complete representation of UI state",
                    "description": "To make the UI interactive, you need to let users change your underlying data model. You will usestatefor this.\nThink of state as the minimal set of changing data that your app needs to remember. The most important principle for structuring state is to keep itDRY (Don\u2019t Repeat Yourself).Figure out the absolute minimal representation of the state your application needs and compute everything else on-demand. For example, if you\u2019re building a shopping list, you can store the items as an array in state. If you want to also display the number of items in the list, don\u2019t store the number of items as another state value\u2014instead, read the length of your array.\nNow think of all of the pieces of data in this example application:\nThe original list of productsThe search text the user has enteredThe value of the checkboxThe filtered list of products\nWhich of these are state? Identify the ones that are not:\nDoes itremain unchangedover time? If so, it isn\u2019t state.Is itpassed in from a parentvia props? If so, it isn\u2019t state.Can you compute itbased on existing state or props in your component? If so, itdefinitelyisn\u2019t state!\nWhat\u2019s left is probably state.\nLet\u2019s go through them one by one again:\nThe original list of products ispassed in as props, so it\u2019s not state.The search text seems to be state since it changes over time and can\u2019t be computed from anything.The value of the checkbox seems to be state since it changes over time and can\u2019t be computed from anything.The filtered list of productsisn\u2019t state because it can be computedby taking the original list of products and filtering it according to the search text and value of the checkbox.\nThis means only the search text and the value of the checkbox are state! Nicely done!\nThere are two types of \u201cmodel\u201d data in React: props and state. The two are very different:\nPropsare like arguments you passto a function. They let a parent component pass data to a child component and customize its appearance. For example, aFormcan pass acolorprop to aButton.Stateis like a component\u2019s memory.It lets a component keep track of some information and change it in response to interactions. For example, aButtonmight keep track ofisHoveredstate.\nProps and state are different, but they work together. A parent component will often keep some information in state (so that it can change it), andpass it downto child components as their props. It\u2019s okay if the difference still feels fuzzy on the first read. It takes a bit of practice for it to really stick!",
                    "code_sample": [],
                    "urls": [
                        "https://en.wikipedia.org/wiki/Don%27t_repeat_yourself",
                        "https://react.dev/learn/thinking-in-react#props-vs-state",
                        "https://react.dev/learn/thinking-in-react/learn/passing-props-to-a-component",
                        "https://react.dev/learn/thinking-in-react/learn/state-a-components-memory"
                    ],
                    "subsections": []
                },
                {
                    "title": "Step 4: Identify where your state should live",
                    "description": "After identifying your app\u2019s minimal state data, you need to identify which component is responsible for changing this state, orownsthe state. Remember: React uses one-way data flow, passing data down the component hierarchy from parent to child component. It may not be immediately clear which component should own what state. This can be challenging if you\u2019re new to this concept, but you can figure it out by following these steps!\nFor each piece of state in your application:\nIdentifyeverycomponent that renders something based on that state.Find their closest common parent component\u2014a component above them all in the hierarchy.Decide where the state should live:Often, you can put the state directly into their common parent.You can also put the state into some component above their common parent.If you can\u2019t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component.\nIn the previous step, you found two pieces of state in this application: the search input text, and the value of the checkbox. In this example, they always appear together, so it makes sense to put them into the same place.\nNow let\u2019s run through our strategy for them:\nIdentify components that use state:ProductTableneeds to filter the product list based on that state (search text and checkbox value).SearchBarneeds to display that state (search text and checkbox value).Find their common parent:The first parent component both components share isFilterableProductTable.Decide where the state lives: We\u2019ll keep the filter text and checked state values inFilterableProductTable.\nSo the state values will live inFilterableProductTable.\nAdd state to the component with theuseState()Hook.Hooks are special functions that let you \u201chook into\u201d React. Add two state variables at the top ofFilterableProductTableand specify their initial state:\nThen, passfilterTextandinStockOnlytoProductTableandSearchBaras props:\nYou can start seeing how your application will behave. Edit thefilterTextinitial value fromuseState('')touseState('fruit')in the sandbox code below. You\u2019ll see both the search input text and the table update:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function FilterableProductTable ( { products } ) {\nconst [ filterText , setFilterText ] useState ( '' ) ;\nconst [ inStockOnly , setInStockOnly ] useState ( false ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "< div >\n< SearchBar\nfilterText { filterText }\ninStockOnly { inStockOnly } />\n< ProductTable\nproducts { products }\nfilterText { filterText }\ninStockOnly { inStockOnly } />\n</ div >"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/thinking-in-react/reference/react/useState"
                    ],
                    "subsections": []
                },
                {
                    "title": "Step 5: Add inverse data flow",
                    "description": "Currently your app renders correctly with props and state flowing down the hierarchy. But to change the state according to user input, you will need to support data flowing the other way: the form components deep in the hierarchy need to update the state inFilterableProductTable.\nReact makes this data flow explicit, but it requires a little more typing than two-way data binding. If you try to type or check the box in the example above, you\u2019ll see that React ignores your input. This is intentional. By writing<input value={filterText} />, you\u2019ve set thevalueprop of theinputto always be equal to thefilterTextstate passed in fromFilterableProductTable. SincefilterTextstate is never set, the input never changes.\nYou want to make it so whenever the user changes the form inputs, the state updates to reflect those changes. The state is owned byFilterableProductTable, so only it can callsetFilterTextandsetInStockOnly. To letSearchBarupdate theFilterableProductTable\u2019s state, you need to pass these functions down toSearchBar:\nInside theSearchBar, you will add theonChangeevent handlers and set the parent state from them:\nNow the application fully works!",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function FilterableProductTable ( { products } ) {\nconst [ filterText , setFilterText ] useState ( '' ) ;\nconst [ inStockOnly , setInStockOnly ] useState ( false ) ;\n\nreturn (\n< div >\n< SearchBar\nfilterText { filterText }\ninStockOnly { inStockOnly }\nonFilterTextChange { setFilterText }\nonInStockOnlyChange { setInStockOnly } />"
                        },
                        {
                            "language": "javascript",
                            "code": "function SearchBar ( {\nfilterText ,\ninStockOnly ,\nonFilterTextChange ,\nonInStockOnlyChange\n} ) {\nreturn (\n< form >\n< input\ntype \"text\"\nvalue { filterText }\nplaceholder \"Search...\"\nonChange { ( e ) => onFilterTextChange ( e target value ) }\n/>\n< label >\n< input\ntype \"checkbox\"\nchecked { inStockOnly }\nonChange { ( e ) => onInStockOnlyChange ( e target checked ) }"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Where to go from here",
                    "description": "This was a very brief introduction to how to think about building components and applications with React. You canstart a React projectright now ordive deeper on all the syntaxused in this tutorial.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/thinking-in-react/learn/installation",
                        "https://react.dev/learn/thinking-in-react/learn/describing-the-ui"
                    ],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewStart with the mockupStep 1: Break the UI into a component hierarchyStep 2: Build a static version in ReactStep 3: Find the minimal but complete representation of UI stateStep 4: Identify where your state should liveStep 5: Add inverse data flowWhere to go from here",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/thinking-in-react#",
                        "https://react.dev/learn/thinking-in-react#start-with-the-mockup",
                        "https://react.dev/learn/thinking-in-react#step-1-break-the-ui-into-a-component-hierarchy",
                        "https://react.dev/learn/thinking-in-react#step-2-build-a-static-version-in-react",
                        "https://react.dev/learn/thinking-in-react#step-3-find-the-minimal-but-complete-representation-of-ui-state",
                        "https://react.dev/learn/thinking-in-react#step-4-identify-where-your-state-should-live",
                        "https://react.dev/learn/thinking-in-react#step-5-add-inverse-data-flow",
                        "https://react.dev/learn/thinking-in-react#where-to-go-from-here"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Rendering Lists \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/rendering-lists",
        "sections": {
            "summary": "You will often want to display multiple similar components from a collection of data. You can use theJavaScript array methodsto manipulate an array of data. On this page, you\u2019ll usefilter()andmap()with React to filter and transform your array of data into an array of components.\nHow to render components from an array using JavaScript\u2019smap()How to render only specific components using JavaScript\u2019sfilter()When and why to use React keys",
            "content": [
                {
                    "title": "Rendering data from arrays",
                    "description": "Say that you have a list of content.\nThe only difference among those list items is their contents, their data. You will often need to show several instances of the same component using different data when building interfaces: from lists of comments to galleries of profile images. In these situations, you can store that data in JavaScript objects and arrays and use methods likemap()andfilter()to render lists of components from them.\nHere\u2019s a short example of how to generate a list of items from an array:\nMovethe data into an array:\nMapthepeoplemembers into a new array of JSX nodes,listItems:\nReturnlistItemsfrom your component wrapped in a<ul>:\nHere is the result:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "< ul >\n< li > </ li >\n< li > </ li >\n< li > </ li >\n< li > </ li >\n< li > </ li >\n</ ul >"
                        },
                        {
                            "language": "javascript",
                            "code": "const people [\n'Creola Katherine Johnson: mathematician' ,\n'Mario Jos\u00e9 Molina-Pasquel Henr\u00edquez: chemist' ,\n'Mohammad Abdus Salam: physicist' ,\n'Percy Lavon Julian: chemist' ,\n'Subrahmanyan Chandrasekhar: astrophysicist'\n] ;"
                        },
                        {
                            "language": "javascript",
                            "code": "const listItems people map ( person => < li > { person } </ li > ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "return < ul > { listItems } </ ul > ;"
                        }
                    ],
                    "urls": [
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",
                        "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"
                    ],
                    "subsections": []
                },
                {
                    "title": "Filtering arrays of items",
                    "description": "This data can be structured even more.\nLet\u2019s say you want a way to only show people whose profession is'chemist'. You can use JavaScript\u2019sfilter()method to return just those people. This method takes an array of items, passes them through a \u201ctest\u201d (a function that returnstrueorfalse), and returns a new array of only those items that passed the test (returnedtrue).\nYou only want the items whereprofessionis'chemist'. The \u201ctest\u201d function for this looks like(person) => person.profession === 'chemist'. Here\u2019s how to put it together:\nCreatea new array of just \u201cchemist\u201d people,chemists, by callingfilter()on thepeoplefiltering byperson.profession === 'chemist':\nNowmapoverchemists:\nLastly,returnthelistItemsfrom your component:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const people [ {\nid : 0 ,\nname : 'Creola Katherine Johnson' ,\nprofession : 'mathematician' ,\n} , {\nid : 1 ,\nname : 'Mario Jos\u00e9 Molina-Pasquel Henr\u00edquez' ,\nprofession : 'chemist' ,\n} , {\nid : 2 ,\nname : 'Mohammad Abdus Salam' ,\nprofession : 'physicist' ,\n} , {\nid : 3 ,\nname : 'Percy Lavon Julian' ,\nprofession : 'chemist' ,\n} , {\nid : 4 ,\nname : 'Subrahmanyan Chandrasekhar' ,\nprofession : 'astrophysicist' ,\n} ] ;"
                        },
                        {
                            "language": "javascript",
                            "code": "const chemists people filter ( person =>\nperson profession 'chemist'\n) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "const listItems chemists map ( person =>\n< li >\n< img\nsrc { getImageUrl ( person ) }\nalt { person name }\n/>\n< p >\n< b > { person name } </ b >\n{ ' ' person profession ' ' }\n{ person accomplishment }\n</ p >\n</ li >\n) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "return < ul > { listItems } </ ul > ;"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Keeping list items in order with key",
                    "description": "Notice that all the sandboxes above show an error in the console:\nYou need to give each array item akey\u2014 a string or a number that uniquely identifies it among other items in that array:\nJSX elements directly inside amap()call always need keys!\nKeys tell React which array item each component corresponds to, so that it can match them up later. This becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. A well-chosenkeyhelps React infer what exactly has happened, and make the correct updates to the DOM tree.\nRather than generating keys on the fly, you should include them in your data:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "< li key { person id } > </ li >"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "On this page you learned:\nHow to move data out of components and into data structures like arrays and objects.How to generate sets of similar components with JavaScript\u2019smap().How to create arrays of filtered items with JavaScript\u2019sfilter().Why and how to setkeyon each component in a collection so React can keep track of each of them even if their position or data changes.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewRendering data from arraysFiltering arrays of itemsKeeping list items in order withkeyWhere to get yourkeyRules of keysWhy does React need keys?RecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/rendering-lists#",
                        "https://react.dev/learn/rendering-lists#rendering-data-from-arrays",
                        "https://react.dev/learn/rendering-lists#filtering-arrays-of-items",
                        "https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key",
                        "https://react.dev/learn/rendering-lists#where-to-get-your-key",
                        "https://react.dev/learn/rendering-lists#rules-of-keys",
                        "https://react.dev/learn/rendering-lists#why-does-react-need-keys",
                        "https://react.dev/learn/rendering-lists#recap",
                        "https://react.dev/learn/rendering-lists#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Escape Hatches \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/escape-hatches",
        "sections": {
            "summary": "Some of your components may need to control and synchronize with systems outside of React. For example, you might need to focus an input using the browser API, play and pause a video player implemented without React, or connect and listen to messages from a remote server. In this chapter, you\u2019ll learn the escape hatches that let you \u201cstep outside\u201d React and connect to external systems. Most of your application logic and data flow should not rely on these features.\nHow to \u201cremember\u201d information without re-renderingHow to access DOM elements managed by ReactHow to synchronize components with external systemsHow to remove unnecessary Effects from your componentsHow an Effect\u2019s lifecycle is different from a component\u2019sHow to prevent some values from re-triggering EffectsHow to make your Effect re-run less oftenHow to share logic between components",
            "content": [
                {
                    "title": "Referencing values with refs",
                    "description": "When you want a component to \u201cremember\u201d some information, but you don\u2019t want that information totrigger new renders, you can use aref:\nLike state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through theref.currentproperty.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const ref useRef ( 0 ) ;"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/escape-hatches/learn/render-and-commit"
                    ],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadReferencing Values with Refsto learn how to use refs to remember information.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/escape-hatches/learn/referencing-values-with-refs"
                    ],
                    "subsections": []
                },
                {
                    "title": "Manipulating the DOM with refs",
                    "description": "React automatically updates the DOM to match your render output, so your components won\u2019t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React\u2014for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node. For example, clicking the button will focus the input using a ref:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadManipulating the DOM with Refsto learn how to access DOM elements managed by React.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/escape-hatches/learn/manipulating-the-dom-with-refs"
                    ],
                    "subsections": []
                },
                {
                    "title": "Synchronizing with Effects",
                    "description": "Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events,Effectslet you run some code after rendering. Use them to synchronize your component with a system outside of React.\nPress Play/Pause a few times and see how the video player stays synchronized to theisPlayingprop value:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadSynchronizing with Effectsto learn how to synchronize components with external systems.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/escape-hatches/learn/synchronizing-with-effects"
                    ],
                    "subsections": []
                },
                {
                    "title": "You Might Not Need An Effect",
                    "description": "Effects are an escape hatch from the React paradigm. They let you \u201cstep outside\u201d of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component\u2019s state when some props or state change), you shouldn\u2019t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.\nThere are two common cases in which you don\u2019t need Effects:\nYou don\u2019t need Effects to transform data for rendering.You don\u2019t need Effects to handle user events.\nFor example, you don\u2019t need an Effect to adjust some state based on other state:\nInstead, calculate as much as you can while rendering:\nHowever, youdoneed Effects to synchronize with external systems.\nReadYou Might Not Need an Effectto learn how to remove unnecessary Effects.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function Form ( ) {\nconst [ firstName , setFirstName ] useState ( 'Taylor' ) ;\nconst [ lastName , setLastName ] useState ( 'Swift' ) ;\n\n// \ud83d\udd34 Avoid: redundant state and unnecessary Effect\nconst [ fullName , setFullName ] useState ( '' ) ;\nuseEffect ( ( ) => {\nsetFullName ( firstName ' ' lastName ) ;\n} , [ firstName , lastName ] ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Form ( ) {\nconst [ firstName , setFirstName ] useState ( 'Taylor' ) ;\nconst [ lastName , setLastName ] useState ( 'Swift' ) ;\n// \u2705 Good: calculated during rendering\nconst fullName firstName ' ' lastName ;\n// ...\n}"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/escape-hatches/learn/you-might-not-need-an-effect",
                        "https://react.dev/learn/escape-hatches/learn/you-might-not-need-an-effect"
                    ],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadYou Might Not Need an Effectto learn how to remove unnecessary Effects.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/escape-hatches/learn/you-might-not-need-an-effect"
                    ],
                    "subsections": []
                },
                {
                    "title": "Lifecycle of reactive effects",
                    "description": "Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.\nThis Effect depends on the value of theroomIdprop. Props arereactive values,which means they can change on a re-render. Notice that the Effectre-synchronizes(and re-connects to the server) ifroomIdchanges:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadLifecycle of Reactive Eventsto learn how an Effect\u2019s lifecycle is different from a component\u2019s.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/escape-hatches/learn/lifecycle-of-reactive-effects"
                    ],
                    "subsections": []
                },
                {
                    "title": "Separating events from Effects",
                    "description": "This section describes anexperimental API that has not yet been releasedin a stable version of React.\nEvent handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.\nAll code inside Effects isreactive.It will run again if some reactive value it reads has changed due to a re-render. For example, this Effect will re-connect to the chat if eitherroomIdorthemehave changed:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadSeparating Events from Effectsto learn how to prevent some values from re-triggering Effects.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/escape-hatches/learn/separating-events-from-effects"
                    ],
                    "subsections": []
                },
                {
                    "title": "Removing Effect dependencies",
                    "description": "When you write an Effect, the linter will verify that you\u2019ve included every reactive value (like props and state) that the Effect reads in the list of your Effect\u2019s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. The way you remove them depends on the case.\nFor example, this Effect depends on theoptionsobject which gets re-created every time you edit the input:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadRemoving Effect Dependenciesto learn how to make your Effect re-run less often.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/escape-hatches/learn/removing-effect-dependencies"
                    ],
                    "subsections": []
                },
                {
                    "title": "Reusing logic with custom Hooks",
                    "description": "React comes with built-in Hooks likeuseState,useContext, anduseEffect. Sometimes, you\u2019ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application\u2019s needs.\nIn this example, theusePointerPositioncustom Hook tracks the cursor position, whileuseDelayedValuecustom Hook returns a value that\u2019s \u201clagging behind\u201d the value you passed by a certain number of milliseconds. Move the cursor over the sandbox preview area to see a moving trail of dots following the cursor:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadReusing Logic with Custom Hooksto learn how to share logic between components.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/escape-hatches/learn/reusing-logic-with-custom-hooks"
                    ],
                    "subsections": []
                },
                {
                    "title": "What\u2019s next?",
                    "description": "Head over toReferencing Values with Refsto start reading this chapter page by page!",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/escape-hatches/learn/referencing-values-with-refs"
                    ],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewReferencing values with refsManipulating the DOM with refsSynchronizing with EffectsYou Might Not Need An EffectLifecycle of reactive effectsSeparating events from EffectsRemoving Effect dependenciesReusing logic with custom HooksWhat\u2019s next?",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/escape-hatches#",
                        "https://react.dev/learn/escape-hatches#referencing-values-with-refs",
                        "https://react.dev/learn/escape-hatches#manipulating-the-dom-with-refs",
                        "https://react.dev/learn/escape-hatches#synchronizing-with-effects",
                        "https://react.dev/learn/escape-hatches#you-might-not-need-an-effect",
                        "https://react.dev/learn/escape-hatches#lifecycle-of-reactive-effects",
                        "https://react.dev/learn/escape-hatches#separating-events-from-effects",
                        "https://react.dev/learn/escape-hatches#removing-effect-dependencies",
                        "https://react.dev/learn/escape-hatches#reusing-logic-with-custom-hooks",
                        "https://react.dev/learn/escape-hatches#whats-next"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Reusing Logic with Custom Hooks \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
        "sections": {
            "summary": "React comes with several built-in Hooks likeuseState,useContext, anduseEffect. Sometimes, you\u2019ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. You might not find these Hooks in React, but you can create your own Hooks for your application\u2019s needs.\nWhat custom Hooks are, and how to write your ownHow to reuse logic between componentsHow to name and structure your custom HooksWhen and why to extract custom Hooks",
            "content": [
                {
                    "title": "Custom Hooks: Sharing logic between components",
                    "description": "Imagine you\u2019re developing an app that heavily relies on the network (as most apps do). You want to warn the user if their network connection has accidentally gone off while they were using your app. How would you go about it? It seems like you\u2019ll need two things in your component:\nA piece of state that tracks whether the network is online.An Effect that subscribes to the globalonlineandofflineevents, and updates that state.\nThis will keep your componentsynchronizedwith the network status. You might start with something like this:",
                    "code_sample": [],
                    "urls": [
                        "https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event",
                        "https://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks/learn/synchronizing-with-effects"
                    ],
                    "subsections": []
                },
                {
                    "title": "Passing reactive values between Hooks",
                    "description": "The code inside your custom Hooks will re-run during every re-render of your component. This is why, like components, custom Hooksneed to be pure.Think of custom Hooks\u2019 code as part of your component\u2019s body!\nBecause custom Hooks re-render together with your component, they always receive the latest props and state. To see what this means, consider this chat room example. Change the server URL or the chat room:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/reusing-logic-with-custom-hooks/learn/keeping-components-pure"
                    ],
                    "subsections": []
                },
                {
                    "title": "When to use custom Hooks",
                    "description": "You don\u2019t need to extract a custom Hook for every little duplicated bit of code. Some duplication is fine. For example, extracting auseFormInputHook to wrap a singleuseStatecall like earlier is probably unnecessary.\nHowever, whenever you write an Effect, consider whether it would be clearer to also wrap it in a custom Hook.You shouldn\u2019t need Effects very often,so if you\u2019re writing one, it means that you need to \u201cstep outside React\u201d to synchronize with some external system or to do something that React doesn\u2019t have a built-in API for. Wrapping it into a custom Hook lets you precisely communicate your intent and how the data flows through it.\nFor example, consider aShippingFormcomponent that displays two dropdowns: one shows the list of cities, and another shows the list of areas in the selected city. You might start with some code that looks like this:\nAlthough this code is quite repetitive,it\u2019s correct to keep these Effects separate from each other.They synchronize two different things, so you shouldn\u2019t merge them into one Effect. Instead, you can simplify theShippingFormcomponent above by extracting the common logic between them into your ownuseDataHook:\nNow you can replace both Effects in theShippingFormcomponents with calls touseData:\nExtracting a custom Hook makes the data flow explicit. You feed theurlin and you get thedataout. By \u201chiding\u201d your Effect insideuseData, you also prevent someone working on theShippingFormcomponent from addingunnecessary dependenciesto it. With time, most of your app\u2019s Effects will be in custom Hooks.\nStart by choosing your custom Hook\u2019s name. If you struggle to pick a clear name, it might mean that your Effect is too coupled to the rest of your component\u2019s logic, and is not yet ready to be extracted.\nIdeally, your custom Hook\u2019s name should be clear enough that even a person who doesn\u2019t write code often could have a good guess about what your custom Hook does, what it takes, and what it returns:\n\u2705useData(url)\u2705useImpressionLog(eventName, extraData)\u2705useChatRoom(options)\nWhen you synchronize with an external system, your custom Hook name may be more technical and use jargon specific to that system. It\u2019s good as long as it would be clear to a person familiar with that system:\n\u2705useMediaQuery(query)\u2705useSocket(url)\u2705useIntersectionObserver(ref, options)\nKeep custom Hooks focused on concrete high-level use cases.Avoid creating and using custom \u201clifecycle\u201d Hooks that act as alternatives and convenience wrappers for theuseEffectAPI itself:\n\ud83d\udd34useMount(fn)\ud83d\udd34useEffectOnce(fn)\ud83d\udd34useUpdateEffect(fn)\nFor example, thisuseMountHook tries to ensure some code only runs \u201con mount\u201d:\nCustom \u201clifecycle\u201d Hooks likeuseMountdon\u2019t fit well into the React paradigm.For example, this code example has a mistake (it doesn\u2019t \u201creact\u201d toroomIdorserverUrlchanges), but the linter won\u2019t warn you about it because the linter only checks directuseEffectcalls. It won\u2019t know about your Hook.\nIf you\u2019re writing an Effect, start by using the React API directly:\nThen, you can (but don\u2019t have to) extract custom Hooks for different high-level use cases:\nA good custom Hook makes the calling code more declarative by constraining what it does.For example,useChatRoom(options)can only connect to the chat room, whileuseImpressionLog(eventName, extraData)can only send an impression log to the analytics. If your custom Hook API doesn\u2019t constrain the use cases and is very abstract, in the long run it\u2019s likely to introduce more problems than it solves.\nEffects are an\u201cescape hatch\u201d: you use them when you need to \u201cstep outside React\u201d and when there is no better built-in solution for your use case. With time, the React team\u2019s goal is to reduce the number of the Effects in your app to the minimum by providing more specific solutions to more specific problems. Wrapping your Effects in custom Hooks makes it easier to upgrade your code when these solutions become available.\nLet\u2019s return to this example:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function ShippingForm ( { country } ) {\nconst [ cities , setCities ] useState ( null ) ;\n// This Effect fetches cities for a country\nuseEffect ( ( ) => {\nlet ignore false ;\nfetch ( `/api/cities?country= ${ country } ` )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetCities ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n} , [ country ] ) ;\n\nconst [ city , setCity ] useState ( null ) ;\nconst [ areas , setAreas ] useState ( null ) ;\n// This Effect fetches areas for the selected city\nuseEffect ( ( ) => {\nif ( city ) {\nlet ignore false ;\nfetch ( `/api/areas?city= ${ city } ` )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetAreas ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n}\n} , [ city ] ) ;\n\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function useData ( url ) {\nconst [ data , setData ] useState ( null ) ;\nuseEffect ( ( ) => {\nif ( url ) {\nlet ignore false ;\nfetch ( url )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetData ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n}\n} , [ url ] ) ;\nreturn data ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function ShippingForm ( { country } ) {\nconst cities useData ( `/api/cities?country= ${ country } ` ) ;\nconst [ city , setCity ] useState ( null ) ;\nconst areas useData ( city `/api/areas?city= ${ city } ` null ) ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId } ) {\nconst [ serverUrl , setServerUrl ] useState ( 'https://localhost:1234' ) ;\n\n// \ud83d\udd34 Avoid: using custom \"lifecycle\" Hooks\nuseMount ( ( ) => {\nconst connection createConnection ( { roomId , serverUrl } ) ;\nconnection connect ( ) ;\n\npost ( '/analytics/event' , { eventName : 'visit_chat' } ) ;\n} ) ;\n// ...\n}\n\n// \ud83d\udd34 Avoid: creating custom \"lifecycle\" Hooks\nfunction useMount ( fn ) {\nuseEffect ( ( ) => {\nfn ( ) ;\n} , [ ] ) ; // \ud83d\udd34 React Hook useEffect has a missing dependency: 'fn'\n}\nfunction ChatRoom ( { roomId } ) {\nconst [ serverUrl , setServerUrl ] useState ( 'https://localhost:1234' ) ;\n\n// \u2705 Good: two raw Effects separated by purpose\n\nuseEffect ( ( ) => {\nconst connection createConnection ( { serverUrl , roomId } ) ;\nconnection connect ( ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ serverUrl , roomId ] ) ;\n\nuseEffect ( ( ) => {\npost ( '/analytics/event' , { eventName : 'visit_chat' , roomId } ) ;\n} , [ roomId ] ) ;\n\n// ...\n}\nfunction ChatRoom ( { roomId } ) {\nconst [ serverUrl , setServerUrl ] useState ( 'https://localhost:1234' ) ;\n\n// \u2705 Great: custom Hooks named after their purpose\nuseChatRoom ( { serverUrl , roomId } ) ;\nuseImpressionLog ( 'visit_chat' , { roomId } ) ;\n// ...\n}"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/reusing-logic-with-custom-hooks/learn/you-might-not-need-an-effect",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks/learn/removing-effect-dependencies#is-your-effect-doing-several-unrelated-things",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks/learn/removing-effect-dependencies",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#keep-your-custom-hooks-focused-on-concrete-high-level-use-cases",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks/learn/escape-hatches"
                    ],
                    "subsections": [
                        {
                            "title": "Custom Hooks help you migrate to better patterns",
                            "description": "Effects are an\u201cescape hatch\u201d: you use them when you need to \u201cstep outside React\u201d and when there is no better built-in solution for your use case. With time, the React team\u2019s goal is to reduce the number of the Effects in your app to the minimum by providing more specific solutions to more specific problems. Wrapping your Effects in custom Hooks makes it easier to upgrade your code when these solutions become available.\nLet\u2019s return to this example:",
                            "code_sample": [],
                            "urls": [
                                "https://react.dev/learn/reusing-logic-with-custom-hooks/learn/escape-hatches"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Recap",
                    "description": "Custom Hooks let you share logic between components.Custom Hooks must be named starting withusefollowed by a capital letter.Custom Hooks only share stateful logic, not state itself.You can pass reactive values from one Hook to another, and they stay up-to-date.All Hooks re-run every time your component re-renders.The code of your custom Hooks should be pure, like your component\u2019s code.Wrap event handlers received by custom Hooks into Effect Events.Don\u2019t create custom Hooks likeuseMount. Keep their purpose specific.It\u2019s up to you how and where to choose the boundaries of your code.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewCustom Hooks: Sharing logic between componentsExtracting your own custom Hook from a componentHook names always start withuseCustom Hooks let you share stateful logic, not state itselfPassing reactive values between HooksPassing event handlers to custom HooksWhen to use custom HooksCustom Hooks help you migrate to better patternsThere is more than one way to do itRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#custom-hooks-sharing-logic-between-components",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#extracting-your-own-custom-hook-from-a-component",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#hook-names-always-start-with-use",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#custom-hooks-let-you-share-stateful-logic-not-state-itself",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#passing-reactive-values-between-hooks",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#passing-event-handlers-to-custom-hooks",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#when-to-use-custom-hooks",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#custom-hooks-help-you-migrate-to-better-patterns",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#there-is-more-than-one-way-to-do-it",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#recap",
                        "https://react.dev/learn/reusing-logic-with-custom-hooks#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Reacting to Input with State \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/reacting-to-input-with-state",
        "sections": {
            "summary": "React provides a declarative way to manipulate the UI. Instead of manipulating individual pieces of the UI directly, you describe the different states that your component can be in, and switch between them in response to the user input. This is similar to how designers think about the UI.\nHow declarative UI programming differs from imperative UI programmingHow to enumerate the different visual states your component can be inHow to trigger the changes between the different visual states from code",
            "content": [
                {
                    "title": "How declarative UI compares to imperative",
                    "description": "When you design UI interactions, you probably think about how the UIchangesin response to user actions. Consider a form that lets the user submit an answer:\nWhen you type something into the form, the \u201cSubmit\u201d buttonbecomes enabled.When you press \u201cSubmit\u201d, both the form and the buttonbecome disabled,and a spinnerappears.If the network request succeeds, the formgets hidden,and the \u201cThank you\u201d messageappears.If the network request fails, an error messageappears,and the formbecomes enabledagain.\nInimperative programming,the above corresponds directly to how you implement interaction. You have to write the exact instructions to manipulate the UI depending on what just happened. Here\u2019s another way to think about this: imagine riding next to someone in a car and telling them turn by turn where to go.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Thinking about UI declaratively",
                    "description": "You\u2019ve seen how to implement a form imperatively above. To better understand how to think in React, you\u2019ll walk through reimplementing this UI in React below:\nIdentifyyour component\u2019s different visual statesDeterminewhat triggers those state changesRepresentthe state in memory usinguseStateRemoveany non-essential state variablesConnectthe event handlers to set the state\nIn computer science, you may hear about a\u201cstate machine\u201dbeing in one of several \u201cstates\u201d. If you work with a designer, you may have seen mockups for different \u201cvisual states\u201d. React stands at the intersection of design and computer science, so both of these ideas are sources of inspiration.\nFirst, you need to visualize all the different \u201cstates\u201d of the UI the user might see:\nEmpty: Form has a disabled \u201cSubmit\u201d button.Typing: Form has an enabled \u201cSubmit\u201d button.Submitting: Form is completely disabled. Spinner is shown.Success: \u201cThank you\u201d message is shown instead of a form.Error: Same as Typing state, but with an extra error message.\nJust like a designer, you\u2019ll want to \u201cmock up\u201d or create \u201cmocks\u201d for the different states before you add logic. For example, here is a mock for just the visual part of the form. This mock is controlled by a prop calledstatuswith a default value of'empty':",
                    "code_sample": [],
                    "urls": [
                        "https://en.wikipedia.org/wiki/Finite-state_machine"
                    ],
                    "subsections": [
                        {
                            "title": "Step 1: Identify your component\u2019s different visual states",
                            "description": "In computer science, you may hear about a\u201cstate machine\u201dbeing in one of several \u201cstates\u201d. If you work with a designer, you may have seen mockups for different \u201cvisual states\u201d. React stands at the intersection of design and computer science, so both of these ideas are sources of inspiration.\nFirst, you need to visualize all the different \u201cstates\u201d of the UI the user might see:\nEmpty: Form has a disabled \u201cSubmit\u201d button.Typing: Form has an enabled \u201cSubmit\u201d button.Submitting: Form is completely disabled. Spinner is shown.Success: \u201cThank you\u201d message is shown instead of a form.Error: Same as Typing state, but with an extra error message.\nJust like a designer, you\u2019ll want to \u201cmock up\u201d or create \u201cmocks\u201d for the different states before you add logic. For example, here is a mock for just the visual part of the form. This mock is controlled by a prop calledstatuswith a default value of'empty':",
                            "code_sample": [],
                            "urls": [
                                "https://en.wikipedia.org/wiki/Finite-state_machine"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Recap",
                    "description": "Declarative programming means describing the UI for each visual state rather than micromanaging the UI (imperative).When developing a component:Identify all its visual states.Determine the human and computer triggers for state changes.Model the state withuseState.Remove non-essential state to avoid bugs and paradoxes.Connect the event handlers to set state.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewHow declarative UI compares to imperativeThinking about UI declarativelyStep 1: Identify your component\u2019s different visual statesStep 2: Determine what triggers those state changesStep 3: Represent the state in memory withuseStateStep 4: Remove any non-essential state variablesStep 5: Connect the event handlers to set stateRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/reacting-to-input-with-state#",
                        "https://react.dev/learn/reacting-to-input-with-state#how-declarative-ui-compares-to-imperative",
                        "https://react.dev/learn/reacting-to-input-with-state#thinking-about-ui-declaratively",
                        "https://react.dev/learn/reacting-to-input-with-state#step-1-identify-your-components-different-visual-states",
                        "https://react.dev/learn/reacting-to-input-with-state#step-2-determine-what-triggers-those-state-changes",
                        "https://react.dev/learn/reacting-to-input-with-state#step-3-represent-the-state-in-memory-with-usestate",
                        "https://react.dev/learn/reacting-to-input-with-state#step-4-remove-any-non-essential-state-variables",
                        "https://react.dev/learn/reacting-to-input-with-state#step-5-connect-the-event-handlers-to-set-state",
                        "https://react.dev/learn/reacting-to-input-with-state#recap",
                        "https://react.dev/learn/reacting-to-input-with-state#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Managing State \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/managing-state",
        "sections": {
            "summary": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you\u2019ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.\nHow to think about UI changes as state changesHow to structure state wellHow to \u201clift state up\u201d to share it between componentsHow to control whether the state gets preserved or resetHow to consolidate complex state logic in a functionHow to pass information without \u201cprop drilling\u201dHow to scale state management as your app grows",
            "content": [
                {
                    "title": "Reacting to input with state",
                    "description": "With React, you won\u2019t modify the UI from code directly. For example, you won\u2019t write commands like \u201cdisable the button\u201d, \u201cenable the button\u201d, \u201cshow the success message\u201d, etc. Instead, you will describe the UI you want to see for the different visual states of your component (\u201cinitial state\u201d, \u201ctyping state\u201d, \u201csuccess state\u201d), and then trigger the state changes in response to user input. This is similar to how designers think about UI.\nHere is a quiz form built using React. Note how it uses thestatusstate variable to determine whether to enable or disable the submit button, and whether to show the success message instead.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadReacting to Input with Stateto learn how to approach interactions with a state-driven mindset.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/managing-state/learn/reacting-to-input-with-state"
                    ],
                    "subsections": []
                },
                {
                    "title": "Choosing the state structure",
                    "description": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn\u2019t contain redundant or duplicated information. If there\u2019s unnecessary state, it\u2019s easy to forget to update it, and introduce bugs!\nFor example, this form has aredundantfullNamestate variable:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadChoosing the State Structureto learn how to design the state shape to avoid bugs.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/managing-state/learn/choosing-the-state-structure"
                    ],
                    "subsections": []
                },
                {
                    "title": "Sharing state between components",
                    "description": "Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as \u201clifting state up\u201d, and it\u2019s one of the most common things you will do writing React code.\nIn this example, only one panel should be active at a time. To achieve this, instead of keeping the active state inside each individual panel, the parent component holds the state and specifies the props for its children.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadSharing State Between Componentsto learn how to lift state up and keep components in sync.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/managing-state/learn/sharing-state-between-components"
                    ],
                    "subsections": []
                },
                {
                    "title": "Preserving and resetting state",
                    "description": "When you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React\u2019s automatic behavior works well enough. By default, React preserves the parts of the tree that \u201cmatch up\u201d with the previously rendered component tree.\nHowever, sometimes this is not what you want. In this chat app, typing a message and then switching the recipient does not reset the input. This can make the user accidentally send a message to the wrong person:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadPreserving and Resetting Stateto learn the lifetime of state and how to control it.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/managing-state/learn/preserving-and-resetting-state"
                    ],
                    "subsections": []
                },
                {
                    "title": "Extracting state logic into a reducer",
                    "description": "Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called \u201creducer\u201d. Your event handlers become concise because they only specify the user \u201cactions\u201d. At the bottom of the file, the reducer function specifies how the state should update in response to each action!",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadExtracting State Logic into a Reducerto learn how to consolidate logic in the reducer function.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/managing-state/learn/extracting-state-logic-into-a-reducer"
                    ],
                    "subsections": []
                },
                {
                    "title": "Passing data deeply with context",
                    "description": "Usually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it\u2014no matter how deep it is\u2014without passing it explicitly through props.\nHere, theHeadingcomponent determines its heading level by \u201casking\u201d the closestSectionfor its level. EachSectiontracks its own level by asking the parentSectionand adding one to it. EverySectionprovides information to all components below it without passing props\u2014it does that through context.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadPassing Data Deeply with Contextto learn about using context as an alternative to passing props.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/managing-state/learn/passing-data-deeply-with-context"
                    ],
                    "subsections": []
                },
                {
                    "title": "Scaling up with reducer and context",
                    "description": "Reducers let you consolidate a component\u2019s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.\nWith this approach, a parent component with complex state manages it with a reducer. Other components anywhere deep in the tree can read its state via context. They can also dispatch actions to update that state.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadScaling Up with Reducer and Contextto learn how state management scales in a growing app.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/managing-state/learn/scaling-up-with-reducer-and-context"
                    ],
                    "subsections": []
                },
                {
                    "title": "What\u2019s next?",
                    "description": "Head over toReacting to Input with Stateto start reading this chapter page by page!\nOr, if you\u2019re already familiar with these topics, why not read aboutEscape Hatches?",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/managing-state/learn/reacting-to-input-with-state",
                        "https://react.dev/learn/managing-state/learn/escape-hatches"
                    ],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewReacting to input with stateChoosing the state structureSharing state between componentsPreserving and resetting stateExtracting state logic into a reducerPassing data deeply with contextScaling up with reducer and contextWhat\u2019s next?",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/managing-state#",
                        "https://react.dev/learn/managing-state#reacting-to-input-with-state",
                        "https://react.dev/learn/managing-state#choosing-the-state-structure",
                        "https://react.dev/learn/managing-state#sharing-state-between-components",
                        "https://react.dev/learn/managing-state#preserving-and-resetting-state",
                        "https://react.dev/learn/managing-state#extracting-state-logic-into-a-reducer",
                        "https://react.dev/learn/managing-state#passing-data-deeply-with-context",
                        "https://react.dev/learn/managing-state#scaling-up-with-reducer-and-context",
                        "https://react.dev/learn/managing-state#whats-next"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Add React to an Existing Project \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/add-react-to-an-existing-project",
        "sections": {
            "summary": "If you want to add some interactivity to your existing project, you don\u2019t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.\nYou need to installNode.jsfor local development.Although you cantry Reactonline or with a simple HTML page, realistically most JavaScript tooling you\u2019ll want to use for development requires Node.js.",
            "content": [
                {
                    "title": "Using React for an entire subroute of your existing website",
                    "description": "Let\u2019s say you have an existing web app atexample.combuilt with another server technology (like Rails), and you want to implement all routes starting withexample.com/some-app/fully with React.\nHere\u2019s how we recommend to set it up:\nBuild the React part of your appusing one of theReact-based frameworks.Specify/some-appas thebase pathin your framework\u2019s configuration (here\u2019s how:Next.js,Gatsby).Configure your server or a proxyso that all requests under/some-app/are handled by your React app.\nThis ensures the React part of your app canbenefit from the best practicesbaked into those frameworks.\nMany React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can\u2019t or don\u2019t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export (next exportoutputfor Next.js, default for Gatsby) at/some-app/instead.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/add-react-to-an-existing-project/learn/start-a-new-react-project",
                        "https://nextjs.org/docs/api-reference/next.config.js/basepath",
                        "https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/",
                        "https://react.dev/learn/add-react-to-an-existing-project/learn/start-a-new-react-project#can-i-use-react-without-a-framework",
                        "https://nextjs.org/docs/advanced-features/static-html-export"
                    ],
                    "subsections": []
                },
                {
                    "title": "Using React for a part of your existing page",
                    "description": "Let\u2019s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That\u2019s a common way to integrate React\u2014in fact, it\u2019s how most React usage looked at Meta for many years!\nYou can do this in two steps:\nSet up a JavaScript environmentthat lets you use theJSX syntax, split your code into modules with theimport/exportsyntax, and use packages (for example, React) from thenpmpackage registry.Render your React componentswhere you want to see them on the page.\nThe exact approach depends on your existing page setup, so let\u2019s walk through some details.\nA modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on thenpmregistry\u2014including React itself! How you do this depends on your existing setup:\nIf your app is already split into files that useimportstatements,try to use the setup you already have. Check whether writing<div />in your JS code causes a syntax error. If it causes a syntax error, you might need totransform your JavaScript code with Babel, and enable theBabel React presetto use JSX.If your app doesn\u2019t have an existing setup for compiling JavaScript modules,set it up withVite. The Vite community maintainsmany integrations with backend frameworks, including Rails, Django, and Laravel. If your backend framework is not listed,follow this guideto manually integrate Vite builds with your backend.\nTo check whether your setup works, run this command in your project folder:\nThen add these lines of code at the top of your main JavaScript file (it might be calledindex.jsormain.js):",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/add-react-to-an-existing-project/learn/writing-markup-with-jsx",
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export",
                        "https://www.npmjs.com/",
                        "https://www.npmjs.com/",
                        "https://babeljs.io/setup",
                        "https://babeljs.io/docs/babel-preset-react",
                        "https://vitejs.dev/",
                        "https://github.com/vitejs/awesome-vite#integrations-with-backends",
                        "https://vitejs.dev/guide/backend-integration.html"
                    ],
                    "subsections": [
                        {
                            "title": "Step 1: Set up a modular JavaScript environment",
                            "description": "A modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on thenpmregistry\u2014including React itself! How you do this depends on your existing setup:\nIf your app is already split into files that useimportstatements,try to use the setup you already have. Check whether writing<div />in your JS code causes a syntax error. If it causes a syntax error, you might need totransform your JavaScript code with Babel, and enable theBabel React presetto use JSX.If your app doesn\u2019t have an existing setup for compiling JavaScript modules,set it up withVite. The Vite community maintainsmany integrations with backend frameworks, including Rails, Django, and Laravel. If your backend framework is not listed,follow this guideto manually integrate Vite builds with your backend.\nTo check whether your setup works, run this command in your project folder:\nThen add these lines of code at the top of your main JavaScript file (it might be calledindex.jsormain.js):",
                            "code_sample": [],
                            "urls": [
                                "https://www.npmjs.com/",
                                "https://babeljs.io/setup",
                                "https://babeljs.io/docs/babel-preset-react",
                                "https://vitejs.dev/",
                                "https://github.com/vitejs/awesome-vite#integrations-with-backends",
                                "https://vitejs.dev/guide/backend-integration.html"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Using React Native in an existing native mobile app",
                    "description": "React Nativecan also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift),follow this guideto add a React Native screen to it.",
                    "code_sample": [],
                    "urls": [
                        "https://reactnative.dev/",
                        "https://reactnative.dev/docs/integration-with-existing-apps"
                    ],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewUsing React for an entire subroute of your existing websiteUsing React for a part of your existing pageStep 1: Set up a modular JavaScript environmentStep 2: Render React components anywhere on the pageUsing React Native in an existing native mobile app",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/add-react-to-an-existing-project#",
                        "https://react.dev/learn/add-react-to-an-existing-project#using-react-for-an-entire-subroute-of-your-existing-website",
                        "https://react.dev/learn/add-react-to-an-existing-project#using-react-for-a-part-of-your-existing-page",
                        "https://react.dev/learn/add-react-to-an-existing-project#step-1-set-up-a-modular-javascript-environment",
                        "https://react.dev/learn/add-react-to-an-existing-project#step-2-render-react-components-anywhere-on-the-page",
                        "https://react.dev/learn/add-react-to-an-existing-project#using-react-native-in-an-existing-native-mobile-app"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Scaling Up with Reducer and Context \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
        "sections": {
            "summary": "Reducers let you consolidate a component\u2019s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.\nHow to combine a reducer with contextHow to avoid passing state and dispatch through propsHow to keep context and state logic in a separate file",
            "content": [
                {
                    "title": "Combining a reducer with context",
                    "description": "In this example fromthe introduction to reducers, the state is managed by a reducer. The reducer function contains all of the state update logic and is declared at the bottom of this file:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/scaling-up-with-reducer-and-context/learn/extracting-state-logic-into-a-reducer"
                    ],
                    "subsections": []
                },
                {
                    "title": "Moving all wiring into a single file",
                    "description": "You don\u2019t have to do this, but you could further declutter the components by moving both reducer and context into a single file. Currently,TasksContext.jscontains only two context declarations:\nThis file is about to get crowded! You\u2019ll move the reducer into that same file. Then you\u2019ll declare a newTasksProvidercomponent in the same file. This component will tie all the pieces together:\nIt will manage the state with a reducer.It will provide both contexts to components below.It willtakechildrenas a propso you can pass JSX to it.\nThis removes all the complexity and wiring from yourTaskAppcomponent:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "import { createContext } from 'react' ;\n\nexport const TasksContext createContext ( null ) ;\nexport const TasksDispatchContext createContext ( null ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "export function TasksProvider ( { children } ) {\nconst [ tasks , dispatch ] useReducer ( tasksReducer , initialTasks ) ;\n\nreturn (\n< TasksContext Provider value { tasks } >\n< TasksDispatchContext Provider value { dispatch } >\n{ children }\n</ TasksDispatchContext Provider >\n</ TasksContext Provider >\n) ;\n}"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/scaling-up-with-reducer-and-context/learn/passing-props-to-a-component#passing-jsx-as-children"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "You can combine reducer with context to let any component read and update state above it.To provide state and the dispatch function to components below:Create two contexts (for state and for dispatch functions).Provide both contexts from the component that uses the reducer.Use either context from components that need to read them.You can further declutter the components by moving all wiring into one file.You can export a component likeTasksProviderthat provides context.You can also export custom Hooks likeuseTasksanduseTasksDispatchto read it.You can have many context-reducer pairs like this in your app.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewCombining a reducer with contextStep 1: Create the contextStep 2: Put state and dispatch into contextStep 3: Use context anywhere in the treeMoving all wiring into a single fileRecap",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/scaling-up-with-reducer-and-context#",
                        "https://react.dev/learn/scaling-up-with-reducer-and-context#combining-a-reducer-with-context",
                        "https://react.dev/learn/scaling-up-with-reducer-and-context#step-1-create-the-context",
                        "https://react.dev/learn/scaling-up-with-reducer-and-context#step-2-put-state-and-dispatch-into-context",
                        "https://react.dev/learn/scaling-up-with-reducer-and-context#step-3-use-context-anywhere-in-the-tree",
                        "https://react.dev/learn/scaling-up-with-reducer-and-context#moving-all-wiring-into-a-single-file",
                        "https://react.dev/learn/scaling-up-with-reducer-and-context#recap"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Manipulating the DOM with Refs \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
        "sections": {
            "summary": "React automatically updates theDOMto match your render output, so your components won\u2019t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React\u2014for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need arefto the DOM node.\nHow to access a DOM node managed by React with therefattributeHow therefJSX attribute relates to theuseRefHookHow to access another component\u2019s DOM nodeIn which cases it\u2019s safe to modify the DOM managed by React",
            "content": [
                {
                    "title": "Getting a ref to the node",
                    "description": "To access a DOM node managed by React, first, import theuseRefHook:\nThen, use it to declare a ref inside your component:\nFinally, pass your ref as therefattribute to the JSX tag for which you want to get the DOM node:\nTheuseRefHook returns an object with a single property calledcurrent. Initially,myRef.currentwill benull. When React creates a DOM node for this<div>, React will put a reference to this node intomyRef.current. You can then access this DOM node from yourevent handlersand use the built-inbrowser APIsdefined on it.\nIn this example, clicking the button will focus the input:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "import { useRef } from 'react' ;"
                        },
                        {
                            "language": "javascript",
                            "code": "const myRef useRef ( null ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "< div ref { myRef } >"
                        },
                        {
                            "language": "javascript",
                            "code": "// You can use any browser APIs, for example:\nmyRef current scrollIntoView ( ) ;"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/manipulating-the-dom-with-refs/learn/responding-to-events",
                        "https://developer.mozilla.org/docs/Web/API/Element"
                    ],
                    "subsections": [
                        {
                            "title": "Example: Focusing a text input",
                            "description": "In this example, clicking the button will focus the input:",
                            "code_sample": [],
                            "urls": [],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Accessing another component\u2019s DOM nodes",
                    "description": "When you put a ref on a built-in component that outputs a browser element like<input />, React will set that ref\u2019scurrentproperty to the corresponding DOM node (such as the actual<input />in the browser).\nHowever, if you try to put a ref onyour owncomponent, like<MyInput />, by default you will getnull. Here is an example demonstrating it. Notice how clicking the buttondoes notfocus the input:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "When React attaches the refs",
                    "description": "In React, every update is split intwo phases:\nDuringrender,React calls your components to figure out what should be on the screen.Duringcommit,React applies changes to the DOM.\nIn general, youdon\u2019t wantto access refs during rendering. That goes for refs holding DOM nodes as well. During the first render, the DOM nodes have not yet been created, soref.currentwill benull. And during the rendering of updates, the DOM nodes haven\u2019t been updated yet. So it\u2019s too early to read them.\nReact setsref.currentduring the commit. Before updating the DOM, React sets the affectedref.currentvalues tonull. After updating the DOM, React immediately sets them to the corresponding DOM nodes.\nUsually, you will access refs from event handlers.If you want to do something with a ref, but there is no particular event to do it in, you might need an Effect. We will discuss Effects on the next pages.\nConsider code like this, which adds a new todo and scrolls the screen down to the last child of the list. Notice how, for some reason, it always scrolls to the todo that wasjust beforethe last added one:\nThe issue is with these two lines:\nIn React,state updates are queued.Usually, this is what you want. However, here it causes a problem becausesetTodosdoes not immediately update the DOM. So the time you scroll the list to its last element, the todo has not yet been added. This is why scrolling always \u201clags behind\u201d by one item.\nTo fix this issue, you can force React to update (\u201cflush\u201d) the DOM synchronously. To do this, importflushSyncfromreact-domandwrap the state updateinto aflushSynccall:\nThis will instruct React to update the DOM synchronously right after the code wrapped influshSyncexecutes. As a result, the last todo will already be in the DOM by the time you try to scroll to it:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "setTodos ( [ ... todos , newTodo ] ) ;\nlistRef current lastChild scrollIntoView ( ) ;\nflushSync ( ( ) => {\nsetTodos ( [ ... todos , newTodo ] ) ;\n} ) ;\nlistRef current lastChild scrollIntoView ( ) ;"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/manipulating-the-dom-with-refs/learn/render-and-commit#step-3-react-commits-changes-to-the-dom",
                        "https://react.dev/learn/manipulating-the-dom-with-refs/learn/referencing-values-with-refs#best-practices-for-refs",
                        "https://react.dev/learn/manipulating-the-dom-with-refs#flushing-state-updates-synchronously-with-flush-sync",
                        "https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app",
                        "https://react.dev/learn/manipulating-the-dom-with-refs/learn/queueing-a-series-of-state-updates",
                        "https://codesandbox.io/api/v1/sandboxes/define?undefined&environment=create-react-app"
                    ],
                    "subsections": []
                },
                {
                    "title": "Best practices for DOM manipulation with refs",
                    "description": "Refs are an escape hatch. You should only use them when you have to \u201cstep outside React\u201d. Common examples of this include managing focus, scroll position, or calling browser APIs that React does not expose.\nIf you stick to non-destructive actions like focusing and scrolling, you shouldn\u2019t encounter any problems. However, if you try tomodifythe DOM manually, you can risk conflicting with the changes React is making.\nTo illustrate this problem, this example includes a welcome message and two buttons. The first button toggles its presence usingconditional renderingandstate, as you would usually do in React. The second button uses theremove()DOM APIto forcefully remove it from the DOM outside of React\u2019s control.\nTry pressing \u201cToggle with setState\u201d a few times. The message should disappear and appear again. Then press \u201cRemove from the DOM\u201d. This will forcefully remove it. Finally, press \u201cToggle with setState\u201d:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/manipulating-the-dom-with-refs/learn/conditional-rendering",
                        "https://react.dev/learn/manipulating-the-dom-with-refs/learn/state-a-components-memory",
                        "https://developer.mozilla.org/en-US/docs/Web/API/Element/remove"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Refs are a generic concept, but most often you\u2019ll use them to hold DOM elements.You instruct React to put a DOM node intomyRef.currentby passing<div ref={myRef}>.Usually, you will use refs for non-destructive actions like focusing, scrolling, or measuring DOM elements.A component doesn\u2019t expose its DOM nodes by default. You can opt into exposing a DOM node by usingforwardRefand passing the secondrefargument down to a specific node.Avoid changing DOM nodes managed by React.If you do modify DOM nodes managed by React, modify parts that React has no reason to update.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewGetting a ref to the nodeExample: Focusing a text inputExample: Scrolling to an elementAccessing another component\u2019s DOM nodesWhen React attaches the refsBest practices for DOM manipulation with refsRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/manipulating-the-dom-with-refs#",
                        "https://react.dev/learn/manipulating-the-dom-with-refs#getting-a-ref-to-the-node",
                        "https://react.dev/learn/manipulating-the-dom-with-refs#example-focusing-a-text-input",
                        "https://react.dev/learn/manipulating-the-dom-with-refs#example-scrolling-to-an-element",
                        "https://react.dev/learn/manipulating-the-dom-with-refs#accessing-another-components-dom-nodes",
                        "https://react.dev/learn/manipulating-the-dom-with-refs#when-react-attaches-the-refs",
                        "https://react.dev/learn/manipulating-the-dom-with-refs#best-practices-for-dom-manipulation-with-refs",
                        "https://react.dev/learn/manipulating-the-dom-with-refs#recap",
                        "https://react.dev/learn/manipulating-the-dom-with-refs#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Tutorial: Tic-Tac-Toe \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/tutorial-tic-tac-toe",
        "sections": {
            "summary": "If the code doesn\u2019t make sense to you yet, or if you are unfamiliar with the code\u2019s syntax, don\u2019t worry! The goal of this tutorial is to help you understand React and its syntax.\nWe recommend that you check out the tic-tac-toe game above before continuing with the tutorial. One of the features that you\u2019ll notice is that there is a numbered list to the right of the game\u2019s board. This list gives you a history of all of the moves that have occurred in the game, and it is updated as the game progresses.\nOnce you\u2019ve played around with the finished tic-tac-toe game, keep scrolling. You\u2019ll start with a simpler template in this tutorial. Our next step is to set you up so that you can start building the game.",
            "content": [
                {
                    "title": "Setup for the tutorial",
                    "description": "In the live code editor below, clickForkin the top-right corner to open the editor in a new tab using the website CodeSandbox. CodeSandbox lets you write code in your browser and preview how your users will see the app you\u2019ve created. The new tab should display an empty square and the starter code for this tutorial.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Overview",
                    "description": "Now that you\u2019re set up, let\u2019s get an overview of React!\nIn CodeSandbox you\u2019ll see three main sections:\nTheFilessection with a list of files likeApp.js,index.js,styles.cssand a folder calledpublicThecode editorwhere you\u2019ll see the source code of your selected fileThebrowsersection where you\u2019ll see how the code you\u2019ve written will be displayed\nTheApp.jsfile should be selected in theFilessection. The contents of that file in thecode editorshould be:\nThebrowsersection should be displaying a square with a X in it like this:\nNow let\u2019s have a look at the files in the starter code.\nThe code inApp.jscreates acomponent. In React, a component is a piece of reusable code that represents a part of a user interface. Components are used to render, manage, and update the UI elements in your application. Let\u2019s look at the component line by line to see what\u2019s going on:\nThe first line defines a function calledSquare. TheexportJavaScript keyword makes this function accessible outside of this file. Thedefaultkeyword tells other files using your code that it\u2019s the main function in your file.\nThe second line returns a button. ThereturnJavaScript keyword means whatever comes after is returned as a value to the caller of the function.<button>is aJSX element. A JSX element is a combination of JavaScript code and HTML tags that describes what you\u2019d like to display.className=\"square\"is a button property orpropthat tells CSS how to style the button.Xis the text displayed inside of the button and</button>closes the JSX element to indicate that any following content shouldn\u2019t be placed inside the button.\nClick on the file labeledstyles.cssin theFilessection of CodeSandbox. This file defines the styles for your React app. The first twoCSS selectors(*andbody) define the style of large parts of your app while the.squareselector defines the style of any component where theclassNameproperty is set tosquare. In your code, that would match the button from your Square component in theApp.jsfile.\nClick on the file labeledindex.jsin theFilessection of CodeSandbox. You won\u2019t be editing this file during the tutorial but it is the bridge between the component you created in theApp.jsfile and the web browser.\nLines 1-5 bring all the necessary pieces together:\nReactReact\u2019s library to talk to web browsers (React DOM)the styles for your componentsthe component you created inApp.js.\nThe remainder of the file brings all the pieces together and injects the final product intoindex.htmlin thepublicfolder.\nLet\u2019s get back toApp.js. This is where you\u2019ll spend the rest of the tutorial.\nCurrently the board is only a single square, but you need nine! If you just try and copy paste your square to make two squares like this:\nYou\u2019ll get this error:\nReact components need to return a single JSX element and not multiple adjacent JSX elements like two buttons. To fix this you can useFragments(<>and</>) to wrap multiple adjacent JSX elements like this:\nNow you should see:\nGreat! Now you just need to copy-paste a few times to add nine squares and\u2026\nOh no! The squares are all in a single line, not in a grid like you need for our board. To fix this you\u2019ll need to group your squares into rows withdivs and add some CSS classes. While you\u2019re at it, you\u2019ll give each square a number to make sure you know where each square is displayed.\nIn theApp.jsfile, update theSquarecomponent to look like this:\nThe CSS defined instyles.cssstyles the divs with theclassNameofboard-row. Now that you\u2019ve grouped your components into rows with the styleddivs you have your tic-tac-toe board:\nBut you now have a problem. Your component namedSquare, really isn\u2019t a square anymore. Let\u2019s fix that by changing the name toBoard:\nAt this point your code should look something like this:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "export default function Square ( ) {\nreturn < button className \"square\" > </ button > ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function Square ( ) {\nreturn < button className \"square\" > </ button > ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function Square ( ) {\nreturn < button className \"square\" > </ button > ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "import { StrictMode } from 'react' ;\nimport { createRoot } from 'react-dom/client' ;\nimport './styles.css' ;\n\nimport App from './App' ;"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function Square ( ) {\nreturn < button className \"square\" > </ button > button  className \"square\" X /button>;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function Square ( ) {\nreturn (\n< >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n</ >\n) ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function Square ( ) {\nreturn (\n< >\n< div className \"board-row\" >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n</ div >\n< div className \"board-row\" >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n</ div >\n< div className \"board-row\" >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n</ div >\n</ >\n) ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function Board ( ) {\n//...\n}"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/tutorial-tic-tac-toe#appjs",
                        "https://react.dev/learn/tutorial-tic-tac-toe#stylescss",
                        "https://react.dev/learn/tutorial-tic-tac-toe#indexjs"
                    ],
                    "subsections": [
                        {
                            "title": "Inspecting the starter code",
                            "description": "In CodeSandbox you\u2019ll see three main sections:\nTheFilessection with a list of files likeApp.js,index.js,styles.cssand a folder calledpublicThecode editorwhere you\u2019ll see the source code of your selected fileThebrowsersection where you\u2019ll see how the code you\u2019ve written will be displayed\nTheApp.jsfile should be selected in theFilessection. The contents of that file in thecode editorshould be:\nThebrowsersection should be displaying a square with a X in it like this:\nNow let\u2019s have a look at the files in the starter code.\nThe code inApp.jscreates acomponent. In React, a component is a piece of reusable code that represents a part of a user interface. Components are used to render, manage, and update the UI elements in your application. Let\u2019s look at the component line by line to see what\u2019s going on:\nThe first line defines a function calledSquare. TheexportJavaScript keyword makes this function accessible outside of this file. Thedefaultkeyword tells other files using your code that it\u2019s the main function in your file.\nThe second line returns a button. ThereturnJavaScript keyword means whatever comes after is returned as a value to the caller of the function.<button>is aJSX element. A JSX element is a combination of JavaScript code and HTML tags that describes what you\u2019d like to display.className=\"square\"is a button property orpropthat tells CSS how to style the button.Xis the text displayed inside of the button and</button>closes the JSX element to indicate that any following content shouldn\u2019t be placed inside the button.\nClick on the file labeledstyles.cssin theFilessection of CodeSandbox. This file defines the styles for your React app. The first twoCSS selectors(*andbody) define the style of large parts of your app while the.squareselector defines the style of any component where theclassNameproperty is set tosquare. In your code, that would match the button from your Square component in theApp.jsfile.\nClick on the file labeledindex.jsin theFilessection of CodeSandbox. You won\u2019t be editing this file during the tutorial but it is the bridge between the component you created in theApp.jsfile and the web browser.\nLines 1-5 bring all the necessary pieces together:\nReactReact\u2019s library to talk to web browsers (React DOM)the styles for your componentsthe component you created inApp.js.\nThe remainder of the file brings all the pieces together and injects the final product intoindex.htmlin thepublicfolder.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "export default function Square ( ) {\nreturn < button className \"square\" > </ button > ;\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "export default function Square ( ) {\nreturn < button className \"square\" > </ button > ;\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "export default function Square ( ) {\nreturn < button className \"square\" > </ button > ;\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "import { StrictMode } from 'react' ;\nimport { createRoot } from 'react-dom/client' ;\nimport './styles.css' ;\n\nimport App from './App' ;"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/tutorial-tic-tac-toe#appjs",
                                "https://react.dev/learn/tutorial-tic-tac-toe#stylescss",
                                "https://react.dev/learn/tutorial-tic-tac-toe#indexjs"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Building the board",
                            "description": "Let\u2019s get back toApp.js. This is where you\u2019ll spend the rest of the tutorial.\nCurrently the board is only a single square, but you need nine! If you just try and copy paste your square to make two squares like this:\nYou\u2019ll get this error:\nReact components need to return a single JSX element and not multiple adjacent JSX elements like two buttons. To fix this you can useFragments(<>and</>) to wrap multiple adjacent JSX elements like this:\nNow you should see:\nGreat! Now you just need to copy-paste a few times to add nine squares and\u2026\nOh no! The squares are all in a single line, not in a grid like you need for our board. To fix this you\u2019ll need to group your squares into rows withdivs and add some CSS classes. While you\u2019re at it, you\u2019ll give each square a number to make sure you know where each square is displayed.\nIn theApp.jsfile, update theSquarecomponent to look like this:\nThe CSS defined instyles.cssstyles the divs with theclassNameofboard-row. Now that you\u2019ve grouped your components into rows with the styleddivs you have your tic-tac-toe board:\nBut you now have a problem. Your component namedSquare, really isn\u2019t a square anymore. Let\u2019s fix that by changing the name toBoard:\nAt this point your code should look something like this:",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "export default function Square ( ) {\nreturn < button className \"square\" > </ button > button  className \"square\" X /button>;\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "export default function Square ( ) {\nreturn (\n< >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n</ >\n) ;\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "export default function Square ( ) {\nreturn (\n< >\n< div className \"board-row\" >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n</ div >\n< div className \"board-row\" >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n</ div >\n< div className \"board-row\" >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n< button className \"square\" > </ button >\n</ div >\n</ >\n) ;\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "export default function Board ( ) {\n//...\n}"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Completing the game",
                    "description": "By this point, you have all the basic building blocks for your tic-tac-toe game. To have a complete game, you now need to alternate placing \u201cX\u201ds and \u201cO\u201ds on the board, and you need a way to determine a winner.\nCurrently, eachSquarecomponent maintains a part of the game\u2019s state. To check for a winner in a tic-tac-toe game, theBoardwould need to somehow know the state of each of the 9Squarecomponents.\nHow would you approach that? At first, you might guess that theBoardneeds to \u201cask\u201d eachSquarefor thatSquare\u2019s state. Although this approach is technically possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game\u2019s state in the parentBoardcomponent instead of in eachSquare. TheBoardcomponent can tell eachSquarewhat to display by passing a prop, like you did when you passed a number to each Square.\nTo collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with their parent.\nLifting state into a parent component is common when React components are refactored.\nLet\u2019s take this opportunity to try it out. Edit theBoardcomponent so that it declares a state variable namedsquaresthat defaults to an array of 9 nulls corresponding to the 9 squares:\nArray(9).fill(null)creates an array with nine elements and sets each of them tonull. TheuseState()call around it declares asquaresstate variable that\u2019s initially set to that array. Each entry in the array corresponds to the value of a square. When you fill the board in later, thesquaresarray will look like this:\nNow yourBoardcomponent needs to pass thevalueprop down to eachSquarethat it renders:\nNext, you\u2019ll edit theSquarecomponent to receive thevalueprop from the Board component. This will require removing the Square component\u2019s own stateful tracking ofvalueand the button\u2019sonClickprop:\nAt this point you should see an empty tic-tac-toe board:\nAnd your code should look like this:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "// ...\nexport default function Board ( ) {\nconst [ squares , setSquares ] useState ( Array ( 9 ) fill ( null ) ) ;\nreturn (\n// ...\n) ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "[ 'O' , null , 'X' , 'X' , 'X' , 'O' , 'O' , null , null ]"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function Board ( ) {\nconst [ squares , setSquares ] useState ( Array ( 9 ) fill ( null ) ) ;\nreturn (\n< >\n< div className \"board-row\" >\n< Square value { squares [ 0 ] } />\n< Square value { squares [ 1 ] } />\n< Square value { squares [ 2 ] } />\n</ div >\n< div className \"board-row\" >\n< Square value { squares [ 3 ] } />\n< Square value { squares [ 4 ] } />\n< Square value { squares [ 5 ] } />\n</ div >\n< div className \"board-row\" >\n< Square value { squares [ 6 ] } />\n< Square value { squares [ 7 ] } />\n< Square value { squares [ 8 ] } />\n</ div >\n</ >\n) ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Square ( { value } ) {\nreturn < button className \"square\" > { value } </ button > ;\n}"
                        }
                    ],
                    "urls": [],
                    "subsections": [
                        {
                            "title": "Lifting state up",
                            "description": "Currently, eachSquarecomponent maintains a part of the game\u2019s state. To check for a winner in a tic-tac-toe game, theBoardwould need to somehow know the state of each of the 9Squarecomponents.\nHow would you approach that? At first, you might guess that theBoardneeds to \u201cask\u201d eachSquarefor thatSquare\u2019s state. Although this approach is technically possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game\u2019s state in the parentBoardcomponent instead of in eachSquare. TheBoardcomponent can tell eachSquarewhat to display by passing a prop, like you did when you passed a number to each Square.\nTo collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with their parent.\nLifting state into a parent component is common when React components are refactored.\nLet\u2019s take this opportunity to try it out. Edit theBoardcomponent so that it declares a state variable namedsquaresthat defaults to an array of 9 nulls corresponding to the 9 squares:\nArray(9).fill(null)creates an array with nine elements and sets each of them tonull. TheuseState()call around it declares asquaresstate variable that\u2019s initially set to that array. Each entry in the array corresponds to the value of a square. When you fill the board in later, thesquaresarray will look like this:\nNow yourBoardcomponent needs to pass thevalueprop down to eachSquarethat it renders:\nNext, you\u2019ll edit theSquarecomponent to receive thevalueprop from the Board component. This will require removing the Square component\u2019s own stateful tracking ofvalueand the button\u2019sonClickprop:\nAt this point you should see an empty tic-tac-toe board:\nAnd your code should look like this:",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "// ...\nexport default function Board ( ) {\nconst [ squares , setSquares ] useState ( Array ( 9 ) fill ( null ) ) ;\nreturn (\n// ...\n) ;\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "[ 'O' , null , 'X' , 'X' , 'X' , 'O' , 'O' , null , null ]"
                                },
                                {
                                    "language": "javascript",
                                    "code": "export default function Board ( ) {\nconst [ squares , setSquares ] useState ( Array ( 9 ) fill ( null ) ) ;\nreturn (\n< >\n< div className \"board-row\" >\n< Square value { squares [ 0 ] } />\n< Square value { squares [ 1 ] } />\n< Square value { squares [ 2 ] } />\n</ div >\n< div className \"board-row\" >\n< Square value { squares [ 3 ] } />\n< Square value { squares [ 4 ] } />\n< Square value { squares [ 5 ] } />\n</ div >\n< div className \"board-row\" >\n< Square value { squares [ 6 ] } />\n< Square value { squares [ 7 ] } />\n< Square value { squares [ 8 ] } />\n</ div >\n</ >\n) ;\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function Square ( { value } ) {\nreturn < button className \"square\" > { value } </ button > ;\n}"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Adding time travel",
                    "description": "As a final exercise, let\u2019s make it possible to \u201cgo back in time\u201d to the previous moves in the game.\nIf you mutated thesquaresarray, implementing time travel would be very difficult.\nHowever, you usedslice()to create a new copy of thesquaresarray after every move, and treated it as immutable. This will allow you to store every past version of thesquaresarray, and navigate between the turns that have already happened.\nYou\u2019ll store the pastsquaresarrays in another array calledhistory, which you\u2019ll store as a new state variable. Thehistoryarray represents all board states, from the first to the last move, and has a shape like this:\nYou will now write a new top-level component calledGameto display a list of past moves. That\u2019s where you will place thehistorystate that contains the entire game history.\nPlacing thehistorystate into theGamecomponent will let you remove thesquaresstate from its childBoardcomponent. Just like you \u201clifted state up\u201d from theSquarecomponent into theBoardcomponent, you will now lift it up from theBoardinto the top-levelGamecomponent. This gives theGamecomponent full control over theBoard\u2019s data and lets it instruct theBoardto render previous turns from thehistory.\nFirst, add aGamecomponent withexport default. Have it render theBoardcomponent and some markup:\nNote that you are removing theexport defaultkeywords before thefunction Board() {declaration and adding them before thefunction Game() {declaration. This tells yourindex.jsfile to use theGamecomponent as the top-level component instead of yourBoardcomponent. The additionaldivs returned by theGamecomponent are making room for the game information you\u2019ll add to the board later.\nAdd some state to theGamecomponent to track which player is next and the history of moves:\nNotice how[Array(9).fill(null)]is an array with a single item, which itself is an array of 9nulls.\nTo render the squares for the current move, you\u2019ll want to read the last squares array from thehistory. You don\u2019t needuseStatefor this\u2014you already have enough information to calculate it during rendering:\nNext, create ahandlePlayfunction inside theGamecomponent that will be called by theBoardcomponent to update the game. PassxIsNext,currentSquaresandhandlePlayas props to theBoardcomponent:\nLet\u2019s make theBoardcomponent fully controlled by the props it receives. Change theBoardcomponent to take three props:xIsNext,squares, and a newonPlayfunction thatBoardcan call with the updated squares array when a player makes a move. Next, remove the first two lines of theBoardfunction that calluseState:\nNow replace thesetSquaresandsetXIsNextcalls inhandleClickin theBoardcomponent with a single call to your newonPlayfunction so theGamecomponent can update theBoardwhen the user clicks a square:\nTheBoardcomponent is fully controlled by the props passed to it by theGamecomponent. You need to implement thehandlePlayfunction in theGamecomponent to get the game working again.\nWhat shouldhandlePlaydo when called? Remember that Board used to callsetSquareswith an updated array; now it passes the updatedsquaresarray toonPlay.\nThehandlePlayfunction needs to updateGame\u2019s state to trigger a re-render, but you don\u2019t have asetSquaresfunction that you can call any more\u2014you\u2019re now using thehistorystate variable to store this information. You\u2019ll want to updatehistoryby appending the updatedsquaresarray as a new history entry. You also want to togglexIsNext, just as Board used to do:\nHere,[...history, nextSquares]creates a new array that contains all the items inhistory, followed bynextSquares. (You can read the...historyspread syntaxas \u201cenumerate all the items inhistory\u201d.)\nFor example, ifhistoryis[[null,null,null], [\"X\",null,null]]andnextSquaresis[\"X\",null,\"O\"], then the new[...history, nextSquares]array will be[[null,null,null], [\"X\",null,null], [\"X\",null,\"O\"]].\nAt this point, you\u2019ve moved the state to live in theGamecomponent, and the UI should be fully working, just as it was before the refactor. Here is what the code should look like at this point:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "[\n// Before first move\n[ null , null , null , null , null , null , null , null , null ] ,\n// After first move\n[ null , null , null , null , 'X' , null , null , null , null ] ,\n// After second move\n[ null , null , null , null , 'X' , null , null , null , 'O' ] ,\n// ...\n]"
                        },
                        {
                            "language": "javascript",
                            "code": "function Board ( ) {\n// ...\n}\n\nexport default function Game ( ) {\nreturn (\n< div className \"game\" >\n< div className \"game-board\" >\n< Board />\n</ div >\n< div className \"game-info\" >\n< ol > { /*TODO*/ </ ol >\n</ div >\n</ div >\n) ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function Game ( ) {\nconst [ xIsNext , setXIsNext ] useState ( true ) ;\nconst [ history , setHistory ] useState ( [ Array ( 9 ) fill ( null ) ] ) ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "export default function Game ( ) {\nconst [ xIsNext , setXIsNext ] useState ( true ) ;\nconst [ history , setHistory ] useState ( [ Array ( 9 ) fill ( null ) ] ) ;\nconst currentSquares history [ history length 1 ] ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "export default function Game ( ) {\nconst [ xIsNext , setXIsNext ] useState ( true ) ;\nconst [ history , setHistory ] useState ( [ Array ( 9 ) fill ( null ) ] ) ;\nconst currentSquares history [ history length 1 ] ;\n\nfunction handlePlay ( nextSquares ) {\n// TODO\n}\n\nreturn (\n< div className \"game\" >\n< div className \"game-board\" >\n< Board xIsNext { xIsNext } squares { currentSquares } onPlay { handlePlay } />\n\n\n"
                        },
                        {
                            "language": "javascript",
                            "code": "function Board ( { xIsNext , squares , onPlay } ) {\nfunction handleClick ( i ) {\n//...\n}\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Board ( { xIsNext , squares , onPlay } ) {\nfunction handleClick ( i ) {\nif ( calculateWinner ( squares ) squares [ i ] ) {\nreturn ;\n}\nconst nextSquares squares slice ( ) ;\nif ( xIsNext ) {\nnextSquares [ i ] \"X\" ;\n} else {\nnextSquares [ i ] \"O\" ;\n}\nonPlay ( nextSquares ) ;\n}\n//...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function Game ( ) {\n//...\nfunction handlePlay ( nextSquares ) {\nsetHistory ( [ ... history , nextSquares ] ) ;\nsetXIsNext ( xIsNext ) ;\n}\n//...\n}"
                        }
                    ],
                    "urls": [
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"
                    ],
                    "subsections": [
                        {
                            "title": "Storing a history of moves",
                            "description": "If you mutated thesquaresarray, implementing time travel would be very difficult.\nHowever, you usedslice()to create a new copy of thesquaresarray after every move, and treated it as immutable. This will allow you to store every past version of thesquaresarray, and navigate between the turns that have already happened.\nYou\u2019ll store the pastsquaresarrays in another array calledhistory, which you\u2019ll store as a new state variable. Thehistoryarray represents all board states, from the first to the last move, and has a shape like this:",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "[\n// Before first move\n[ null , null , null , null , null , null , null , null , null ] ,\n// After first move\n[ null , null , null , null , 'X' , null , null , null , null ] ,\n// After second move\n[ null , null , null , null , 'X' , null , null , null , 'O' ] ,\n// ...\n]"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Lifting state up, again",
                            "description": "You will now write a new top-level component calledGameto display a list of past moves. That\u2019s where you will place thehistorystate that contains the entire game history.\nPlacing thehistorystate into theGamecomponent will let you remove thesquaresstate from its childBoardcomponent. Just like you \u201clifted state up\u201d from theSquarecomponent into theBoardcomponent, you will now lift it up from theBoardinto the top-levelGamecomponent. This gives theGamecomponent full control over theBoard\u2019s data and lets it instruct theBoardto render previous turns from thehistory.\nFirst, add aGamecomponent withexport default. Have it render theBoardcomponent and some markup:\nNote that you are removing theexport defaultkeywords before thefunction Board() {declaration and adding them before thefunction Game() {declaration. This tells yourindex.jsfile to use theGamecomponent as the top-level component instead of yourBoardcomponent. The additionaldivs returned by theGamecomponent are making room for the game information you\u2019ll add to the board later.\nAdd some state to theGamecomponent to track which player is next and the history of moves:\nNotice how[Array(9).fill(null)]is an array with a single item, which itself is an array of 9nulls.\nTo render the squares for the current move, you\u2019ll want to read the last squares array from thehistory. You don\u2019t needuseStatefor this\u2014you already have enough information to calculate it during rendering:\nNext, create ahandlePlayfunction inside theGamecomponent that will be called by theBoardcomponent to update the game. PassxIsNext,currentSquaresandhandlePlayas props to theBoardcomponent:\nLet\u2019s make theBoardcomponent fully controlled by the props it receives. Change theBoardcomponent to take three props:xIsNext,squares, and a newonPlayfunction thatBoardcan call with the updated squares array when a player makes a move. Next, remove the first two lines of theBoardfunction that calluseState:\nNow replace thesetSquaresandsetXIsNextcalls inhandleClickin theBoardcomponent with a single call to your newonPlayfunction so theGamecomponent can update theBoardwhen the user clicks a square:\nTheBoardcomponent is fully controlled by the props passed to it by theGamecomponent. You need to implement thehandlePlayfunction in theGamecomponent to get the game working again.\nWhat shouldhandlePlaydo when called? Remember that Board used to callsetSquareswith an updated array; now it passes the updatedsquaresarray toonPlay.\nThehandlePlayfunction needs to updateGame\u2019s state to trigger a re-render, but you don\u2019t have asetSquaresfunction that you can call any more\u2014you\u2019re now using thehistorystate variable to store this information. You\u2019ll want to updatehistoryby appending the updatedsquaresarray as a new history entry. You also want to togglexIsNext, just as Board used to do:\nHere,[...history, nextSquares]creates a new array that contains all the items inhistory, followed bynextSquares. (You can read the...historyspread syntaxas \u201cenumerate all the items inhistory\u201d.)\nFor example, ifhistoryis[[null,null,null], [\"X\",null,null]]andnextSquaresis[\"X\",null,\"O\"], then the new[...history, nextSquares]array will be[[null,null,null], [\"X\",null,null], [\"X\",null,\"O\"]].\nAt this point, you\u2019ve moved the state to live in theGamecomponent, and the UI should be fully working, just as it was before the refactor. Here is what the code should look like at this point:",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function Board ( ) {\n// ...\n}\n\nexport default function Game ( ) {\nreturn (\n< div className \"game\" >\n< div className \"game-board\" >\n< Board />\n</ div >\n< div className \"game-info\" >\n< ol > { /*TODO*/ </ ol >\n</ div >\n</ div >\n) ;\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "export default function Game ( ) {\nconst [ xIsNext , setXIsNext ] useState ( true ) ;\nconst [ history , setHistory ] useState ( [ Array ( 9 ) fill ( null ) ] ) ;\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "export default function Game ( ) {\nconst [ xIsNext , setXIsNext ] useState ( true ) ;\nconst [ history , setHistory ] useState ( [ Array ( 9 ) fill ( null ) ] ) ;\nconst currentSquares history [ history length 1 ] ;\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "export default function Game ( ) {\nconst [ xIsNext , setXIsNext ] useState ( true ) ;\nconst [ history , setHistory ] useState ( [ Array ( 9 ) fill ( null ) ] ) ;\nconst currentSquares history [ history length 1 ] ;\n\nfunction handlePlay ( nextSquares ) {\n// TODO\n}\n\nreturn (\n< div className \"game\" >\n< div className \"game-board\" >\n< Board xIsNext { xIsNext } squares { currentSquares } onPlay { handlePlay } />\n\n\n"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function Board ( { xIsNext , squares , onPlay } ) {\nfunction handleClick ( i ) {\n//...\n}\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function Board ( { xIsNext , squares , onPlay } ) {\nfunction handleClick ( i ) {\nif ( calculateWinner ( squares ) squares [ i ] ) {\nreturn ;\n}\nconst nextSquares squares slice ( ) ;\nif ( xIsNext ) {\nnextSquares [ i ] \"X\" ;\n} else {\nnextSquares [ i ] \"O\" ;\n}\nonPlay ( nextSquares ) ;\n}\n//...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "export default function Game ( ) {\n//...\nfunction handlePlay ( nextSquares ) {\nsetHistory ( [ ... history , nextSquares ] ) ;\nsetXIsNext ( xIsNext ) ;\n}\n//...\n}"
                                }
                            ],
                            "urls": [
                                "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "On this page",
                    "description": "OverviewWhat are you building?Setup for the tutorialOverviewInspecting the starter codeBuilding the boardPassing data through propsMaking an interactive componentReact Developer ToolsCompleting the gameLifting state upWhy immutability is importantTaking turnsDeclaring a winnerAdding time travelStoring a history of movesLifting state up, againShowing the past movesPicking a keyImplementing time travelFinal cleanupWrapping up",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/tutorial-tic-tac-toe#",
                        "https://react.dev/learn/tutorial-tic-tac-toe#what-are-you-building",
                        "https://react.dev/learn/tutorial-tic-tac-toe#setup-for-the-tutorial",
                        "https://react.dev/learn/tutorial-tic-tac-toe#overview",
                        "https://react.dev/learn/tutorial-tic-tac-toe#inspecting-the-starter-code",
                        "https://react.dev/learn/tutorial-tic-tac-toe#building-the-board",
                        "https://react.dev/learn/tutorial-tic-tac-toe#passing-data-through-props",
                        "https://react.dev/learn/tutorial-tic-tac-toe#making-an-interactive-component",
                        "https://react.dev/learn/tutorial-tic-tac-toe#react-developer-tools",
                        "https://react.dev/learn/tutorial-tic-tac-toe#completing-the-game",
                        "https://react.dev/learn/tutorial-tic-tac-toe#lifting-state-up",
                        "https://react.dev/learn/tutorial-tic-tac-toe#why-immutability-is-important",
                        "https://react.dev/learn/tutorial-tic-tac-toe#taking-turns",
                        "https://react.dev/learn/tutorial-tic-tac-toe#declaring-a-winner",
                        "https://react.dev/learn/tutorial-tic-tac-toe#adding-time-travel",
                        "https://react.dev/learn/tutorial-tic-tac-toe#storing-a-history-of-moves",
                        "https://react.dev/learn/tutorial-tic-tac-toe#lifting-state-up-again",
                        "https://react.dev/learn/tutorial-tic-tac-toe#showing-the-past-moves",
                        "https://react.dev/learn/tutorial-tic-tac-toe#picking-a-key",
                        "https://react.dev/learn/tutorial-tic-tac-toe#implementing-time-travel",
                        "https://react.dev/learn/tutorial-tic-tac-toe#final-cleanup",
                        "https://react.dev/learn/tutorial-tic-tac-toe#wrapping-up"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Editor Setup \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/editor-setup",
        "sections": {
            "summary": "A properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you\u2019re looking to tune up your current editor, we have a few recommendations.\nWhat the most popular editors areHow to format your code automatically",
            "content": [
                {
                    "title": "Your editor",
                    "description": "VS Codeis one of the most popular editors in use today. It has a large marketplace of extensions and integrates well with popular services like GitHub. Most of the features listed below can be added to VS Code as extensions as well, making it highly configurable!\nOther popular text editors used in the React community include:\nWebStormis an integrated development environment designed specifically for JavaScript.Sublime Texthas support for JSX and TypeScript,syntax highlightingand autocomplete built in.Vimis a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as \u201cvi\u201d with most UNIX systems and with Apple OS X.",
                    "code_sample": [],
                    "urls": [
                        "https://code.visualstudio.com/",
                        "https://www.jetbrains.com/webstorm/",
                        "https://www.sublimetext.com/",
                        "https://stackoverflow.com/a/70960574/458193",
                        "https://www.vim.org/"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recommended text editor features",
                    "description": "Some editors come with these features built in, but others might require adding an extension. Check to see what support your editor of choice provides to be sure!\nCode linters find problems in your code as you write, helping you fix them early.ESLintis a popular, open source linter for JavaScript.\nInstall ESLint with the recommended configuration for React(be sure you haveNode installed!)Integrate ESLint in VSCode with the official extension\nMake sure that you\u2019ve enabled all theeslint-plugin-react-hooksrules for your project.They are essential and catch the most severe bugs early. The recommendedeslint-config-react-apppreset already includes them.\nThe last thing you want to do when sharing your code with another contributor is get into a discussion abouttabs vs spaces! Fortunately,Prettierwill clean up your code by reformatting it to conform to preset, configurable rules. Run Prettier, and all your tabs will be converted to spaces\u2014and your indentation, quotes, etc will also all be changed to conform to the configuration. In the ideal setup, Prettier will run when you save your file, quickly making these edits for you.\nYou can install thePrettier extension in VSCodeby following these steps:\nLaunch VS CodeUse Quick Open (press Ctrl/Cmd+P)Paste inext install esbenp.prettier-vscodePress Enter\nIdeally, you should format your code on every save. VS Code has settings for this!\nIn VS Code, pressCTRL/CMD + SHIFT + P.Type \u201csettings\u201dHit EnterIn the search bar, type \u201cformat on save\u201dBe sure the \u201cformat on save\u201d option is ticked!\nIf your ESLint preset has formatting rules, they may conflict with Prettier. We recommend disabling all formatting rules in your ESLint preset usingeslint-config-prettierso that ESLint isonlyused for catching logical mistakes. If you want to enforce that files are formatted before a pull request is merged, useprettier --checkfor your continuous integration.",
                    "code_sample": [],
                    "urls": [
                        "https://eslint.org/",
                        "https://www.npmjs.com/package/eslint-config-react-app",
                        "https://nodejs.org/en/download/current/",
                        "https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint",
                        "https://www.npmjs.com/package/eslint-plugin-react-hooks",
                        "https://www.npmjs.com/package/eslint-config-react-app",
                        "https://www.google.com/search?q=tabs+vs+spaces",
                        "https://prettier.io/",
                        "https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode",
                        "https://react.dev/learn/editor-setup#formatting-on-save",
                        "https://github.com/prettier/eslint-config-prettier",
                        "https://prettier.io/docs/en/cli.html#--check"
                    ],
                    "subsections": [
                        {
                            "title": "Linting",
                            "description": "Code linters find problems in your code as you write, helping you fix them early.ESLintis a popular, open source linter for JavaScript.\nInstall ESLint with the recommended configuration for React(be sure you haveNode installed!)Integrate ESLint in VSCode with the official extension\nMake sure that you\u2019ve enabled all theeslint-plugin-react-hooksrules for your project.They are essential and catch the most severe bugs early. The recommendedeslint-config-react-apppreset already includes them.",
                            "code_sample": [],
                            "urls": [
                                "https://eslint.org/",
                                "https://www.npmjs.com/package/eslint-config-react-app",
                                "https://nodejs.org/en/download/current/",
                                "https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint",
                                "https://www.npmjs.com/package/eslint-plugin-react-hooks",
                                "https://www.npmjs.com/package/eslint-config-react-app"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Formatting",
                            "description": "The last thing you want to do when sharing your code with another contributor is get into a discussion abouttabs vs spaces! Fortunately,Prettierwill clean up your code by reformatting it to conform to preset, configurable rules. Run Prettier, and all your tabs will be converted to spaces\u2014and your indentation, quotes, etc will also all be changed to conform to the configuration. In the ideal setup, Prettier will run when you save your file, quickly making these edits for you.\nYou can install thePrettier extension in VSCodeby following these steps:\nLaunch VS CodeUse Quick Open (press Ctrl/Cmd+P)Paste inext install esbenp.prettier-vscodePress Enter\nIdeally, you should format your code on every save. VS Code has settings for this!\nIn VS Code, pressCTRL/CMD + SHIFT + P.Type \u201csettings\u201dHit EnterIn the search bar, type \u201cformat on save\u201dBe sure the \u201cformat on save\u201d option is ticked!\nIf your ESLint preset has formatting rules, they may conflict with Prettier. We recommend disabling all formatting rules in your ESLint preset usingeslint-config-prettierso that ESLint isonlyused for catching logical mistakes. If you want to enforce that files are formatted before a pull request is merged, useprettier --checkfor your continuous integration.",
                            "code_sample": [],
                            "urls": [
                                "https://www.google.com/search?q=tabs+vs+spaces",
                                "https://prettier.io/",
                                "https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode",
                                "https://react.dev/learn/editor-setup#formatting-on-save",
                                "https://github.com/prettier/eslint-config-prettier",
                                "https://prettier.io/docs/en/cli.html#--check"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "On this page",
                    "description": "OverviewYour editorRecommended text editor featuresLintingFormatting",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/editor-setup#",
                        "https://react.dev/learn/editor-setup#your-editor",
                        "https://react.dev/learn/editor-setup#recommended-text-editor-features",
                        "https://react.dev/learn/editor-setup#linting",
                        "https://react.dev/learn/editor-setup#formatting"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Quick Start \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn",
        "sections": {
            "summary": "Welcome to the React documentation! This page will give you an introduction to the 80% of React concepts that you will use on a daily basis.\nHow to create and nest componentsHow to add markup and stylesHow to display dataHow to render conditions and listsHow to respond to events and update the screenHow to share data between components",
            "content": [
                {
                    "title": "Creating and nesting components",
                    "description": "React apps are made out ofcomponents. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.\nReact components are JavaScript functions that return markup:\nNow that you\u2019ve declaredMyButton, you can nest it into another component:\nNotice that<MyButton />starts with a capital letter. That\u2019s how you know it\u2019s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.\nHave a look at the result:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function MyButton ( ) {\nreturn (\n< button > </ button >\n) ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function MyApp ( ) {\nreturn (\n< div >\n< h1 > </ h1 >\n< MyButton />\n</ div >\n) ;\n}"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Writing markup with JSX",
                    "description": "The markup syntax you\u2019ve seen above is calledJSX. It is optional, but most React projects use JSX for its convenience. All of thetools we recommend for local developmentsupport JSX out of the box.\nJSX is stricter than HTML. You have to close tags like<br />. Your component also can\u2019t return multiple JSX tags. You have to wrap them into a shared parent, like a<div>...</div>or an empty<>...</>wrapper:\nIf you have a lot of HTML to port to JSX, you can use anonline converter.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function AboutPage ( ) {\nreturn (\n< >\n< h1 > </ h1 >\n< p > < br /> </ p >\n</ >\n) ;\n}"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/learn/installation",
                        "https://transform.tools/html-to-jsx"
                    ],
                    "subsections": []
                },
                {
                    "title": "Adding styles",
                    "description": "In React, you specify a CSS class withclassName. It works the same way as the HTMLclassattribute:\nThen you write the CSS rules for it in a separate CSS file:\nReact does not prescribe how you add CSS files. In the simplest case, you\u2019ll add a<link>tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "< img className \"avatar\" />"
                        },
                        {
                            "language": "javascript",
                            "code": "/* In your CSS */\n{\nborder-radius : 50 % ;\n}"
                        }
                    ],
                    "urls": [
                        "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class",
                        "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link"
                    ],
                    "subsections": []
                },
                {
                    "title": "Displaying data",
                    "description": "JSX lets you put markup into JavaScript. Curly braces let you \u201cescape back\u201d into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will displayuser.name:\nYou can also \u201cescape into JavaScript\u201d from JSX attributes, but you have to use curly bracesinstead ofquotes. For example,className=\"avatar\"passes the\"avatar\"string as the CSS class, butsrc={user.imageUrl}reads the JavaScriptuser.imageUrlvariable value, and then passes that value as thesrcattribute:\nYou can put more complex expressions inside the JSX curly braces too, for example,string concatenation:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "return (\n< h1 >\n{ user name }\n</ h1 >\n) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "return (\n< img\nclassName \"avatar\"\nsrc { user imageUrl }\n/>\n) ;"
                        }
                    ],
                    "urls": [
                        "https://javascript.info/operators#string-concatenation-with-binary"
                    ],
                    "subsections": []
                },
                {
                    "title": "Conditional rendering",
                    "description": "In React, there is no special syntax for writing conditions. Instead, you\u2019ll use the same techniques as you use when writing regular JavaScript code. For example, you can use anifstatement to conditionally include JSX:\nIf you prefer more compact code, you can use theconditional?operator.Unlikeif, it works inside JSX:\nWhen you don\u2019t need theelsebranch, you can also use a shorterlogical&&syntax:\nAll of these approaches also work for conditionally specifying attributes. If you\u2019re unfamiliar with some of this JavaScript syntax, you can start by always usingif...else.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "let content ;\nif ( isLoggedIn ) {\ncontent < AdminPanel /> ;\n} else {\ncontent < LoginForm /> ;\n}\nreturn (\n< div >\n{ content }\n</ div >\n) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "< div >\n{ isLoggedIn (\n< AdminPanel />\n) (\n< LoginForm />\n) }\n</ div >"
                        },
                        {
                            "language": "javascript",
                            "code": "< div >\n{ isLoggedIn < AdminPanel /> }\n</ div >"
                        }
                    ],
                    "urls": [
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation"
                    ],
                    "subsections": []
                },
                {
                    "title": "Rendering lists",
                    "description": "You will rely on JavaScript features likeforloopand thearraymap()functionto render lists of components.\nFor example, let\u2019s say you have an array of products:\nInside your component, use themap()function to transform an array of products into an array of<li>items:\nNotice how<li>has akeyattribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const products [\n{ title : 'Cabbage' , id : 1 } ,\n{ title : 'Garlic' , id : 2 } ,\n{ title : 'Apple' , id : 3 } ,\n] ;"
                        },
                        {
                            "language": "javascript",
                            "code": "const listItems products map ( product =>\n< li key { product id } >\n{ product title }\n</ li >\n) ;\n\nreturn (\n< ul > { listItems } </ ul >\n) ;"
                        }
                    ],
                    "urls": [
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for",
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"
                    ],
                    "subsections": []
                },
                {
                    "title": "Responding to events",
                    "description": "You can respond to events by declaringevent handlerfunctions inside your components:\nNotice howonClick={handleClick}has no parentheses at the end! Do notcallthe event handler function: you only need topass it down. React will call your event handler when the user clicks the button.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function MyButton ( ) {\nfunction handleClick ( ) {\nalert ( 'You clicked me!' ) ;\n}\n\nreturn (\n< button onClick { handleClick } >\n\n</ button >\n) ;\n}"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Updating the screen",
                    "description": "Often, you\u2019ll want your component to \u201cremember\u201d some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, addstateto your component.\nFirst, importuseStatefrom React:\nNow you can declare astate variableinside your component:\nYou\u2019ll get two things fromuseState: the current state (count), and the function that lets you update it (setCount). You can give them any names, but the convention is to write[something, setSomething].\nThe first time the button is displayed,countwill be0because you passed0touseState(). When you want to change state, callsetCount()and pass the new value to it. Clicking this button will increment the counter:\nReact will call your component function again. This time,countwill be1. Then it will be2. And so on.\nIf you render the same component multiple times, each will get its own state. Click each button separately:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "import { useState } from 'react' ;"
                        },
                        {
                            "language": "javascript",
                            "code": "function MyButton ( ) {\nconst [ count , setCount ] useState ( 0 ) ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function MyButton ( ) {\nconst [ count , setCount ] useState ( 0 ) ;\n\nfunction handleClick ( ) {\nsetCount ( count 1 ) ;\n}\n\nreturn (\n< button onClick { handleClick } >\n{ count }\n</ button >\n) ;\n}"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/reference/react/useState"
                    ],
                    "subsections": []
                },
                {
                    "title": "Using Hooks",
                    "description": "Functions starting withuseare calledHooks.useStateis a built-in Hook provided by React. You can find other built-in Hooks in theAPI reference.You can also write your own Hooks by combining the existing ones.\nHooks are more restrictive than other functions. You can only call Hooksat the topof your components (or other Hooks). If you want to useuseStatein a condition or a loop, extract a new component and put it there.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/reference/react"
                    ],
                    "subsections": []
                },
                {
                    "title": "Sharing data between components",
                    "description": "In the previous example, eachMyButtonhad its own independentcount, and when each button was clicked, only thecountfor the button clicked changed:\nInitially, eachMyButton\u2019scountstate is0\nThe firstMyButtonupdates itscountto1\nHowever, often you\u2019ll need components toshare data and always update together.\nTo make bothMyButtoncomponents display the samecountand update together, you need to move the state from the individual buttons \u201cupwards\u201d to the closest component containing all of them.\nIn this example, it isMyApp:\nInitially,MyApp\u2019scountstate is0and is passed down to both children\nOn click,MyAppupdates itscountstate to1and passes it down to both children\nNow when you click either button, thecountinMyAppwill change, which will change both of the counts inMyButton. Here\u2019s how you can express this in code.\nFirst,move the state upfromMyButtonintoMyApp:\nThen,pass the state downfromMyAppto eachMyButton, together with the shared click handler. You can pass information toMyButtonusing the JSX curly braces, just like you previously did with built-in tags like<img>:\nThe information you pass down like this is calledprops. Now theMyAppcomponent contains thecountstate and thehandleClickevent handler, andpasses both of them down as propsto each of the buttons.\nFinally, changeMyButtontoreadthe props you have passed from its parent component:\nWhen you click the button, theonClickhandler fires. Each button\u2019sonClickprop was set to thehandleClickfunction insideMyApp, so the code inside of it runs. That code callssetCount(count + 1), incrementing thecountstate variable. The newcountvalue is passed as a prop to each button, so they all show the new value. This is called \u201clifting state up\u201d. By moving state up, you\u2019ve shared it between components.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "export default function MyApp ( ) {\nconst [ count , setCount ] useState ( 0 ) ;\n\nfunction handleClick ( ) {\nsetCount ( count 1 ) ;\n}\n\nreturn (\n< div >\n< h1 > </ h1 >\n< MyButton />\n< MyButton />\n</ div >\n) ;\n}\n\nfunction MyButton ( ) {\n// ... we're moving code from here ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function MyApp ( ) {\nconst [ count , setCount ] useState ( 0 ) ;\n\nfunction handleClick ( ) {\nsetCount ( count 1 ) ;\n}\n\nreturn (\n< div >\n< h1 > </ h1 >\n< MyButton count { count } onClick { handleClick } />\n< MyButton count { count } onClick { handleClick } />\n</ div >\n) ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function MyButton ( { count , onClick } ) {\nreturn (\n< button onClick { onClick } >\n{ count }\n</ button >\n) ;\n}"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Next Steps",
                    "description": "By now, you know the basics of how to write React code!\nCheck out theTutorialto put them into practice and build your first mini-app with React.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/learn/tutorial-tic-tac-toe"
                    ],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewCreating and nesting componentsWriting markup with JSXAdding stylesDisplaying dataConditional renderingRendering listsResponding to eventsUpdating the screenUsing HooksSharing data between componentsNext Steps",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn#",
                        "https://react.dev/learn#components",
                        "https://react.dev/learn#writing-markup-with-jsx",
                        "https://react.dev/learn#adding-styles",
                        "https://react.dev/learn#displaying-data",
                        "https://react.dev/learn#conditional-rendering",
                        "https://react.dev/learn#rendering-lists",
                        "https://react.dev/learn#responding-to-events",
                        "https://react.dev/learn#updating-the-screen",
                        "https://react.dev/learn#using-hooks",
                        "https://react.dev/learn#sharing-data-between-components",
                        "https://react.dev/learn#next-steps"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Responding to Events \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/responding-to-events",
        "sections": {
            "summary": "React lets you addevent handlersto your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.\nDifferent ways to write an event handlerHow to pass event handling logic from a parent componentHow events propagate and how to stop them",
            "content": [
                {
                    "title": "Adding event handlers",
                    "description": "To add an event handler, you will first define a function and thenpass it as a propto the appropriate JSX tag. For example, here is a button that doesn\u2019t do anything yet:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/responding-to-events/learn/passing-props-to-a-component"
                    ],
                    "subsections": []
                },
                {
                    "title": "Event propagation",
                    "description": "Event handlers will also catch events from any children your component might have. We say that an event \u201cbubbles\u201d or \u201cpropagates\u201d up the tree: it starts with where the event happened, and then goes up the tree.\nThis<div>contains two buttons. Both the<div>andeach button have their ownonClickhandlers. Which handlers do you think will fire when you click a button?",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Can event handlers have side effects?",
                    "description": "Absolutely! Event handlers are the best place for side effects.\nUnlike rendering functions, event handlers don\u2019t need to bepure, so it\u2019s a great place tochangesomething\u2014for example, change an input\u2019s value in response to typing, or change a list in response to a button press. However, in order to change some information, you first need some way to store it. In React, this is done by usingstate, a component\u2019s memory.You will learn all about it on the next page.\nYou can handle events by passing a function as a prop to an element like<button>.Event handlers must be passed,not called!onClick={handleClick}, notonClick={handleClick()}.You can define an event handler function separately or inline.Event handlers are defined inside a component, so they can access props.You can declare an event handler in a parent and pass it as a prop to a child.You can define your own event handler props with application-specific names.Events propagate upwards. Calle.stopPropagation()on the first argument to prevent that.Events may have unwanted default browser behavior. Calle.preventDefault()to prevent that.Explicitly calling an event handler prop from a child handler is a good alternative to propagation.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/responding-to-events/learn/keeping-components-pure",
                        "https://react.dev/learn/responding-to-events/learn/state-a-components-memory",
                        "https://react.dev/learn/responding-to-events#recap"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "You can handle events by passing a function as a prop to an element like<button>.Event handlers must be passed,not called!onClick={handleClick}, notonClick={handleClick()}.You can define an event handler function separately or inline.Event handlers are defined inside a component, so they can access props.You can declare an event handler in a parent and pass it as a prop to a child.You can define your own event handler props with application-specific names.Events propagate upwards. Calle.stopPropagation()on the first argument to prevent that.Events may have unwanted default browser behavior. Calle.preventDefault()to prevent that.Explicitly calling an event handler prop from a child handler is a good alternative to propagation.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewAdding event handlersReading props in event handlersPassing event handlers as propsNaming event handler propsEvent propagationStopping propagationPassing handlers as alternative to propagationPreventing default behaviorCan event handlers have side effects?RecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/responding-to-events#",
                        "https://react.dev/learn/responding-to-events#adding-event-handlers",
                        "https://react.dev/learn/responding-to-events#reading-props-in-event-handlers",
                        "https://react.dev/learn/responding-to-events#passing-event-handlers-as-props",
                        "https://react.dev/learn/responding-to-events#naming-event-handler-props",
                        "https://react.dev/learn/responding-to-events#event-propagation",
                        "https://react.dev/learn/responding-to-events#stopping-propagation",
                        "https://react.dev/learn/responding-to-events#passing-handlers-as-alternative-to-propagation",
                        "https://react.dev/learn/responding-to-events#preventing-default-behavior",
                        "https://react.dev/learn/responding-to-events#can-event-handlers-have-side-effects",
                        "https://react.dev/learn/responding-to-events#recap",
                        "https://react.dev/learn/responding-to-events#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Removing Effect Dependencies \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/removing-effect-dependencies",
        "sections": {
            "summary": "When you write an Effect, the linter will verify that you\u2019ve included every reactive value (like props and state) that the Effect reads in the list of your Effect\u2019s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. Follow this guide to review and remove unnecessary dependencies from your Effects.\nHow to fix infinite Effect dependency loopsWhat to do when you want to remove a dependencyHow to read a value from your Effect without \u201creacting\u201d to itHow and why to avoid object and function dependenciesWhy suppressing the dependency linter is dangerous, and what to do instead",
            "content": [
                {
                    "title": "Dependencies should match the code",
                    "description": "When you write an Effect, you first specify how tostart and stopwhatever you want your Effect to be doing:\nThen, if you leave the Effect dependencies empty ([]), the linter will suggest the correct dependencies:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const serverUrl 'https://localhost:1234' ;\n\nfunction ChatRoom ( { roomId } ) {\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\nreturn ( ) => connection disconnect ( ) ;\n// ...\n}"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/removing-effect-dependencies/learn/lifecycle-of-reactive-effects#the-lifecycle-of-an-effect"
                    ],
                    "subsections": []
                },
                {
                    "title": "Removing unnecessary dependencies",
                    "description": "Every time you adjust the Effect\u2019s dependencies to reflect the code, look at the dependency list. Does it make sense for the Effect to re-run when any of these dependencies change? Sometimes, the answer is \u201cno\u201d:\nYou might want to re-executedifferent partsof your Effect under different conditions.You might want to only read thelatest valueof some dependency instead of \u201creacting\u201d to its changes.A dependency may change too oftenunintentionallybecause it\u2019s an object or a function.\nTo find the right solution, you\u2019ll need to answer a few questions about your Effect. Let\u2019s walk through them.\nThe first thing you should think about is whether this code should be an Effect at all.\nImagine a form. On submit, you set thesubmittedstate variable totrue. You need to send a POST request and show a notification. You\u2019ve put this logic inside an Effect that \u201creacts\u201d tosubmittedbeingtrue:\nLater, you want to style the notification message according to the current theme, so you read the current theme. Sincethemeis declared in the component body, it is a reactive value, so you add it as a dependency:\nBy doing this, you\u2019ve introduced a bug. Imagine you submit the form first and then switch between Dark and Light themes. Thethemewill change, the Effect will re-run, and so it will display the same notification again!\nThe problem here is that this shouldn\u2019t be an Effect in the first place.You want to send this POST request and show the notification in response tosubmitting the form,which is a particular interaction. To run some code in response to particular interaction, put that logic directly into the corresponding event handler:\nNow that the code is in an event handler, it\u2019s not reactive\u2014so it will only run when the user submits the form. Read more aboutchoosing between event handlers and Effectsandhow to delete unnecessary Effects.\nThe next question you should ask yourself is whether your Effect is doing several unrelated things.\nImagine you\u2019re creating a shipping form where the user needs to choose their city and area. You fetch the list ofcitiesfrom the server according to the selectedcountryto show them in a dropdown:\nThis is a good example offetching data in an Effect.You are synchronizing thecitiesstate with the network according to thecountryprop. You can\u2019t do this in an event handler because you need to fetch as soon asShippingFormis displayed and whenever thecountrychanges (no matter which interaction causes it).\nNow let\u2019s say you\u2019re adding a second select box for city areas, which should fetch theareasfor the currently selectedcity. You might start by adding a secondfetchcall for the list of areas inside the same Effect:\nHowever, since the Effect now uses thecitystate variable, you\u2019ve had to addcityto the list of dependencies. That, in turn, introduced a problem: when the user selects a different city, the Effect will re-run and callfetchCities(country). As a result, you will be unnecessarily refetching the list of cities many times.\nThe problem with this code is that you\u2019re synchronizing two different unrelated things:\nYou want to synchronize thecitiesstate to the network based on thecountryprop.You want to synchronize theareasstate to the network based on thecitystate.\nSplit the logic into two Effects, each of which reacts to the prop that it needs to synchronize with:\nNow the first Effect only re-runs if thecountrychanges, while the second Effect re-runs when thecitychanges. You\u2019ve separated them by purpose: two different things are synchronized by two separate Effects. Two separate Effects have two separate dependency lists, so they won\u2019t trigger each other unintentionally.\nThe final code is longer than the original, but splitting these Effects is still correct.Each Effect should represent an independent synchronization process.In this example, deleting one Effect doesn\u2019t break the other Effect\u2019s logic. This means theysynchronize different things,and it\u2019s good to split them up. If you\u2019re concerned about duplication, you can improve this code byextracting repetitive logic into a custom Hook.\nThis Effect updates themessagesstate variable with a newly created array every time a new message arrives:\nIt uses themessagesvariable tocreate a new arraystarting with all the existing messages and adds the new message at the end. However, sincemessagesis a reactive value read by an Effect, it must be a dependency:\nAnd makingmessagesa dependency introduces a problem.\nEvery time you receive a message,setMessages()causes the component to re-render with a newmessagesarray that includes the received message. However, since this Effect now depends onmessages, this willalsore-synchronize the Effect. So every new message will make the chat re-connect. The user would not like that!\nTo fix the issue, don\u2019t readmessagesinside the Effect. Instead, pass anupdater functiontosetMessages:\nNotice how your Effect does not read themessagesvariable at all now.You only need to pass an updater function likemsgs => [...msgs, receivedMessage]. Reactputs your updater function in a queueand will provide themsgsargument to it during the next render. This is why the Effect itself doesn\u2019t need to depend onmessagesanymore. As a result of this fix, receiving a chat message will no longer make the chat re-connect.\nThis section describes anexperimental API that has not yet been releasedin a stable version of React.\nSuppose that you want to play a sound when the user receives a new message unlessisMutedistrue:\nSince your Effect now usesisMutedin its code, you have to add it to the dependencies:\nThe problem is that every timeisMutedchanges (for example, when the user presses the \u201cMuted\u201d toggle), the Effect will re-synchronize, and reconnect to the chat. This is not the desired user experience! (In this example, even disabling the linter would not work\u2014if you do that,isMutedwould get \u201cstuck\u201d with its old value.)\nTo solve this problem, you need to extract the logic that shouldn\u2019t be reactive out of the Effect. You don\u2019t want this Effect to \u201creact\u201d to the changes inisMuted.Move this non-reactive piece of logic into an Effect Event:\nEffect Events let you split an Effect into reactive parts (which should \u201creact\u201d to reactive values likeroomIdand their changes) and non-reactive parts (which only read their latest values, likeonMessagereadsisMuted).Now that you readisMutedinside an Effect Event, it doesn\u2019t need to be a dependency of your Effect.As a result, the chat won\u2019t re-connect when you toggle the \u201cMuted\u201d setting on and off, solving the original issue!\nYou might run into a similar problem when your component receives an event handler as a prop:\nSuppose that the parent component passes adifferentonReceiveMessagefunction on every render:\nSinceonReceiveMessageis a dependency, it would cause the Effect to re-synchronize after every parent re-render. This would make it re-connect to the chat. To solve this, wrap the call in an Effect Event:\nEffect Events aren\u2019t reactive, so you don\u2019t need to specify them as dependencies. As a result, the chat will no longer re-connect even if the parent component passes a function that\u2019s different on every re-render.\nIn this example, you want to log a visit every timeroomIdchanges. You want to include the currentnotificationCountwith every log, but youdon\u2019twant a change tonotificationCountto trigger a log event.\nThe solution is again to split out the non-reactive code into an Effect Event:\nYou want your logic to be reactive with regards toroomId, so you readroomIdinside of your Effect. However, you don\u2019t want a change tonotificationCountto log an extra visit, so you readnotificationCountinside of the Effect Event.Learn more about reading the latest props and state from Effects using Effect Events.\nSometimes, youdowant your Effect to \u201creact\u201d to a certain value, but that value changes more often than you\u2019d like\u2014and might not reflect any actual change from the user\u2019s perspective. For example, let\u2019s say that you create anoptionsobject in the body of your component, and then read that object from inside of your Effect:\nThis object is declared in the component body, so it\u2019s areactive value.When you read a reactive value like this inside an Effect, you declare it as a dependency. This ensures your Effect \u201creacts\u201d to its changes:\nIt is important to declare it as a dependency! This ensures, for example, that if theroomIdchanges, your Effect will re-connect to the chat with the newoptions. However, there is also a problem with the code above. To see it, try typing into the input in the sandbox below, and watch what happens in the console:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function Form ( ) {\nconst [ submitted , setSubmitted ] useState ( false ) ;\n\nuseEffect ( ( ) => {\nif ( submitted ) {\n// \ud83d\udd34 Avoid: Event-specific logic inside an Effect\npost ( '/api/register' ) ;\nshowNotification ( 'Successfully registered!' ) ;\n}\n} , [ submitted ] ) ;\n\nfunction handleSubmit ( ) {\nsetSubmitted ( true ) ;\n}\n\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Form ( ) {\nconst [ submitted , setSubmitted ] useState ( false ) ;\nconst theme useContext ( ThemeContext ) ;\n\nuseEffect ( ( ) => {\nif ( submitted ) {\n// \ud83d\udd34 Avoid: Event-specific logic inside an Effect\npost ( '/api/register' ) ;\nshowNotification ( 'Successfully registered!' , theme ) ;\n}\n} , [ submitted , theme ] ) ; // \u2705 All dependencies declared\n\nfunction handleSubmit ( ) {\nsetSubmitted ( true ) ;\n}\n\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Form ( ) {\nconst theme useContext ( ThemeContext ) ;\n\nfunction handleSubmit ( ) {\n// \u2705 Good: Event-specific logic is called from event handlers\npost ( '/api/register' ) ;\nshowNotification ( 'Successfully registered!' , theme ) ;\n}\n\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function ShippingForm ( { country } ) {\nconst [ cities , setCities ] useState ( null ) ;\nconst [ city , setCity ] useState ( null ) ;\n\nuseEffect ( ( ) => {\nlet ignore false ;\nfetch ( `/api/cities?country= ${ country } ` )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetCities ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n} , [ country ] ) ; // \u2705 All dependencies declared\n\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function ShippingForm ( { country } ) {\nconst [ cities , setCities ] useState ( null ) ;\nconst [ city , setCity ] useState ( null ) ;\nconst [ areas , setAreas ] useState ( null ) ;\n\nuseEffect ( ( ) => {\nlet ignore false ;\nfetch ( `/api/cities?country= ${ country } ` )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetCities ( json ) ;\n}\n} ) ;\n// \ud83d\udd34 Avoid: A single Effect synchronizes two independent processes\nif ( city ) {\nfetch ( `/api/areas?city= ${ city } ` )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetAreas ( json ) ;\n}\n} ) ;\n}\nreturn ( ) => {\nignore true ;\n} ;\n} , [ country , city ] ) ; // \u2705 All dependencies declared\n\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function ShippingForm ( { country } ) {\nconst [ cities , setCities ] useState ( null ) ;\nuseEffect ( ( ) => {\nlet ignore false ;\nfetch ( `/api/cities?country= ${ country } ` )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetCities ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n} , [ country ] ) ; // \u2705 All dependencies declared\n\nconst [ city , setCity ] useState ( null ) ;\nconst [ areas , setAreas ] useState ( null ) ;\nuseEffect ( ( ) => {\nif ( city ) {\nlet ignore false ;\nfetch ( `/api/areas?city= ${ city } ` )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetAreas ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n}\n} , [ city ] ) ; // \u2705 All dependencies declared\n\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nsetMessages ( [ ... messages , receivedMessage ] ) ;\n} ) ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nsetMessages ( [ ... messages , receivedMessage ] ) ;\n} ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ roomId , messages ] ) ; // \u2705 All dependencies declared\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nsetMessages ( msgs => [ ... msgs , receivedMessage ] ) ;\n} ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ roomId ] ) ; // \u2705 All dependencies declared\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\nconst [ isMuted , setIsMuted ] useState ( false ) ;\n\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nsetMessages ( msgs => [ ... msgs , receivedMessage ] ) ;\nif ( isMuted ) {\nplaySound ( ) ;\n}\n} ) ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\nconst [ isMuted , setIsMuted ] useState ( false ) ;\n\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nsetMessages ( msgs => [ ... msgs , receivedMessage ] ) ;\nif ( isMuted ) {\nplaySound ( ) ;\n}\n} ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ roomId , isMuted ] ) ; // \u2705 All dependencies declared\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "import { useState , useEffect , useEffectEvent } from 'react' ;\n\nfunction ChatRoom ( { roomId } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\nconst [ isMuted , setIsMuted ] useState ( false ) ;\n\nconst onMessage useEffectEvent ( receivedMessage => {\nsetMessages ( msgs => [ ... msgs , receivedMessage ] ) ;\nif ( isMuted ) {\nplaySound ( ) ;\n}\n} ) ;\n\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nonMessage ( receivedMessage ) ;\n} ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ roomId ] ) ; // \u2705 All dependencies declared\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId , onReceiveMessage } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\n\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nonReceiveMessage ( receivedMessage ) ;\n} ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ roomId , onReceiveMessage ] ) ; // \u2705 All dependencies declared\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "< ChatRoom\nroomId { roomId }\nonReceiveMessage { receivedMessage => {\n// ...\n} }\n/>"
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId , onReceiveMessage } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\n\nconst onMessage useEffectEvent ( receivedMessage => {\nonReceiveMessage ( receivedMessage ) ;\n} ) ;\n\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nonMessage ( receivedMessage ) ;\n} ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ roomId ] ) ; // \u2705 All dependencies declared\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function Chat ( { roomId , notificationCount } ) {\nconst onVisit useEffectEvent ( visitedRoomId => {\nlogVisit ( visitedRoomId , notificationCount ) ;\n} ) ;\n\nuseEffect ( ( ) => {\nonVisit ( roomId ) ;\n} , [ roomId ] ) ; // \u2705 All dependencies declared\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId } ) {\n// ...\nconst options {\nserverUrl : serverUrl ,\nroomId : roomId\n} ;\n\nuseEffect ( ( ) => {\nconst connection createConnection ( options ) ;\nconnection connect ( ) ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "// ...\nuseEffect ( ( ) => {\nconst connection createConnection ( options ) ;\nconnection connect ( ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ options ] ) ; // \u2705 All dependencies declared\n// ..."
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/removing-effect-dependencies/learn/separating-events-from-effects#reactive-values-and-reactive-logic",
                        "https://react.dev/learn/removing-effect-dependencies/learn/you-might-not-need-an-effect",
                        "https://react.dev/learn/removing-effect-dependencies/learn/you-might-not-need-an-effect#fetching-data",
                        "https://react.dev/learn/removing-effect-dependencies/learn/lifecycle-of-reactive-effects#each-effect-represents-a-separate-synchronization-process",
                        "https://react.dev/learn/removing-effect-dependencies/learn/reusing-logic-with-custom-hooks#when-to-use-custom-hooks",
                        "https://react.dev/learn/removing-effect-dependencies/learn/updating-arrays-in-state",
                        "https://react.dev/learn/removing-effect-dependencies/reference/react/useState#updating-state-based-on-the-previous-state",
                        "https://react.dev/learn/removing-effect-dependencies/learn/queueing-a-series-of-state-updates",
                        "https://react.dev/learn/removing-effect-dependencies/learn/separating-events-from-effects#declaring-an-effect-event",
                        "https://react.dev/learn/removing-effect-dependencies#wrapping-an-event-handler-from-the-props",
                        "https://react.dev/learn/removing-effect-dependencies#separating-reactive-and-non-reactive-code",
                        "https://react.dev/learn/removing-effect-dependencies/learn/separating-events-from-effects#reading-latest-props-and-state-with-effect-events",
                        "https://react.dev/learn/removing-effect-dependencies/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values"
                    ],
                    "subsections": [
                        {
                            "title": "Should this code move to an event handler?",
                            "description": "The first thing you should think about is whether this code should be an Effect at all.\nImagine a form. On submit, you set thesubmittedstate variable totrue. You need to send a POST request and show a notification. You\u2019ve put this logic inside an Effect that \u201creacts\u201d tosubmittedbeingtrue:\nLater, you want to style the notification message according to the current theme, so you read the current theme. Sincethemeis declared in the component body, it is a reactive value, so you add it as a dependency:\nBy doing this, you\u2019ve introduced a bug. Imagine you submit the form first and then switch between Dark and Light themes. Thethemewill change, the Effect will re-run, and so it will display the same notification again!\nThe problem here is that this shouldn\u2019t be an Effect in the first place.You want to send this POST request and show the notification in response tosubmitting the form,which is a particular interaction. To run some code in response to particular interaction, put that logic directly into the corresponding event handler:\nNow that the code is in an event handler, it\u2019s not reactive\u2014so it will only run when the user submits the form. Read more aboutchoosing between event handlers and Effectsandhow to delete unnecessary Effects.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function Form ( ) {\nconst [ submitted , setSubmitted ] useState ( false ) ;\n\nuseEffect ( ( ) => {\nif ( submitted ) {\n// \ud83d\udd34 Avoid: Event-specific logic inside an Effect\npost ( '/api/register' ) ;\nshowNotification ( 'Successfully registered!' ) ;\n}\n} , [ submitted ] ) ;\n\nfunction handleSubmit ( ) {\nsetSubmitted ( true ) ;\n}\n\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function Form ( ) {\nconst [ submitted , setSubmitted ] useState ( false ) ;\nconst theme useContext ( ThemeContext ) ;\n\nuseEffect ( ( ) => {\nif ( submitted ) {\n// \ud83d\udd34 Avoid: Event-specific logic inside an Effect\npost ( '/api/register' ) ;\nshowNotification ( 'Successfully registered!' , theme ) ;\n}\n} , [ submitted , theme ] ) ; // \u2705 All dependencies declared\n\nfunction handleSubmit ( ) {\nsetSubmitted ( true ) ;\n}\n\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function Form ( ) {\nconst theme useContext ( ThemeContext ) ;\n\nfunction handleSubmit ( ) {\n// \u2705 Good: Event-specific logic is called from event handlers\npost ( '/api/register' ) ;\nshowNotification ( 'Successfully registered!' , theme ) ;\n}\n\n// ...\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/removing-effect-dependencies/learn/separating-events-from-effects#reactive-values-and-reactive-logic",
                                "https://react.dev/learn/removing-effect-dependencies/learn/you-might-not-need-an-effect"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Is your Effect doing several unrelated things?",
                            "description": "The next question you should ask yourself is whether your Effect is doing several unrelated things.\nImagine you\u2019re creating a shipping form where the user needs to choose their city and area. You fetch the list ofcitiesfrom the server according to the selectedcountryto show them in a dropdown:\nThis is a good example offetching data in an Effect.You are synchronizing thecitiesstate with the network according to thecountryprop. You can\u2019t do this in an event handler because you need to fetch as soon asShippingFormis displayed and whenever thecountrychanges (no matter which interaction causes it).\nNow let\u2019s say you\u2019re adding a second select box for city areas, which should fetch theareasfor the currently selectedcity. You might start by adding a secondfetchcall for the list of areas inside the same Effect:\nHowever, since the Effect now uses thecitystate variable, you\u2019ve had to addcityto the list of dependencies. That, in turn, introduced a problem: when the user selects a different city, the Effect will re-run and callfetchCities(country). As a result, you will be unnecessarily refetching the list of cities many times.\nThe problem with this code is that you\u2019re synchronizing two different unrelated things:\nYou want to synchronize thecitiesstate to the network based on thecountryprop.You want to synchronize theareasstate to the network based on thecitystate.\nSplit the logic into two Effects, each of which reacts to the prop that it needs to synchronize with:\nNow the first Effect only re-runs if thecountrychanges, while the second Effect re-runs when thecitychanges. You\u2019ve separated them by purpose: two different things are synchronized by two separate Effects. Two separate Effects have two separate dependency lists, so they won\u2019t trigger each other unintentionally.\nThe final code is longer than the original, but splitting these Effects is still correct.Each Effect should represent an independent synchronization process.In this example, deleting one Effect doesn\u2019t break the other Effect\u2019s logic. This means theysynchronize different things,and it\u2019s good to split them up. If you\u2019re concerned about duplication, you can improve this code byextracting repetitive logic into a custom Hook.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function ShippingForm ( { country } ) {\nconst [ cities , setCities ] useState ( null ) ;\nconst [ city , setCity ] useState ( null ) ;\n\nuseEffect ( ( ) => {\nlet ignore false ;\nfetch ( `/api/cities?country= ${ country } ` )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetCities ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n} , [ country ] ) ; // \u2705 All dependencies declared\n\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "function ShippingForm ( { country } ) {\nconst [ cities , setCities ] useState ( null ) ;\nconst [ city , setCity ] useState ( null ) ;\nconst [ areas , setAreas ] useState ( null ) ;\n\nuseEffect ( ( ) => {\nlet ignore false ;\nfetch ( `/api/cities?country= ${ country } ` )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetCities ( json ) ;\n}\n} ) ;\n// \ud83d\udd34 Avoid: A single Effect synchronizes two independent processes\nif ( city ) {\nfetch ( `/api/areas?city= ${ city } ` )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetAreas ( json ) ;\n}\n} ) ;\n}\nreturn ( ) => {\nignore true ;\n} ;\n} , [ country , city ] ) ; // \u2705 All dependencies declared\n\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "function ShippingForm ( { country } ) {\nconst [ cities , setCities ] useState ( null ) ;\nuseEffect ( ( ) => {\nlet ignore false ;\nfetch ( `/api/cities?country= ${ country } ` )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetCities ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n} , [ country ] ) ; // \u2705 All dependencies declared\n\nconst [ city , setCity ] useState ( null ) ;\nconst [ areas , setAreas ] useState ( null ) ;\nuseEffect ( ( ) => {\nif ( city ) {\nlet ignore false ;\nfetch ( `/api/areas?city= ${ city } ` )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetAreas ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n}\n} , [ city ] ) ; // \u2705 All dependencies declared\n\n// ..."
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/removing-effect-dependencies/learn/you-might-not-need-an-effect#fetching-data",
                                "https://react.dev/learn/removing-effect-dependencies/learn/lifecycle-of-reactive-effects#each-effect-represents-a-separate-synchronization-process",
                                "https://react.dev/learn/removing-effect-dependencies/learn/reusing-logic-with-custom-hooks#when-to-use-custom-hooks"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Are you reading some state to calculate the next state?",
                            "description": "This Effect updates themessagesstate variable with a newly created array every time a new message arrives:\nIt uses themessagesvariable tocreate a new arraystarting with all the existing messages and adds the new message at the end. However, sincemessagesis a reactive value read by an Effect, it must be a dependency:\nAnd makingmessagesa dependency introduces a problem.\nEvery time you receive a message,setMessages()causes the component to re-render with a newmessagesarray that includes the received message. However, since this Effect now depends onmessages, this willalsore-synchronize the Effect. So every new message will make the chat re-connect. The user would not like that!\nTo fix the issue, don\u2019t readmessagesinside the Effect. Instead, pass anupdater functiontosetMessages:\nNotice how your Effect does not read themessagesvariable at all now.You only need to pass an updater function likemsgs => [...msgs, receivedMessage]. Reactputs your updater function in a queueand will provide themsgsargument to it during the next render. This is why the Effect itself doesn\u2019t need to depend onmessagesanymore. As a result of this fix, receiving a chat message will no longer make the chat re-connect.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nsetMessages ( [ ... messages , receivedMessage ] ) ;\n} ) ;\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nsetMessages ( [ ... messages , receivedMessage ] ) ;\n} ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ roomId , messages ] ) ; // \u2705 All dependencies declared\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nsetMessages ( msgs => [ ... msgs , receivedMessage ] ) ;\n} ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ roomId ] ) ; // \u2705 All dependencies declared\n// ..."
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/removing-effect-dependencies/learn/updating-arrays-in-state",
                                "https://react.dev/learn/removing-effect-dependencies/reference/react/useState#updating-state-based-on-the-previous-state",
                                "https://react.dev/learn/removing-effect-dependencies/learn/queueing-a-series-of-state-updates"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Do you want to read a value without \u201creacting\u201d to its changes?",
                            "description": "This section describes anexperimental API that has not yet been releasedin a stable version of React.\nSuppose that you want to play a sound when the user receives a new message unlessisMutedistrue:\nSince your Effect now usesisMutedin its code, you have to add it to the dependencies:\nThe problem is that every timeisMutedchanges (for example, when the user presses the \u201cMuted\u201d toggle), the Effect will re-synchronize, and reconnect to the chat. This is not the desired user experience! (In this example, even disabling the linter would not work\u2014if you do that,isMutedwould get \u201cstuck\u201d with its old value.)\nTo solve this problem, you need to extract the logic that shouldn\u2019t be reactive out of the Effect. You don\u2019t want this Effect to \u201creact\u201d to the changes inisMuted.Move this non-reactive piece of logic into an Effect Event:\nEffect Events let you split an Effect into reactive parts (which should \u201creact\u201d to reactive values likeroomIdand their changes) and non-reactive parts (which only read their latest values, likeonMessagereadsisMuted).Now that you readisMutedinside an Effect Event, it doesn\u2019t need to be a dependency of your Effect.As a result, the chat won\u2019t re-connect when you toggle the \u201cMuted\u201d setting on and off, solving the original issue!\nYou might run into a similar problem when your component receives an event handler as a prop:\nSuppose that the parent component passes adifferentonReceiveMessagefunction on every render:\nSinceonReceiveMessageis a dependency, it would cause the Effect to re-synchronize after every parent re-render. This would make it re-connect to the chat. To solve this, wrap the call in an Effect Event:\nEffect Events aren\u2019t reactive, so you don\u2019t need to specify them as dependencies. As a result, the chat will no longer re-connect even if the parent component passes a function that\u2019s different on every re-render.\nIn this example, you want to log a visit every timeroomIdchanges. You want to include the currentnotificationCountwith every log, but youdon\u2019twant a change tonotificationCountto trigger a log event.\nThe solution is again to split out the non-reactive code into an Effect Event:\nYou want your logic to be reactive with regards toroomId, so you readroomIdinside of your Effect. However, you don\u2019t want a change tonotificationCountto log an extra visit, so you readnotificationCountinside of the Effect Event.Learn more about reading the latest props and state from Effects using Effect Events.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\nconst [ isMuted , setIsMuted ] useState ( false ) ;\n\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nsetMessages ( msgs => [ ... msgs , receivedMessage ] ) ;\nif ( isMuted ) {\nplaySound ( ) ;\n}\n} ) ;\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\nconst [ isMuted , setIsMuted ] useState ( false ) ;\n\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nsetMessages ( msgs => [ ... msgs , receivedMessage ] ) ;\nif ( isMuted ) {\nplaySound ( ) ;\n}\n} ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ roomId , isMuted ] ) ; // \u2705 All dependencies declared\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "import { useState , useEffect , useEffectEvent } from 'react' ;\n\nfunction ChatRoom ( { roomId } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\nconst [ isMuted , setIsMuted ] useState ( false ) ;\n\nconst onMessage useEffectEvent ( receivedMessage => {\nsetMessages ( msgs => [ ... msgs , receivedMessage ] ) ;\nif ( isMuted ) {\nplaySound ( ) ;\n}\n} ) ;\n\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nonMessage ( receivedMessage ) ;\n} ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ roomId ] ) ; // \u2705 All dependencies declared\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId , onReceiveMessage } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\n\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nonReceiveMessage ( receivedMessage ) ;\n} ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ roomId , onReceiveMessage ] ) ; // \u2705 All dependencies declared\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "< ChatRoom\nroomId { roomId }\nonReceiveMessage { receivedMessage => {\n// ...\n} }\n/>"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId , onReceiveMessage } ) {\nconst [ messages , setMessages ] useState ( [ ] ) ;\n\nconst onMessage useEffectEvent ( receivedMessage => {\nonReceiveMessage ( receivedMessage ) ;\n} ) ;\n\nuseEffect ( ( ) => {\nconst connection createConnection ( ) ;\nconnection connect ( ) ;\nconnection on ( 'message' , ( receivedMessage ) => {\nonMessage ( receivedMessage ) ;\n} ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ roomId ] ) ; // \u2705 All dependencies declared\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "function Chat ( { roomId , notificationCount } ) {\nconst onVisit useEffectEvent ( visitedRoomId => {\nlogVisit ( visitedRoomId , notificationCount ) ;\n} ) ;\n\nuseEffect ( ( ) => {\nonVisit ( roomId ) ;\n} , [ roomId ] ) ; // \u2705 All dependencies declared\n// ...\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/removing-effect-dependencies/learn/separating-events-from-effects#declaring-an-effect-event",
                                "https://react.dev/learn/removing-effect-dependencies#wrapping-an-event-handler-from-the-props",
                                "https://react.dev/learn/removing-effect-dependencies#separating-reactive-and-non-reactive-code",
                                "https://react.dev/learn/removing-effect-dependencies/learn/separating-events-from-effects#reading-latest-props-and-state-with-effect-events"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Does some reactive value change unintentionally?",
                            "description": "Sometimes, youdowant your Effect to \u201creact\u201d to a certain value, but that value changes more often than you\u2019d like\u2014and might not reflect any actual change from the user\u2019s perspective. For example, let\u2019s say that you create anoptionsobject in the body of your component, and then read that object from inside of your Effect:\nThis object is declared in the component body, so it\u2019s areactive value.When you read a reactive value like this inside an Effect, you declare it as a dependency. This ensures your Effect \u201creacts\u201d to its changes:\nIt is important to declare it as a dependency! This ensures, for example, that if theroomIdchanges, your Effect will re-connect to the chat with the newoptions. However, there is also a problem with the code above. To see it, try typing into the input in the sandbox below, and watch what happens in the console:",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId } ) {\n// ...\nconst options {\nserverUrl : serverUrl ,\nroomId : roomId\n} ;\n\nuseEffect ( ( ) => {\nconst connection createConnection ( options ) ;\nconnection connect ( ) ;\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "// ...\nuseEffect ( ( ) => {\nconst connection createConnection ( options ) ;\nconnection connect ( ) ;\nreturn ( ) => connection disconnect ( ) ;\n} , [ options ] ) ; // \u2705 All dependencies declared\n// ..."
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/removing-effect-dependencies/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Recap",
                    "description": "Dependencies should always match the code.When you\u2019re not happy with your dependencies, what you need to edit is the code.Suppressing the linter leads to very confusing bugs, and you should always avoid it.To remove a dependency, you need to \u201cprove\u201d to the linter that it\u2019s not necessary.If some code should run in response to a specific interaction, move that code to an event handler.If different parts of your Effect should re-run for different reasons, split it into several Effects.If you want to update some state based on the previous state, pass an updater function.If you want to read the latest value without \u201creacting\u201d it, extract an Effect Event from your Effect.In JavaScript, objects and functions are considered different if they were created at different times.Try to avoid object and function dependencies. Move them outside the component or inside the Effect.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewDependencies should match the codeTo remove a dependency, prove that it\u2019s not a dependencyTo change the dependencies, change the codeRemoving unnecessary dependenciesShould this code move to an event handler?Is your Effect doing several unrelated things?Are you reading some state to calculate the next state?Do you want to read a value without \u201creacting\u201d to its changes?Does some reactive value change unintentionally?RecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/removing-effect-dependencies#",
                        "https://react.dev/learn/removing-effect-dependencies#dependencies-should-match-the-code",
                        "https://react.dev/learn/removing-effect-dependencies#to-remove-a-dependency-prove-that-its-not-a-dependency",
                        "https://react.dev/learn/removing-effect-dependencies#to-change-the-dependencies-change-the-code",
                        "https://react.dev/learn/removing-effect-dependencies#removing-unnecessary-dependencies",
                        "https://react.dev/learn/removing-effect-dependencies#should-this-code-move-to-an-event-handler",
                        "https://react.dev/learn/removing-effect-dependencies#is-your-effect-doing-several-unrelated-things",
                        "https://react.dev/learn/removing-effect-dependencies#are-you-reading-some-state-to-calculate-the-next-state",
                        "https://react.dev/learn/removing-effect-dependencies#do-you-want-to-read-a-value-without-reacting-to-its-changes",
                        "https://react.dev/learn/removing-effect-dependencies#does-some-reactive-value-change-unintentionally",
                        "https://react.dev/learn/removing-effect-dependencies#recap",
                        "https://react.dev/learn/removing-effect-dependencies#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "React Compiler \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/react-compiler",
        "sections": {
            "summary": "Please note that the compiler is still in Beta and has many rough edges. While it has been used in production at companies like Meta, rolling out the compiler to production for your app will depend on the health of your codebase and how well you\u2019ve followed theRules of React.\nYou don\u2019t have to rush into using the compiler now. It\u2019s okay to wait until it reaches a stable release before adopting it.However, we do appreciate trying it out in small experiments in your apps so that you canprovide feedbackto us to help make the compiler better.",
            "content": [
                {
                    "title": "Getting Started",
                    "description": "In addition to these docs, we recommend checking theReact Compiler Working Groupfor additional information and discussion about the compiler.\nReact Compiler also powers an ESLint plugin. The ESLint plugin can be usedindependentlyof the compiler, meaning you can use the ESLint plugin even if you don\u2019t use the compiler.\nThen, add it to your ESLint config:\nOr, in the deprecated eslintrc config format:\nThe ESLint plugin will display any violations of the rules of React in your editor. When it does this, it means that the compiler has skipped over optimizing that component or hook. This is perfectly okay, and the compiler can recover and continue optimizing other components in your codebase.\nYou don\u2019t have to fix all ESLint violations straight away.You can address them at your own pace to increase the amount of components and hooks being optimized, but it is not required to fix everything before you can use the compiler.\nThe compiler is designed to compile functional components and hooks that follow theRules of React. It can also handle code that breaks those rules by bailing out (skipping over) those components or hooks. However, due to the flexible nature of JavaScript, the compiler cannot catch every possible violation and may compile with false negatives: that is, the compiler may accidentally compile a component/hook that breaks the Rules of React which can lead to undefined behavior.\nFor this reason, to adopt the compiler successfully on existing projects, we recommend running it on a small directory in your product code first. You can do this by configuring the compiler to only run on a specific set of directories:\nWhen you have more confidence with rolling out the compiler, you can expand coverage to other directories as well and slowly roll it out to your whole app.\nIf you\u2019re starting a new project, you can enable the compiler on your entire codebase, which is the default behavior.\nReact Compiler works best with React 19 RC. If you are unable to upgrade, you can install the extrareact-compiler-runtimepackage which will allow the compiled code to run on versions prior to 19. However, note that the minimum supported version is 17.\nYou should also add the correcttargetto your compiler config, wheretargetis the major version of React you are targeting:\nReact Compiler can also be used to compile libraries. Because React Compiler needs to run on the original source code prior to any code transformations, it is not possible for an application\u2019s build pipeline to compile the libraries they use. Hence, our recommendation is for library maintainers to independently compile and test their libraries with the compiler, and ship compiled code to npm.\nBecause your code is pre-compiled, users of your library will not need to have the compiler enabled in order to benefit from the automatic memoization applied to your library. If your library targets apps not yet on React 19, specify a minimumtargetand addreact-compiler-runtimeas a direct dependency. The runtime package will use the correct implementation of APIs depending on the application\u2019s version, and polyfill the missing APIs if necessary.\nLibrary code can often require more complex patterns and usage of escape hatches. For this reason, we recommend ensuring that you have sufficient testing in order to identify any issues that might arise from using the compiler on your library. If you identify any issues, you can always opt-out the specific components or hooks with the'use no memo'directive.\nSimilarly to apps, it is not necessary to fully compile 100% of your components or hooks to see benefits in your library. A good starting point might be to identify the most performance sensitive parts of your library and ensuring that they don\u2019t break theRules of React, which you can useeslint-plugin-react-compilerto identify.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "import reactCompiler from 'eslint-plugin-react-compiler'\n\nexport default [\n{\nplugins : {\n'react-compiler' : reactCompiler ,\n} ,\nrules : {\n'react-compiler/react-compiler' : 'error' ,\n} ,\n} ,\n]"
                        },
                        {
                            "language": "javascript",
                            "code": "module exports {\nplugins : [\n'eslint-plugin-react-compiler' ,\n] ,\nrules : {\n'react-compiler/react-compiler' : 'error' ,\n} ,\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "const ReactCompilerConfig {\nsources : ( filename ) => {\nreturn filename indexOf ( 'src/path/to/dir' ) 1 ;\n} ,\n} ;"
                        },
                        {
                            "language": "javascript",
                            "code": "// babel.config.js\nconst ReactCompilerConfig {\ntarget : '18' // '17' | '18' | '19'\n} ;\n\nmodule exports function ( ) {\nreturn {\nplugins : [\n[ 'babel-plugin-react-compiler' , ReactCompilerConfig ] ,\n] ,\n} ;\n} ;"
                        }
                    ],
                    "urls": [
                        "https://github.com/reactwg/react-compiler",
                        "https://react.dev/learn/react-compiler#existing-projects",
                        "https://react.dev/learn/react-compiler/reference/rules",
                        "https://react.dev/learn/react-compiler#new-projects",
                        "https://react.dev/learn/react-compiler#using-react-compiler-with-react-17-or-18",
                        "https://react.dev/learn/react-compiler#something-is-not-working-after-compilation",
                        "https://react.dev/learn/react-compiler/reference/rules"
                    ],
                    "subsections": [
                        {
                            "title": "Installing eslint-plugin-react-compiler",
                            "description": "React Compiler also powers an ESLint plugin. The ESLint plugin can be usedindependentlyof the compiler, meaning you can use the ESLint plugin even if you don\u2019t use the compiler.\nThen, add it to your ESLint config:\nOr, in the deprecated eslintrc config format:\nThe ESLint plugin will display any violations of the rules of React in your editor. When it does this, it means that the compiler has skipped over optimizing that component or hook. This is perfectly okay, and the compiler can recover and continue optimizing other components in your codebase.\nYou don\u2019t have to fix all ESLint violations straight away.You can address them at your own pace to increase the amount of components and hooks being optimized, but it is not required to fix everything before you can use the compiler.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "import reactCompiler from 'eslint-plugin-react-compiler'\n\nexport default [\n{\nplugins : {\n'react-compiler' : reactCompiler ,\n} ,\nrules : {\n'react-compiler/react-compiler' : 'error' ,\n} ,\n} ,\n]"
                                },
                                {
                                    "language": "javascript",
                                    "code": "module exports {\nplugins : [\n'eslint-plugin-react-compiler' ,\n] ,\nrules : {\n'react-compiler/react-compiler' : 'error' ,\n} ,\n}"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Rolling out the compiler to your codebase",
                            "description": "The compiler is designed to compile functional components and hooks that follow theRules of React. It can also handle code that breaks those rules by bailing out (skipping over) those components or hooks. However, due to the flexible nature of JavaScript, the compiler cannot catch every possible violation and may compile with false negatives: that is, the compiler may accidentally compile a component/hook that breaks the Rules of React which can lead to undefined behavior.\nFor this reason, to adopt the compiler successfully on existing projects, we recommend running it on a small directory in your product code first. You can do this by configuring the compiler to only run on a specific set of directories:\nWhen you have more confidence with rolling out the compiler, you can expand coverage to other directories as well and slowly roll it out to your whole app.\nIf you\u2019re starting a new project, you can enable the compiler on your entire codebase, which is the default behavior.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "const ReactCompilerConfig {\nsources : ( filename ) => {\nreturn filename indexOf ( 'src/path/to/dir' ) 1 ;\n} ,\n} ;"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/react-compiler#existing-projects",
                                "https://react.dev/learn/react-compiler/reference/rules",
                                "https://react.dev/learn/react-compiler#new-projects"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Using React Compiler with React 17 or 18",
                            "description": "React Compiler works best with React 19 RC. If you are unable to upgrade, you can install the extrareact-compiler-runtimepackage which will allow the compiled code to run on versions prior to 19. However, note that the minimum supported version is 17.\nYou should also add the correcttargetto your compiler config, wheretargetis the major version of React you are targeting:",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "// babel.config.js\nconst ReactCompilerConfig {\ntarget : '18' // '17' | '18' | '19'\n} ;\n\nmodule exports function ( ) {\nreturn {\nplugins : [\n[ 'babel-plugin-react-compiler' , ReactCompilerConfig ] ,\n] ,\n} ;\n} ;"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Using the compiler on libraries",
                            "description": "React Compiler can also be used to compile libraries. Because React Compiler needs to run on the original source code prior to any code transformations, it is not possible for an application\u2019s build pipeline to compile the libraries they use. Hence, our recommendation is for library maintainers to independently compile and test their libraries with the compiler, and ship compiled code to npm.\nBecause your code is pre-compiled, users of your library will not need to have the compiler enabled in order to benefit from the automatic memoization applied to your library. If your library targets apps not yet on React 19, specify a minimumtargetand addreact-compiler-runtimeas a direct dependency. The runtime package will use the correct implementation of APIs depending on the application\u2019s version, and polyfill the missing APIs if necessary.\nLibrary code can often require more complex patterns and usage of escape hatches. For this reason, we recommend ensuring that you have sufficient testing in order to identify any issues that might arise from using the compiler on your library. If you identify any issues, you can always opt-out the specific components or hooks with the'use no memo'directive.\nSimilarly to apps, it is not necessary to fully compile 100% of your components or hooks to see benefits in your library. A good starting point might be to identify the most performance sensitive parts of your library and ensuring that they don\u2019t break theRules of React, which you can useeslint-plugin-react-compilerto identify.",
                            "code_sample": [],
                            "urls": [
                                "https://react.dev/learn/react-compiler#using-react-compiler-with-react-17-or-18",
                                "https://react.dev/learn/react-compiler#something-is-not-working-after-compilation",
                                "https://react.dev/learn/react-compiler/reference/rules"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Usage",
                    "description": "The compiler includes a Babel plugin which you can use in your build pipeline to run the compiler.\nAfter installing, add it to your Babel config. Please note that it\u2019s critical that the compiler runfirstin the pipeline:\nbabel-plugin-react-compilershould run first before other Babel plugins as the compiler requires the input source information for sound analysis.\nIf you use Vite, you can add the plugin to vite-plugin-react:\nPlease refer to theNext.js docsfor more information.\nInstallvite-plugin-babel, and add the compiler\u2019s Babel plugin to it:\nA community Webpack loader isnow available here.\nPlease refer toExpo\u2019s docsto enable and use the React Compiler in Expo apps.\nReact Native uses Babel via Metro, so refer to theUsage with Babelsection for installation instructions.\nPlease refer toRspack\u2019s docsto enable and use the React Compiler in Rspack apps.\nPlease refer toRsbuild\u2019s docsto enable and use the React Compiler in Rsbuild apps.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "// babel.config.js\nconst ReactCompilerConfig { /* ... */ } ;\n\nmodule exports function ( ) {\nreturn {\nplugins : [\n[ 'babel-plugin-react-compiler' , ReactCompilerConfig ] , // must run first!\n// ...\n] ,\n} ;\n} ;"
                        },
                        {
                            "language": "javascript",
                            "code": "// vite.config.js\nconst ReactCompilerConfig { /* ... */ } ;\n\nexport default defineConfig ( ( ) => {\nreturn {\nplugins : [\nreact ( {\nbabel : {\nplugins : [\n[ \"babel-plugin-react-compiler\" , ReactCompilerConfig ] ,\n] ,\n} ,\n} ) ,\n] ,\n// ...\n} ;\n} ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "// vite.config.js\nimport babel from \"vite-plugin-babel\" ;\n\nconst ReactCompilerConfig { /* ... */ } ;\n\nexport default defineConfig ( {\nplugins : [\nremix ( { /* ... */ } ) ,\nbabel ( {\nfilter : /\\.[jt]sx?$/ ,\nbabelConfig : {\npresets : [ \"@babel/preset-typescript\" ] , // if you use TypeScript\nplugins : [\n[ \"babel-plugin-react-compiler\" , ReactCompilerConfig ] ,\n] ,\n} ,\n} ) ,\n] ,\n} ) ;"
                        }
                    ],
                    "urls": [
                        "https://nextjs.org/docs/app/api-reference/next-config-js/reactCompiler",
                        "https://github.com/SukkaW/react-compiler-webpack",
                        "https://docs.expo.dev/guides/react-compiler/",
                        "https://react.dev/learn/react-compiler#usage-with-babel",
                        "https://rspack.dev/guide/tech/react#react-compiler",
                        "https://rsbuild.dev/guide/framework/react#react-compiler"
                    ],
                    "subsections": [
                        {
                            "title": "Babel",
                            "description": "The compiler includes a Babel plugin which you can use in your build pipeline to run the compiler.\nAfter installing, add it to your Babel config. Please note that it\u2019s critical that the compiler runfirstin the pipeline:\nbabel-plugin-react-compilershould run first before other Babel plugins as the compiler requires the input source information for sound analysis.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "// babel.config.js\nconst ReactCompilerConfig { /* ... */ } ;\n\nmodule exports function ( ) {\nreturn {\nplugins : [\n[ 'babel-plugin-react-compiler' , ReactCompilerConfig ] , // must run first!\n// ...\n] ,\n} ;\n} ;"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Vite",
                            "description": "If you use Vite, you can add the plugin to vite-plugin-react:",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "// vite.config.js\nconst ReactCompilerConfig { /* ... */ } ;\n\nexport default defineConfig ( ( ) => {\nreturn {\nplugins : [\nreact ( {\nbabel : {\nplugins : [\n[ \"babel-plugin-react-compiler\" , ReactCompilerConfig ] ,\n] ,\n} ,\n} ) ,\n] ,\n// ...\n} ;\n} ) ;"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Next.js",
                            "description": "Please refer to theNext.js docsfor more information.",
                            "code_sample": [],
                            "urls": [
                                "https://nextjs.org/docs/app/api-reference/next-config-js/reactCompiler"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Remix",
                            "description": "Installvite-plugin-babel, and add the compiler\u2019s Babel plugin to it:",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "// vite.config.js\nimport babel from \"vite-plugin-babel\" ;\n\nconst ReactCompilerConfig { /* ... */ } ;\n\nexport default defineConfig ( {\nplugins : [\nremix ( { /* ... */ } ) ,\nbabel ( {\nfilter : /\\.[jt]sx?$/ ,\nbabelConfig : {\npresets : [ \"@babel/preset-typescript\" ] , // if you use TypeScript\nplugins : [\n[ \"babel-plugin-react-compiler\" , ReactCompilerConfig ] ,\n] ,\n} ,\n} ) ,\n] ,\n} ) ;"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Webpack",
                            "description": "A community Webpack loader isnow available here.",
                            "code_sample": [],
                            "urls": [
                                "https://github.com/SukkaW/react-compiler-webpack"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Expo",
                            "description": "Please refer toExpo\u2019s docsto enable and use the React Compiler in Expo apps.",
                            "code_sample": [],
                            "urls": [
                                "https://docs.expo.dev/guides/react-compiler/"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Metro (React Native)",
                            "description": "React Native uses Babel via Metro, so refer to theUsage with Babelsection for installation instructions.",
                            "code_sample": [],
                            "urls": [
                                "https://react.dev/learn/react-compiler#usage-with-babel"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Rspack",
                            "description": "Please refer toRspack\u2019s docsto enable and use the React Compiler in Rspack apps.",
                            "code_sample": [],
                            "urls": [
                                "https://rspack.dev/guide/tech/react#react-compiler"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Rsbuild",
                            "description": "Please refer toRsbuild\u2019s docsto enable and use the React Compiler in Rsbuild apps.",
                            "code_sample": [],
                            "urls": [
                                "https://rsbuild.dev/guide/framework/react#react-compiler"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Troubleshooting",
                    "description": "To report issues, please first create a minimal repro on theReact Compiler Playgroundand include it in your bug report. You can open issues in thefacebook/reactrepo.\nYou can also provide feedback in the React Compiler Working Group by applying to be a member. Please seethe README for more details on joining.\nReact Compiler assumes that your code:\nIs valid, semantic JavaScript.Tests that nullable/optional values and properties are defined before accessing them (for example, by enablingstrictNullChecksif using TypeScript), i.e.,if (object.nullableProperty) { object.nullableProperty.foo }or with optional-chainingobject.nullableProperty?.foo.Follows theRules of React.\nReact Compiler can verify many of the Rules of React statically, and will safely skip compilation when it detects an error. To see the errors we recommend also installingeslint-plugin-react-compiler.\nReact Devtools(v5.0+) has built-in support for React Compiler and will display a \u201cMemo \u2728\u201d badge next to components that have been optimized by the compiler.\nIf you have eslint-plugin-react-compiler installed, the compiler will display any violations of the rules of React in your editor. When it does this, it means that the compiler has skipped over optimizing that component or hook. This is perfectly okay, and the compiler can recover and continue optimizing other components in your codebase.You don\u2019t have to fix all ESLint violations straight away.You can address them at your own pace to increase the amount of components and hooks being optimized.\nDue to the flexible and dynamic nature of JavaScript however, it\u2019s not possible to comprehensively detect all cases. Bugs and undefined behavior such as infinite loops may occur in those cases.\nIf your app doesn\u2019t work properly after compilation and you aren\u2019t seeing any ESLint errors, the compiler may be incorrectly compiling your code. To confirm this, try to make the issue go away by aggressively opting out any component or hook you think might be related via the\"use no memo\"directive.\n\"use no memo\"is atemporaryescape hatch that lets you opt-out components and hooks from being compiled by the React Compiler. This directive is not meant to be long lived the same way as eg\"use client\"is.\nIt is not recommended to reach for this directive unless it\u2019s strictly necessary. Once you opt-out a component or hook, it is opted-out forever until the directive is removed. This means that even if you fix the code, the compiler will still skip over compiling it unless you remove the directive.\nWhen you make the error go away, confirm that removing the opt out directive makes the issue come back. Then share a bug report with us (you can try to reduce it to a small repro, or if it\u2019s open source code you can also just paste the entire source) using theReact Compiler Playgroundso we can identify and help fix the issue.\nPlease seehttps://github.com/reactwg/react-compiler/discussions/7.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function SuspiciousComponent ( ) {\n\"use no memo\" ; // opts out this component from being compiled by React Compiler\n// ...\n}"
                        }
                    ],
                    "urls": [
                        "https://playground.react.dev/",
                        "https://github.com/facebook/react/issues",
                        "https://github.com/reactwg/react-compiler",
                        "https://www.typescriptlang.org/tsconfig/#strictNullChecks",
                        "https://react.dev/reference/rules",
                        "https://www.npmjs.com/package/eslint-plugin-react-compiler",
                        "https://react.dev/learn/react-compiler/learn/react-developer-tools",
                        "https://react.dev/learn/react-compiler#opt-out-of-the-compiler-for-a-component",
                        "https://react.dev/learn/react-compiler#use-no-memo",
                        "https://react.dev/learn/react-compiler/reference/rsc/use-client",
                        "https://playground.react.dev",
                        "https://github.com/reactwg/react-compiler/discussions/7"
                    ],
                    "subsections": [
                        {
                            "title": "What does the compiler assume?",
                            "description": "React Compiler assumes that your code:\nIs valid, semantic JavaScript.Tests that nullable/optional values and properties are defined before accessing them (for example, by enablingstrictNullChecksif using TypeScript), i.e.,if (object.nullableProperty) { object.nullableProperty.foo }or with optional-chainingobject.nullableProperty?.foo.Follows theRules of React.\nReact Compiler can verify many of the Rules of React statically, and will safely skip compilation when it detects an error. To see the errors we recommend also installingeslint-plugin-react-compiler.",
                            "code_sample": [],
                            "urls": [
                                "https://www.typescriptlang.org/tsconfig/#strictNullChecks",
                                "https://react.dev/reference/rules",
                                "https://www.npmjs.com/package/eslint-plugin-react-compiler"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "How do I know my components have been optimized?",
                            "description": "React Devtools(v5.0+) has built-in support for React Compiler and will display a \u201cMemo \u2728\u201d badge next to components that have been optimized by the compiler.",
                            "code_sample": [],
                            "urls": [
                                "https://react.dev/learn/react-compiler/learn/react-developer-tools"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Something is not working after compilation",
                            "description": "If you have eslint-plugin-react-compiler installed, the compiler will display any violations of the rules of React in your editor. When it does this, it means that the compiler has skipped over optimizing that component or hook. This is perfectly okay, and the compiler can recover and continue optimizing other components in your codebase.You don\u2019t have to fix all ESLint violations straight away.You can address them at your own pace to increase the amount of components and hooks being optimized.\nDue to the flexible and dynamic nature of JavaScript however, it\u2019s not possible to comprehensively detect all cases. Bugs and undefined behavior such as infinite loops may occur in those cases.\nIf your app doesn\u2019t work properly after compilation and you aren\u2019t seeing any ESLint errors, the compiler may be incorrectly compiling your code. To confirm this, try to make the issue go away by aggressively opting out any component or hook you think might be related via the\"use no memo\"directive.\n\"use no memo\"is atemporaryescape hatch that lets you opt-out components and hooks from being compiled by the React Compiler. This directive is not meant to be long lived the same way as eg\"use client\"is.\nIt is not recommended to reach for this directive unless it\u2019s strictly necessary. Once you opt-out a component or hook, it is opted-out forever until the directive is removed. This means that even if you fix the code, the compiler will still skip over compiling it unless you remove the directive.\nWhen you make the error go away, confirm that removing the opt out directive makes the issue come back. Then share a bug report with us (you can try to reduce it to a small repro, or if it\u2019s open source code you can also just paste the entire source) using theReact Compiler Playgroundso we can identify and help fix the issue.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function SuspiciousComponent ( ) {\n\"use no memo\" ; // opts out this component from being compiled by React Compiler\n// ...\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/react-compiler#opt-out-of-the-compiler-for-a-component",
                                "https://react.dev/learn/react-compiler#use-no-memo",
                                "https://react.dev/learn/react-compiler/reference/rsc/use-client",
                                "https://playground.react.dev"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Other issues",
                            "description": "Please seehttps://github.com/reactwg/react-compiler/discussions/7.",
                            "code_sample": [],
                            "urls": [
                                "https://github.com/reactwg/react-compiler/discussions/7"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "On this page",
                    "description": "OverviewWhat does the compiler do?Should I try out the compiler?Getting StartedInstalling eslint-plugin-react-compilerRolling out the compiler to your codebaseUsing React Compiler with React 17 or 18Using the compiler on librariesUsageBabelViteNext.jsRemixWebpackExpoMetro (React Native)RspackRsbuildTroubleshootingWhat does the compiler assume?How do I know my components have been optimized?Something is not working after compilationOther issues",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/react-compiler#",
                        "https://react.dev/learn/react-compiler#what-does-the-compiler-do",
                        "https://react.dev/learn/react-compiler#should-i-try-out-the-compiler",
                        "https://react.dev/learn/react-compiler#getting-started",
                        "https://react.dev/learn/react-compiler#installing-eslint-plugin-react-compiler",
                        "https://react.dev/learn/react-compiler#using-the-compiler-effectively",
                        "https://react.dev/learn/react-compiler#using-react-compiler-with-react-17-or-18",
                        "https://react.dev/learn/react-compiler#using-the-compiler-on-libraries",
                        "https://react.dev/learn/react-compiler#installation",
                        "https://react.dev/learn/react-compiler#usage-with-babel",
                        "https://react.dev/learn/react-compiler#usage-with-vite",
                        "https://react.dev/learn/react-compiler#usage-with-nextjs",
                        "https://react.dev/learn/react-compiler#usage-with-remix",
                        "https://react.dev/learn/react-compiler#usage-with-webpack",
                        "https://react.dev/learn/react-compiler#usage-with-expo",
                        "https://react.dev/learn/react-compiler#usage-with-react-native-metro",
                        "https://react.dev/learn/react-compiler#usage-with-rspack",
                        "https://react.dev/learn/react-compiler#usage-with-rsbuild",
                        "https://react.dev/learn/react-compiler#troubleshooting",
                        "https://react.dev/learn/react-compiler#what-does-the-compiler-assume",
                        "https://react.dev/learn/react-compiler#how-do-i-know-my-components-have-been-optimized",
                        "https://react.dev/learn/react-compiler#something-is-not-working-after-compilation",
                        "https://react.dev/learn/react-compiler#other-issues"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Extracting State Logic into a Reducer \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
        "sections": {
            "summary": "Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called areducer.\nWhat a reducer function isHow to refactoruseStatetouseReducerWhen to use a reducerHow to write one well",
            "content": [
                {
                    "title": "Consolidate state logic with a reducer",
                    "description": "As your components grow in complexity, it can get harder to see at a glance all the different ways in which a component\u2019s state gets updated. For example, theTaskAppcomponent below holds an array oftasksin state and uses three different event handlers to add, remove, and edit tasks:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Comparing useState and useReducer",
                    "description": "Reducers are not without downsides! Here\u2019s a few ways you can compare them:\nCode size:Generally, withuseStateyou have to write less code upfront. WithuseReducer, you have to write both a reducer functionanddispatch actions. However,useReducercan help cut down on the code if many event handlers modify state in a similar way.Readability:useStateis very easy to read when the state updates are simple. When they get more complex, they can bloat your component\u2019s code and make it difficult to scan. In this case,useReducerlets you cleanly separate thehowof update logic from thewhat happenedof event handlers.Debugging:When you have a bug withuseState, it can be difficult to tellwherethe state was set incorrectly, andwhy. WithuseReducer, you can add a console log into your reducer to see every state update, andwhyit happened (due to whichaction). If eachactionis correct, you\u2019ll know that the mistake is in the reducer logic itself. However, you have to step through more code than withuseState.Testing:A reducer is a pure function that doesn\u2019t depend on your component. This means that you can export and test it separately in isolation. While generally it\u2019s best to test components in a more realistic environment, for complex state update logic it can be useful to assert that your reducer returns a particular state for a particular initial state and action.Personal preference:Some people like reducers, others don\u2019t. That\u2019s okay. It\u2019s a matter of preference. You can always convert betweenuseStateanduseReducerback and forth: they are equivalent!\nWe recommend using a reducer if you often encounter bugs due to incorrect state updates in some component, and want to introduce more structure to its code. You don\u2019t have to use reducers for everything: feel free to mix and match! You can evenuseStateanduseReducerin the same component.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Writing reducers well",
                    "description": "Keep these two tips in mind when writing reducers:\nReducers must be pure.Similar tostate updater functions, reducers run during rendering! (Actions are queued until the next render.) This means that reducersmust be pure\u2014same inputs always result in the same output. They should not send requests, schedule timeouts, or perform any side effects (operations that impact things outside the component). They should updateobjectsandarrayswithout mutations.Each action describes a single user interaction, even if that leads to multiple changes in the data.For example, if a user presses \u201cReset\u201d on a form with five fields managed by a reducer, it makes more sense to dispatch onereset_formaction rather than five separateset_fieldactions. If you log every action in a reducer, that log should be clear enough for you to reconstruct what interactions or responses happened in what order. This helps with debugging!",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer/learn/queueing-a-series-of-state-updates",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer/learn/keeping-components-pure",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer/learn/updating-objects-in-state",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer/learn/updating-arrays-in-state"
                    ],
                    "subsections": []
                },
                {
                    "title": "Writing concise reducers with Immer",
                    "description": "Just like withupdating objectsandarraysin regular state, you can use the Immer library to make reducers more concise. Here,useImmerReducerlets you mutate the state withpushorarr[i] =assignment:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer/learn/updating-objects-in-state#write-concise-update-logic-with-immer",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer/learn/updating-arrays-in-state#write-concise-update-logic-with-immer",
                        "https://github.com/immerjs/use-immer#useimmerreducer"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "To convert fromuseStatetouseReducer:Dispatch actions from event handlers.Write a reducer function that returns the next state for a given state and action.ReplaceuseStatewithuseReducer.Reducers require you to write a bit more code, but they help with debugging and testing.Reducers must be pure.Each action describes a single user interaction.Use Immer if you want to write reducers in a mutating style.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewConsolidate state logic with a reducerStep 1: Move from setting state to dispatching actionsStep 2: Write a reducer functionStep 3: Use the reducer from your componentComparinguseStateanduseReducerWriting reducers wellWriting concise reducers with ImmerRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer#",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer#consolidate-state-logic-with-a-reducer",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer#step-1-move-from-setting-state-to-dispatching-actions",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer#step-2-write-a-reducer-function",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer#step-3-use-the-reducer-from-your-component",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer#comparing-usestate-and-usereducer",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer#writing-reducers-well",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer#writing-concise-reducers-with-immer",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer#recap",
                        "https://react.dev/learn/extracting-state-logic-into-a-reducer#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Synchronizing with Effects \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/synchronizing-with-effects",
        "sections": {
            "summary": "Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen.Effectslet you run some code after rendering so that you can synchronize your component with some system outside of React.\nWhat Effects areHow Effects are different from eventsHow to declare an Effect in your componentHow to skip re-running an Effect unnecessarilyWhy Effects run twice in development and how to fix them",
            "content": [
                {
                    "title": "What are Effects and how are they different from events?",
                    "description": "Before getting to Effects, you need to be familiar with two types of logic inside React components:\nRendering code(introduced inDescribing the UI) lives at the top level of your component. This is where you take the props and state, transform them, and return the JSX you want to see on the screen.Rendering code must be pure.Like a math formula, it should onlycalculatethe result, but not do anything else.Event handlers(introduced inAdding Interactivity) are nested functions inside your components thatdothings rather than just calculate them. An event handler might update an input field, submit an HTTP POST request to buy a product, or navigate the user to another screen. Event handlers contain\u201cside effects\u201d(they change the program\u2019s state) caused by a specific user action (for example, a button click or typing).\nSometimes this isn\u2019t enough. Consider aChatRoomcomponent that must connect to the chat server whenever it\u2019s visible on the screen. Connecting to a server is not a pure calculation (it\u2019s a side effect) so it can\u2019t happen during rendering. However, there is no single particular event like a click that causesChatRoomto be displayed.\nEffectslet you specify side effects that are caused by rendering itself, rather than by a particular event.Sending a message in the chat is aneventbecause it is directly caused by the user clicking a specific button. However, setting up a server connection is anEffectbecause it should happen no matter which interaction caused the component to appear. Effects run at the end of acommitafter the screen updates. This is a good time to synchronize the React components with some external system (like network or a third-party library).\nHere and later in this text, capitalized \u201cEffect\u201d refers to the React-specific definition above, i.e. a side effect caused by rendering. To refer to the broader programming concept, we\u2019ll say \u201cside effect\u201d.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/synchronizing-with-effects/learn/describing-the-ui",
                        "https://react.dev/learn/synchronizing-with-effects/learn/keeping-components-pure",
                        "https://react.dev/learn/synchronizing-with-effects/learn/adding-interactivity",
                        "https://en.wikipedia.org/wiki/Side_effect_(computer_science)",
                        "https://react.dev/learn/synchronizing-with-effects/learn/render-and-commit"
                    ],
                    "subsections": []
                },
                {
                    "title": "You might not need an Effect",
                    "description": "Don\u2019t rush to add Effects to your components.Keep in mind that Effects are typically used to \u201cstep out\u201d of your React code and synchronize with someexternalsystem. This includes browser APIs, third-party widgets, network, and so on. If your Effect only adjusts some state based on other state,you might not need an Effect.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/synchronizing-with-effects/learn/you-might-not-need-an-effect"
                    ],
                    "subsections": []
                },
                {
                    "title": "How to write an Effect",
                    "description": "To write an Effect, follow these three steps:\nDeclare an Effect.By default, your Effect will run after everycommit.Specify the Effect dependencies.Most Effects should only re-runwhen neededrather than after every render. For example, a fade-in animation should only trigger when a component appears. Connecting and disconnecting to a chat room should only happen when the component appears and disappears, or when the chat room changes. You will learn how to control this by specifyingdependencies.Add cleanup if needed.Some Effects need to specify how to stop, undo, or clean up whatever they were doing. For example, \u201cconnect\u201d needs \u201cdisconnect\u201d, \u201csubscribe\u201d needs \u201cunsubscribe\u201d, and \u201cfetch\u201d needs either \u201ccancel\u201d or \u201cignore\u201d. You will learn how to do this by returning acleanup function.\nLet\u2019s look at each of these steps in detail.\nTo declare an Effect in your component, import theuseEffectHookfrom React:\nThen, call it at the top level of your component and put some code inside your Effect:\nEvery time your component renders, React will update the screenand thenrun the code insideuseEffect. In other words,useEffect\u201cdelays\u201d a piece of code from running until that render is reflected on the screen.\nLet\u2019s see how you can use an Effect to synchronize with an external system. Consider a<VideoPlayer>React component. It would be nice to control whether it\u2019s playing or paused by passing anisPlayingprop to it:\nYour customVideoPlayercomponent renders the built-in browser<video>tag:\nHowever, the browser<video>tag does not have anisPlayingprop. The only way to control it is to manually call theplay()andpause()methods on the DOM element.You need to synchronize the value ofisPlayingprop, which tells whether the videoshouldcurrently be playing, with calls likeplay()andpause().\nWe\u2019ll need to firstget a refto the<video>DOM node.\nYou might be tempted to try to callplay()orpause()during rendering, but that isn\u2019t correct:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "import { useEffect } from 'react' ;"
                        },
                        {
                            "language": "javascript",
                            "code": "function MyComponent ( ) {\nuseEffect ( ( ) => {\n// Code here will run after *every* render\n} ) ;\nreturn < div /> ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "< VideoPlayer isPlaying { isPlaying } /> ;"
                        },
                        {
                            "language": "javascript",
                            "code": "function VideoPlayer ( { src , isPlaying } ) {\n// TODO: do something with isPlaying\nreturn < video src { src } /> ;\n}"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/synchronizing-with-effects/learn/render-and-commit",
                        "https://react.dev/learn/synchronizing-with-effects/reference/react/useEffect",
                        "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video",
                        "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play",
                        "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause",
                        "https://react.dev/learn/synchronizing-with-effects/learn/manipulating-the-dom-with-refs"
                    ],
                    "subsections": [
                        {
                            "title": "Step 1: Declare an Effect",
                            "description": "To declare an Effect in your component, import theuseEffectHookfrom React:\nThen, call it at the top level of your component and put some code inside your Effect:\nEvery time your component renders, React will update the screenand thenrun the code insideuseEffect. In other words,useEffect\u201cdelays\u201d a piece of code from running until that render is reflected on the screen.\nLet\u2019s see how you can use an Effect to synchronize with an external system. Consider a<VideoPlayer>React component. It would be nice to control whether it\u2019s playing or paused by passing anisPlayingprop to it:\nYour customVideoPlayercomponent renders the built-in browser<video>tag:\nHowever, the browser<video>tag does not have anisPlayingprop. The only way to control it is to manually call theplay()andpause()methods on the DOM element.You need to synchronize the value ofisPlayingprop, which tells whether the videoshouldcurrently be playing, with calls likeplay()andpause().\nWe\u2019ll need to firstget a refto the<video>DOM node.\nYou might be tempted to try to callplay()orpause()during rendering, but that isn\u2019t correct:",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "import { useEffect } from 'react' ;"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function MyComponent ( ) {\nuseEffect ( ( ) => {\n// Code here will run after *every* render\n} ) ;\nreturn < div /> ;\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "< VideoPlayer isPlaying { isPlaying } /> ;"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function VideoPlayer ( { src , isPlaying } ) {\n// TODO: do something with isPlaying\nreturn < video src { src } /> ;\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/synchronizing-with-effects/reference/react/useEffect",
                                "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video",
                                "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play",
                                "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause",
                                "https://react.dev/learn/synchronizing-with-effects/learn/manipulating-the-dom-with-refs"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "How to handle the Effect firing twice in development?",
                    "description": "React intentionally remounts your components in development to find bugs like in the last example.The right question isn\u2019t \u201chow to run an Effect once\u201d, but \u201chow to fix my Effect so that it works after remounting\u201d.\nUsually, the answer is to implement the cleanup function.  The cleanup function should stop or undo whatever the Effect was doing. The rule of thumb is that the user shouldn\u2019t be able to distinguish between the Effect running once (as in production) and asetup \u2192 cleanup \u2192 setupsequence (as you\u2019d see in development).\nMost of the Effects you\u2019ll write will fit into one of the common patterns below.\nA common pitfall for preventing Effects firing twice in development is to use arefto prevent the Effect from running more than once. For example, you could \u201cfix\u201d the above bug with auseRef:\nThis makes it so you only see\"\u2705 Connecting...\"once in development, but it doesn\u2019t fix the bug.\nWhen the user navigates away, the connection still isn\u2019t closed and when they navigate back, a new connection is created. As the user navigates across the app, the connections would keep piling up, the same as it would before the \u201cfix\u201d.\nTo fix the bug, it is not enough to just make the Effect run once. The effect needs to work after re-mounting, which means the connection needs to be cleaned up like in the solution above.\nSee the examples below for how to handle common patterns.\nSometimes you need to add UI widgets that aren\u2019t written in React. For example, let\u2019s say you\u2019re adding a map component to your page. It has asetZoomLevel()method, and you\u2019d like to keep the zoom level in sync with azoomLevelstate variable in your React code. Your Effect would look similar to this:\nNote that there is no cleanup needed in this case. In development, React will call the Effect twice, but this is not a problem because callingsetZoomLeveltwice with the same value does not do anything. It may be slightly slower, but this doesn\u2019t matter because it won\u2019t remount needlessly in production.\nSome APIs may not allow you to call them twice in a row. For example, theshowModalmethod of the built-in<dialog>element throws if you call it twice. Implement the cleanup function and make it close the dialog:\nIn development, your Effect will callshowModal(), then immediatelyclose(), and thenshowModal()again. This has the same user-visible behavior as callingshowModal()once, as you would see in production.\nIf your Effect subscribes to something, the cleanup function should unsubscribe:\nIn development, your Effect will calladdEventListener(), then immediatelyremoveEventListener(), and thenaddEventListener()again with the same handler. So there would be only one active subscription at a time. This has the same user-visible behavior as callingaddEventListener()once, as in production.\nIf your Effect animates something in, the cleanup function should reset the animation to the initial values:\nIn development, opacity will be set to1, then to0, and then to1again. This should have the same user-visible behavior as setting it to1directly, which is what would happen in production. If you use a third-party animation library with support for tweening, your cleanup function should reset the timeline to its initial state.\nIf your Effect fetches something, the cleanup function should eitherabort the fetchor ignore its result:\nYou can\u2019t \u201cundo\u201d a network request that already happened, but your cleanup function should ensure that the fetch that\u2019snot relevant anymoredoes not keep affecting your application. If theuserIdchanges from'Alice'to'Bob', cleanup ensures that the'Alice'response is ignored even if it arrives after'Bob'.\nIn development, you will see two fetches in the Network tab.There is nothing wrong with that. With the approach above, the first Effect will immediately get cleaned up so its copy of theignorevariable will be set totrue. So even though there is an extra request, it won\u2019t affect the state thanks to theif (!ignore)check.\nIn production, there will only be one request.If the second request in development is bothering you, the best approach is to use a solution that deduplicates requests and caches their responses between components:\nThis will not only improve the development experience, but also make your application feel faster. For example, the user pressing the Back button won\u2019t have to wait for some data to load again because it will be cached. You can either build such a cache yourself or use one of the many alternatives to manual fetching in Effects.\nWritingfetchcalls inside Effects is apopular way to fetch data, especially in fully client-side apps. This is, however, a very manual approach and it has significant downsides:\nEffects don\u2019t run on the server.This means that the initial server-rendered HTML will only include a loading state with no data. The client computer will have to download all JavaScript and render your app only to discover that now it needs to load the data. This is not very efficient.Fetching directly in Effects makes it easy to create \u201cnetwork waterfalls\u201d.You render the parent component, it fetches some data, renders the child components, and then they start fetching their data. If the network is not very fast, this is significantly slower than fetching all data in parallel.Fetching directly in Effects usually means you don\u2019t preload or cache data.For example, if the component unmounts and then mounts again, it would have to fetch the data again.It\u2019s not very ergonomic.There\u2019s quite a bit of boilerplate code involved when writingfetchcalls in a way that doesn\u2019t suffer from bugs likerace conditions.\nThis list of downsides is not specific to React. It applies to fetching data on mount with any library. Like with routing, data fetching is not trivial to do well, so we recommend the following approaches:\nIf you use aframework, use its built-in data fetching mechanism.Modern React frameworks have integrated data fetching mechanisms that are efficient and don\u2019t suffer from the above pitfalls.Otherwise, consider using or building a client-side cache.Popular open source solutions includeReact Query,useSWR, andReact Router 6.4+.You can build your own solution too, in which case you would use Effects under the hood, but add logic for deduplicating requests, caching responses, and avoiding network waterfalls (by preloading data or hoisting data requirements to routes).\nYou can continue fetching data directly in Effects if neither of these approaches suit you.\nConsider this code that sends an analytics event on the page visit:\nIn development,logVisitwill be called twice for every URL, so you might be tempted to try to fix that.We recommend keeping this code as is.Like with earlier examples, there is nouser-visiblebehavior difference between running it once and running it twice. From a practical point of view,logVisitshould not do anything in development because you don\u2019t want the logs from the development machines to skew the production metrics. Your component remounts every time you save its file, so it logs extra visits in development anyway.\nIn production, there will be no duplicate visit logs.\nTo debug the analytics events you\u2019re sending, you can deploy your app to a staging environment (which runs in production mode) or temporarily opt out ofStrict Modeand its development-only remounting checks. You may also send analytics from the route change event handlers instead of Effects. For more precise analytics,intersection observerscan help track which components are in the viewport and how long they remain visible.\nSome logic should only run once when the application starts. You can put it outside your components:\nThis guarantees that such logic only runs once after the browser loads the page.\nSometimes, even if you write a cleanup function, there\u2019s no way to prevent user-visible consequences of running the Effect twice. For example, maybe your Effect sends a POST request like buying a product:\nYou wouldn\u2019t want to buy the product twice. However, this is also why you shouldn\u2019t put this logic in an Effect. What if the user goes to another page and then presses Back? Your Effect would run again. You don\u2019t want to buy the product when the uservisitsa page; you want to buy it when the userclicksthe Buy button.\nBuying is not caused by rendering; it\u2019s caused by a specific interaction. It should run only when the user presses the button.Delete the Effect and move your/api/buyrequest into the Buy button event handler:\nThis illustrates that if remounting breaks the logic of your application, this usually uncovers existing bugs.From a user\u2019s perspective, visiting a page shouldn\u2019t be different from visiting it, clicking a link, then pressing Back to view the page again. React verifies that your components abide by this principle by remounting them once in development.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const connectionRef useRef ( null ) ;\nuseEffect ( ( ) => {\n// \ud83d\udea9 This wont fix the bug!!!\nif ( connectionRef current ) {\nconnectionRef current createConnection ( ) ;\nconnectionRef current connect ( ) ;\n}\n} , [ ] ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "useEffect ( ( ) => {\nconst map mapRef current ;\nmap setZoomLevel ( zoomLevel ) ;\n} , [ zoomLevel ] ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "useEffect ( ( ) => {\nconst dialog dialogRef current ;\ndialog showModal ( ) ;\nreturn ( ) => dialog close ( ) ;\n} , [ ] ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "useEffect ( ( ) => {\nfunction handleScroll ( e ) {\nconsole log ( window scrollX , window scrollY ) ;\n}\nwindow addEventListener ( 'scroll' , handleScroll ) ;\nreturn ( ) => window removeEventListener ( 'scroll' , handleScroll ) ;\n} , [ ] ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "useEffect ( ( ) => {\nconst node ref current ;\nnode style opacity 1 ; // Trigger the animation\nreturn ( ) => {\nnode style opacity 0 ; // Reset to the initial value\n} ;\n} , [ ] ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "useEffect ( ( ) => {\nlet ignore false ;\n\nasync function startFetching ( ) {\nconst json await fetchTodos ( userId ) ;\nif ( ignore ) {\nsetTodos ( json ) ;\n}\n}\n\nstartFetching ( ) ;\n\nreturn ( ) => {\nignore true ;\n} ;\n} , [ userId ] ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "function TodoList ( ) {\nconst todos useSomeDataLibrary ( `/api/user/ ${ userId } /todos` ) ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "useEffect ( ( ) => {\nlogVisit ( url ) ; // Sends a POST request\n} , [ url ] ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "if ( typeof window 'undefined' ) { // Check if we're running in the browser.\ncheckAuthToken ( ) ;\nloadDataFromLocalStorage ( ) ;\n}\n\nfunction App ( ) {\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "useEffect ( ( ) => {\n// \ud83d\udd34 Wrong: This Effect fires twice in development, exposing a problem in the code.\nfetch ( '/api/buy' , { method : 'POST' } ) ;\n} , [ ] ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "function handleClick ( ) {\n// \u2705 Buying is an event because it is caused by a particular interaction.\nfetch ( '/api/buy' , { method : 'POST' } ) ;\n}"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/synchronizing-with-effects#dont-use-refs-to-prevent-effects-from-firing",
                        "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal",
                        "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement",
                        "https://developer.mozilla.org/en-US/docs/Web/API/AbortController",
                        "https://react.dev/learn/synchronizing-with-effects#what-are-good-alternatives-to-data-fetching-in-effects",
                        "https://www.robinwieruch.de/react-hooks-fetch-data/",
                        "https://maxrozen.com/race-conditions-fetching-data-react-with-useeffect",
                        "https://react.dev/learn/synchronizing-with-effects/learn/start-a-new-react-project#production-grade-react-frameworks",
                        "https://tanstack.com/query/latest",
                        "https://swr.vercel.app/",
                        "https://beta.reactrouter.com/en/main/start/overview",
                        "https://react.dev/learn/synchronizing-with-effects/reference/react/StrictMode",
                        "https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"
                    ],
                    "subsections": [
                        {
                            "title": "Controlling non-React widgets",
                            "description": "Sometimes you need to add UI widgets that aren\u2019t written in React. For example, let\u2019s say you\u2019re adding a map component to your page. It has asetZoomLevel()method, and you\u2019d like to keep the zoom level in sync with azoomLevelstate variable in your React code. Your Effect would look similar to this:\nNote that there is no cleanup needed in this case. In development, React will call the Effect twice, but this is not a problem because callingsetZoomLeveltwice with the same value does not do anything. It may be slightly slower, but this doesn\u2019t matter because it won\u2019t remount needlessly in production.\nSome APIs may not allow you to call them twice in a row. For example, theshowModalmethod of the built-in<dialog>element throws if you call it twice. Implement the cleanup function and make it close the dialog:\nIn development, your Effect will callshowModal(), then immediatelyclose(), and thenshowModal()again. This has the same user-visible behavior as callingshowModal()once, as you would see in production.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "useEffect ( ( ) => {\nconst map mapRef current ;\nmap setZoomLevel ( zoomLevel ) ;\n} , [ zoomLevel ] ) ;"
                                },
                                {
                                    "language": "javascript",
                                    "code": "useEffect ( ( ) => {\nconst dialog dialogRef current ;\ndialog showModal ( ) ;\nreturn ( ) => dialog close ( ) ;\n} , [ ] ) ;"
                                }
                            ],
                            "urls": [
                                "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal",
                                "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Subscribing to events",
                            "description": "If your Effect subscribes to something, the cleanup function should unsubscribe:\nIn development, your Effect will calladdEventListener(), then immediatelyremoveEventListener(), and thenaddEventListener()again with the same handler. So there would be only one active subscription at a time. This has the same user-visible behavior as callingaddEventListener()once, as in production.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "useEffect ( ( ) => {\nfunction handleScroll ( e ) {\nconsole log ( window scrollX , window scrollY ) ;\n}\nwindow addEventListener ( 'scroll' , handleScroll ) ;\nreturn ( ) => window removeEventListener ( 'scroll' , handleScroll ) ;\n} , [ ] ) ;"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Triggering animations",
                            "description": "If your Effect animates something in, the cleanup function should reset the animation to the initial values:\nIn development, opacity will be set to1, then to0, and then to1again. This should have the same user-visible behavior as setting it to1directly, which is what would happen in production. If you use a third-party animation library with support for tweening, your cleanup function should reset the timeline to its initial state.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "useEffect ( ( ) => {\nconst node ref current ;\nnode style opacity 1 ; // Trigger the animation\nreturn ( ) => {\nnode style opacity 0 ; // Reset to the initial value\n} ;\n} , [ ] ) ;"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Fetching data",
                            "description": "If your Effect fetches something, the cleanup function should eitherabort the fetchor ignore its result:\nYou can\u2019t \u201cundo\u201d a network request that already happened, but your cleanup function should ensure that the fetch that\u2019snot relevant anymoredoes not keep affecting your application. If theuserIdchanges from'Alice'to'Bob', cleanup ensures that the'Alice'response is ignored even if it arrives after'Bob'.\nIn development, you will see two fetches in the Network tab.There is nothing wrong with that. With the approach above, the first Effect will immediately get cleaned up so its copy of theignorevariable will be set totrue. So even though there is an extra request, it won\u2019t affect the state thanks to theif (!ignore)check.\nIn production, there will only be one request.If the second request in development is bothering you, the best approach is to use a solution that deduplicates requests and caches their responses between components:\nThis will not only improve the development experience, but also make your application feel faster. For example, the user pressing the Back button won\u2019t have to wait for some data to load again because it will be cached. You can either build such a cache yourself or use one of the many alternatives to manual fetching in Effects.\nWritingfetchcalls inside Effects is apopular way to fetch data, especially in fully client-side apps. This is, however, a very manual approach and it has significant downsides:\nEffects don\u2019t run on the server.This means that the initial server-rendered HTML will only include a loading state with no data. The client computer will have to download all JavaScript and render your app only to discover that now it needs to load the data. This is not very efficient.Fetching directly in Effects makes it easy to create \u201cnetwork waterfalls\u201d.You render the parent component, it fetches some data, renders the child components, and then they start fetching their data. If the network is not very fast, this is significantly slower than fetching all data in parallel.Fetching directly in Effects usually means you don\u2019t preload or cache data.For example, if the component unmounts and then mounts again, it would have to fetch the data again.It\u2019s not very ergonomic.There\u2019s quite a bit of boilerplate code involved when writingfetchcalls in a way that doesn\u2019t suffer from bugs likerace conditions.\nThis list of downsides is not specific to React. It applies to fetching data on mount with any library. Like with routing, data fetching is not trivial to do well, so we recommend the following approaches:\nIf you use aframework, use its built-in data fetching mechanism.Modern React frameworks have integrated data fetching mechanisms that are efficient and don\u2019t suffer from the above pitfalls.Otherwise, consider using or building a client-side cache.Popular open source solutions includeReact Query,useSWR, andReact Router 6.4+.You can build your own solution too, in which case you would use Effects under the hood, but add logic for deduplicating requests, caching responses, and avoiding network waterfalls (by preloading data or hoisting data requirements to routes).\nYou can continue fetching data directly in Effects if neither of these approaches suit you.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "useEffect ( ( ) => {\nlet ignore false ;\n\nasync function startFetching ( ) {\nconst json await fetchTodos ( userId ) ;\nif ( ignore ) {\nsetTodos ( json ) ;\n}\n}\n\nstartFetching ( ) ;\n\nreturn ( ) => {\nignore true ;\n} ;\n} , [ userId ] ) ;"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function TodoList ( ) {\nconst todos useSomeDataLibrary ( `/api/user/ ${ userId } /todos` ) ;\n// ..."
                                }
                            ],
                            "urls": [
                                "https://developer.mozilla.org/en-US/docs/Web/API/AbortController",
                                "https://react.dev/learn/synchronizing-with-effects#what-are-good-alternatives-to-data-fetching-in-effects",
                                "https://www.robinwieruch.de/react-hooks-fetch-data/",
                                "https://maxrozen.com/race-conditions-fetching-data-react-with-useeffect",
                                "https://react.dev/learn/synchronizing-with-effects/learn/start-a-new-react-project#production-grade-react-frameworks",
                                "https://tanstack.com/query/latest",
                                "https://swr.vercel.app/",
                                "https://beta.reactrouter.com/en/main/start/overview"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Sending analytics",
                            "description": "Consider this code that sends an analytics event on the page visit:\nIn development,logVisitwill be called twice for every URL, so you might be tempted to try to fix that.We recommend keeping this code as is.Like with earlier examples, there is nouser-visiblebehavior difference between running it once and running it twice. From a practical point of view,logVisitshould not do anything in development because you don\u2019t want the logs from the development machines to skew the production metrics. Your component remounts every time you save its file, so it logs extra visits in development anyway.\nIn production, there will be no duplicate visit logs.\nTo debug the analytics events you\u2019re sending, you can deploy your app to a staging environment (which runs in production mode) or temporarily opt out ofStrict Modeand its development-only remounting checks. You may also send analytics from the route change event handlers instead of Effects. For more precise analytics,intersection observerscan help track which components are in the viewport and how long they remain visible.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "useEffect ( ( ) => {\nlogVisit ( url ) ; // Sends a POST request\n} , [ url ] ) ;"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/synchronizing-with-effects/reference/react/StrictMode",
                                "https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Not an Effect: Initializing the application",
                            "description": "Some logic should only run once when the application starts. You can put it outside your components:\nThis guarantees that such logic only runs once after the browser loads the page.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "if ( typeof window 'undefined' ) { // Check if we're running in the browser.\ncheckAuthToken ( ) ;\nloadDataFromLocalStorage ( ) ;\n}\n\nfunction App ( ) {\n// ...\n}"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Not an Effect: Buying a product",
                            "description": "Sometimes, even if you write a cleanup function, there\u2019s no way to prevent user-visible consequences of running the Effect twice. For example, maybe your Effect sends a POST request like buying a product:\nYou wouldn\u2019t want to buy the product twice. However, this is also why you shouldn\u2019t put this logic in an Effect. What if the user goes to another page and then presses Back? Your Effect would run again. You don\u2019t want to buy the product when the uservisitsa page; you want to buy it when the userclicksthe Buy button.\nBuying is not caused by rendering; it\u2019s caused by a specific interaction. It should run only when the user presses the button.Delete the Effect and move your/api/buyrequest into the Buy button event handler:\nThis illustrates that if remounting breaks the logic of your application, this usually uncovers existing bugs.From a user\u2019s perspective, visiting a page shouldn\u2019t be different from visiting it, clicking a link, then pressing Back to view the page again. React verifies that your components abide by this principle by remounting them once in development.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "useEffect ( ( ) => {\n// \ud83d\udd34 Wrong: This Effect fires twice in development, exposing a problem in the code.\nfetch ( '/api/buy' , { method : 'POST' } ) ;\n} , [ ] ) ;"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function handleClick ( ) {\n// \u2705 Buying is an event because it is caused by a particular interaction.\nfetch ( '/api/buy' , { method : 'POST' } ) ;\n}"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Putting it all together",
                    "description": "This playground can help you \u201cget a feel\u201d for how Effects work in practice.\nThis example usessetTimeoutto schedule a console log with the input text to appear three seconds after the Effect runs. The cleanup function cancels the pending timeout. Start by pressing \u201cMount the component\u201d:",
                    "code_sample": [],
                    "urls": [
                        "https://developer.mozilla.org/en-US/docs/Web/API/setTimeout"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Unlike events, Effects are caused by rendering itself rather than a particular interaction.Effects let you synchronize a component with some external system (third-party API, network, etc).By default, Effects run after every render (including the initial one).React will skip the Effect if all of its dependencies have the same values as during the last render.You can\u2019t \u201cchoose\u201d your dependencies. They are determined by the code inside the Effect.Empty dependency array ([]) corresponds to the component \u201cmounting\u201d, i.e. being added to the screen.In Strict Mode, React mounts components twice (in development only!) to stress-test your Effects.If your Effect breaks because of remounting, you need to implement a cleanup function.React will call your cleanup function before the Effect runs next time, and during the unmount.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewWhat are Effects and how are they different from events?You might not need an EffectHow to write an EffectStep 1: Declare an EffectStep 2: Specify the Effect dependenciesStep 3: Add cleanup if neededHow to handle the Effect firing twice in development?Controlling non-React widgetsSubscribing to eventsTriggering animationsFetching dataSending analyticsNot an Effect: Initializing the applicationNot an Effect: Buying a productPutting it all togetherRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/synchronizing-with-effects#",
                        "https://react.dev/learn/synchronizing-with-effects#what-are-effects-and-how-are-they-different-from-events",
                        "https://react.dev/learn/synchronizing-with-effects#you-might-not-need-an-effect",
                        "https://react.dev/learn/synchronizing-with-effects#how-to-write-an-effect",
                        "https://react.dev/learn/synchronizing-with-effects#step-1-declare-an-effect",
                        "https://react.dev/learn/synchronizing-with-effects#step-2-specify-the-effect-dependencies",
                        "https://react.dev/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed",
                        "https://react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development",
                        "https://react.dev/learn/synchronizing-with-effects#controlling-non-react-widgets",
                        "https://react.dev/learn/synchronizing-with-effects#subscribing-to-events",
                        "https://react.dev/learn/synchronizing-with-effects#triggering-animations",
                        "https://react.dev/learn/synchronizing-with-effects#fetching-data",
                        "https://react.dev/learn/synchronizing-with-effects#sending-analytics",
                        "https://react.dev/learn/synchronizing-with-effects#not-an-effect-initializing-the-application",
                        "https://react.dev/learn/synchronizing-with-effects#not-an-effect-buying-a-product",
                        "https://react.dev/learn/synchronizing-with-effects#putting-it-all-together",
                        "https://react.dev/learn/synchronizing-with-effects#recap",
                        "https://react.dev/learn/synchronizing-with-effects#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "State: A Component's Memory \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/state-a-components-memory",
        "sections": {
            "summary": "Components often need to change what\u2019s on the screen as a result of an interaction. Typing into the form should update the input field, clicking \u201cnext\u201d on an image carousel should change which image is displayed, clicking \u201cbuy\u201d should put a product in the shopping cart. Components need to \u201cremember\u201d things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is calledstate.\nHow to add a state variable with theuseStateHookWhat pair of values theuseStateHook returnsHow to add more than one state variableWhy state is called local",
            "content": [
                {
                    "title": "When a regular variable isn\u2019t enough",
                    "description": "Here\u2019s a component that renders a sculpture image. Clicking the \u201cNext\u201d button should show the next sculpture by changing theindexto1, then2, and so on. However, thiswon\u2019t work(you can try it!):",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Adding a state variable",
                    "description": "To add a state variable, importuseStatefrom React at the top of the file:\nThen, replace this line:\nwith\nindexis a state variable andsetIndexis the setter function.\nThe[and]syntax here is calledarray destructuringand it lets you read values from an array. The array returned byuseStatealways has exactly two items.\nThis is how they work together inhandleClick:\nNow clicking the \u201cNext\u201d button switches the current sculpture:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "import { useState } from 'react' ;"
                        },
                        {
                            "language": "javascript",
                            "code": "let index 0 ;"
                        },
                        {
                            "language": "javascript",
                            "code": "const [ index , setIndex ] useState ( 0 ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "function handleClick ( ) {\nsetIndex ( index 1 ) ;\n}"
                        }
                    ],
                    "urls": [
                        "https://javascript.info/destructuring-assignment"
                    ],
                    "subsections": []
                },
                {
                    "title": "Giving a component multiple state variables",
                    "description": "You can have as many state variables of as many types as you like in one component. This component has two state variables, a numberindexand a booleanshowMorethat\u2019s toggled when you click \u201cShow details\u201d:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "State is isolated and private",
                    "description": "State is local to a component instance on the screen. In other words,if you render the same component twice, each copy will have completely isolated state!Changing one of them will not affect the other.\nIn this example, theGallerycomponent from earlier is rendered twice with no changes to its logic. Try clicking the buttons inside each of the galleries. Notice that their state is independent:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Use a state variable when a component needs to \u201cremember\u201d some information between renders.State variables are declared by calling theuseStateHook.Hooks are special functions that start withuse. They let you \u201chook into\u201d React features like state.Hooks might remind you of imports: they need to be called unconditionally. Calling Hooks, includinguseState, is only valid at the top level of a component or another Hook.TheuseStateHook returns a pair of values: the current state and the function to update it.You can have more than one state variable. Internally, React matches them up by their order.State is private to the component. If you render it in two places, each copy gets its own state.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewWhen a regular variable isn\u2019t enoughAdding a state variableMeet your first HookAnatomy ofuseStateGiving a component multiple state variablesState is isolated and privateRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/state-a-components-memory#",
                        "https://react.dev/learn/state-a-components-memory#when-a-regular-variable-isnt-enough",
                        "https://react.dev/learn/state-a-components-memory#adding-a-state-variable",
                        "https://react.dev/learn/state-a-components-memory#meet-your-first-hook",
                        "https://react.dev/learn/state-a-components-memory#anatomy-of-usestate",
                        "https://react.dev/learn/state-a-components-memory#giving-a-component-multiple-state-variables",
                        "https://react.dev/learn/state-a-components-memory#state-is-isolated-and-private",
                        "https://react.dev/learn/state-a-components-memory#recap",
                        "https://react.dev/learn/state-a-components-memory#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Preserving and Resetting State \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/preserving-and-resetting-state",
        "sections": {
            "summary": "State is isolated between components. React keeps track of which state belongs to which component based on their place in the UI tree. You can control when to preserve state and when to reset it between re-renders.\nWhen React chooses to preserve or reset the stateHow to force React to reset component\u2019s stateHow keys and types affect whether the state is preserved",
            "content": [
                {
                    "title": "State is tied to a position in the render tree",
                    "description": "React buildsrender treesfor the component structure in your UI.\nWhen you give a component state, you might think the state \u201clives\u201d inside the component. But the state is actually held inside React. React associates each piece of state it\u2019s holding with the correct component by where that component sits in the render tree.\nHere, there is only one<Counter />JSX tag, but it\u2019s rendered at two different positions:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/preserving-and-resetting-state/learn/understanding-your-ui-as-a-tree#the-render-tree"
                    ],
                    "subsections": []
                },
                {
                    "title": "Same component at the same position preserves state",
                    "description": "In this example, there are two different<Counter />tags:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Different components at the same position reset state",
                    "description": "In this example, ticking the checkbox will replace<Counter>with a<p>:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Resetting state at the same position",
                    "description": "By default, React preserves state of a component while it stays at the same position. Usually, this is exactly what you want, so it makes sense as the default behavior. But sometimes, you may want to reset a component\u2019s state. Consider this app that lets two players keep track of their scores during each turn:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "React keeps state for as long as the same component is rendered at the same position.State is not kept in JSX tags. It\u2019s associated with the tree position in which you put that JSX.You can force a subtree to reset its state by giving it a different key.Don\u2019t nest component definitions, or you\u2019ll reset state by accident.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewState is tied to a position in the render treeSame component at the same position preserves stateDifferent components at the same position reset stateResetting state at the same positionOption 1: Rendering a component in different positionsOption 2: Resetting state with a keyResetting a form with a keyRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/preserving-and-resetting-state#",
                        "https://react.dev/learn/preserving-and-resetting-state#state-is-tied-to-a-position-in-the-tree",
                        "https://react.dev/learn/preserving-and-resetting-state#same-component-at-the-same-position-preserves-state",
                        "https://react.dev/learn/preserving-and-resetting-state#different-components-at-the-same-position-reset-state",
                        "https://react.dev/learn/preserving-and-resetting-state#resetting-state-at-the-same-position",
                        "https://react.dev/learn/preserving-and-resetting-state#option-1-rendering-a-component-in-different-positions",
                        "https://react.dev/learn/preserving-and-resetting-state#option-2-resetting-state-with-a-key",
                        "https://react.dev/learn/preserving-and-resetting-state#resetting-a-form-with-a-key",
                        "https://react.dev/learn/preserving-and-resetting-state#recap",
                        "https://react.dev/learn/preserving-and-resetting-state#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Importing and Exporting Components \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/importing-and-exporting-components",
        "sections": {
            "summary": "The magic of components lies in their reusability: you can create components that are composed of other components. But as you nest more and more components, it often makes sense to start splitting them into different files. This lets you keep your files easy to scan and reuse components in more places.\nWhat a root component file isHow to import and export a componentWhen to use default and named imports and exportsHow to import and export multiple components from one fileHow to split components into multiple files",
            "content": [
                {
                    "title": "The root component file",
                    "description": "InYour First Component, you made aProfilecomponent and aGallerycomponent that renders it:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/importing-and-exporting-components/learn/your-first-component"
                    ],
                    "subsections": []
                },
                {
                    "title": "Exporting and importing a component",
                    "description": "What if you want to change the landing screen in the future and put a list of science books there? Or place all the profiles somewhere else? It makes sense to moveGalleryandProfileout of the root component file. This will make them more modular and reusable in other files. You can move a component in three steps:\nMakea new JS file to put the components in.Exportyour function component from that file (using eitherdefaultornamedexports).Importit in the file where you\u2019ll use the component (using the corresponding technique for importingdefaultornamedexports).\nHere bothProfileandGalleryhave been moved out ofApp.jsinto a new file calledGallery.js. Now you can changeApp.jsto importGalleryfromGallery.js:",
                    "code_sample": [],
                    "urls": [
                        "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#using_the_default_export",
                        "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#using_named_exports",
                        "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#importing_defaults",
                        "https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#import_a_single_export_from_a_module"
                    ],
                    "subsections": []
                },
                {
                    "title": "Exporting and importing multiple components from the same file",
                    "description": "What if you want to show just oneProfileinstead of a gallery? You can export theProfilecomponent, too. ButGallery.jsalready has adefaultexport, and you can\u2019t havetwodefault exports. You could create a new file with a default export, or you could add anamedexport forProfile.A file can only have one default export, but it can have numerous named exports!\nTo reduce the potential confusion between default and named exports, some teams choose to only stick to one style (default or named), or avoid mixing them in a single file. Do what works best for you!\nFirst,exportProfilefromGallery.jsusing a named export (nodefaultkeyword):\nThen,importProfilefromGallery.jstoApp.jsusing a named import (with the curly braces):\nFinally,render<Profile />from theAppcomponent:\nNowGallery.jscontains two exports: a defaultGalleryexport, and a namedProfileexport.App.jsimports both of them. Try editing<Profile />to<Gallery />and back in this example:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "export function Profile ( ) {\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "import { Profile } from './Gallery.js' ;"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function App ( ) {\nreturn < Profile /> ;\n}"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "On this page you learned:\nWhat a root component file isHow to import and export a componentWhen and how to use default and named imports and exportsHow to export multiple components from the same file",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewThe root component fileExporting and importing a componentExporting and importing multiple components from the same fileRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/importing-and-exporting-components#",
                        "https://react.dev/learn/importing-and-exporting-components#the-root-component-file",
                        "https://react.dev/learn/importing-and-exporting-components#exporting-and-importing-a-component",
                        "https://react.dev/learn/importing-and-exporting-components#exporting-and-importing-multiple-components-from-the-same-file",
                        "https://react.dev/learn/importing-and-exporting-components#recap",
                        "https://react.dev/learn/importing-and-exporting-components#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Sharing State Between Components \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/sharing-state-between-components",
        "sections": {
            "summary": "Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known aslifting state up,and it\u2019s one of the most common things you will do writing React code.\nHow to share state between components by lifting it upWhat are controlled and uncontrolled components",
            "content": [
                {
                    "title": "Lifting state up by example",
                    "description": "In this example, a parentAccordioncomponent renders two separatePanels:\nAccordionPanelPanel\nEachPanelcomponent has a booleanisActivestate that determines whether its content is visible.\nPress the Show button for both panels:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "A single source of truth for each state",
                    "description": "In a React application, many components will have their own state. Some state may \u201clive\u201d close to the leaf components (components at the bottom of the tree) like inputs. Other state may \u201clive\u201d closer to the top of the app. For example, even client-side routing libraries are usually implemented by storing the current route in the React state, and passing it down by props!\nFor each unique piece of state, you will choose the component that \u201cowns\u201d it.This principle is also known as having a\u201csingle source of truth\u201d.It doesn\u2019t mean that all state lives in one place\u2014but that foreachpiece of state, there is aspecificcomponent that holds that piece of information. Instead of duplicating shared state between components,lift it upto their common shared parent, andpass it downto the children that need it.\nYour app will change as you work on it. It is common that you will move state down or back up while you\u2019re still figuring out where each piece of the state \u201clives\u201d. This is all part of the process!\nTo see what this feels like in practice with a few more components, readThinking in React.\nWhen you want to coordinate two components, move their state to their common parent.Then pass the information down through props from their common parent.Finally, pass the event handlers down so that the children can change the parent\u2019s state.It\u2019s useful to consider components as \u201ccontrolled\u201d (driven by props) or \u201cuncontrolled\u201d (driven by state).",
                    "code_sample": [],
                    "urls": [
                        "https://en.wikipedia.org/wiki/Single_source_of_truth",
                        "https://react.dev/learn/sharing-state-between-components/learn/thinking-in-react",
                        "https://react.dev/learn/sharing-state-between-components#recap"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "When you want to coordinate two components, move their state to their common parent.Then pass the information down through props from their common parent.Finally, pass the event handlers down so that the children can change the parent\u2019s state.It\u2019s useful to consider components as \u201ccontrolled\u201d (driven by props) or \u201cuncontrolled\u201d (driven by state).",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewLifting state up by exampleStep 1: Remove state from the child componentsStep 2: Pass hardcoded data from the common parentStep 3: Add state to the common parentA single source of truth for each stateRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/sharing-state-between-components#",
                        "https://react.dev/learn/sharing-state-between-components#lifting-state-up-by-example",
                        "https://react.dev/learn/sharing-state-between-components#step-1-remove-state-from-the-child-components",
                        "https://react.dev/learn/sharing-state-between-components#step-2-pass-hardcoded-data-from-the-common-parent",
                        "https://react.dev/learn/sharing-state-between-components#step-3-add-state-to-the-common-parent",
                        "https://react.dev/learn/sharing-state-between-components#a-single-source-of-truth-for-each-state",
                        "https://react.dev/learn/sharing-state-between-components#recap",
                        "https://react.dev/learn/sharing-state-between-components#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Choosing the State Structure \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/choosing-the-state-structure",
        "sections": {
            "summary": "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.\nWhen to use a single vs multiple state variablesWhat to avoid when organizing stateHow to fix common issues with the state structure",
            "content": [
                {
                    "title": "Principles for structuring state",
                    "description": "When you write a component that holds some state, you\u2019ll have to make choices about how many state variables to use and what the shape of their data should be. While it\u2019s possible to write correct programs even with a suboptimal state structure, there are a few principles that can guide you to make better choices:\nGroup related state.If you always update two or more state variables at the same time, consider merging them into a single state variable.Avoid contradictions in state.When the state is structured in a way that several pieces of state may contradict and \u201cdisagree\u201d with each other, you leave room for mistakes. Try to avoid this.Avoid redundant state.If you can calculate some information from the component\u2019s props or its existing state variables during rendering, you should not put that information into that component\u2019s state.Avoid duplication in state.When the same data is duplicated between multiple state variables, or within nested objects, it is difficult to keep them in sync. Reduce duplication when you can.Avoid deeply nested state.Deeply hierarchical state is not very convenient to update. When possible, prefer to structure state in a flat way.\nThe goal behind these principles is tomake state easy to update without introducing mistakes. Removing redundant and duplicate data from state helps ensure that all its pieces stay in sync. This is similar to how a database engineer might want to\u201cnormalize\u201d the database structureto reduce the chance of bugs. To paraphrase Albert Einstein,\u201cMake your state as simple as it can be\u2014but no simpler.\u201d\nNow let\u2019s see how these principles apply in action.",
                    "code_sample": [],
                    "urls": [
                        "https://docs.microsoft.com/en-us/office/troubleshoot/access/database-normalization-description"
                    ],
                    "subsections": []
                },
                {
                    "title": "Group related state",
                    "description": "You might sometimes be unsure between using a single or multiple state variables.\nShould you do this?\nOr this?\nTechnically, you can use either of these approaches. Butif some two state variables always change together, it might be a good idea to unify them into a single state variable.Then you won\u2019t forget to always keep them in sync, like in this example where moving the cursor updates both coordinates of the red dot:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const [ x , setX ] useState ( 0 ) ;\nconst [ y , setY ] useState ( 0 ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "const [ position , setPosition ] useState ( { x : 0 , y : 0 } ) ;"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Avoid contradictions in state",
                    "description": "Here is a hotel feedback form withisSendingandisSentstate variables:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Avoid redundant state",
                    "description": "If you can calculate some information from the component\u2019s props or its existing state variables during rendering, youshould notput that information into that component\u2019s state.\nFor example, take this form. It works, but can you find any redundant state in it?",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Avoid duplication in state",
                    "description": "This menu list component lets you choose a single travel snack out of several:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Avoid deeply nested state",
                    "description": "Imagine a travel plan consisting of planets, continents, and countries. You might be tempted to structure its state using nested objects and arrays, like in this example:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "If two state variables always update together, consider merging them into one.Choose your state variables carefully to avoid creating \u201cimpossible\u201d states.Structure your state in a way that reduces the chances that you\u2019ll make a mistake updating it.Avoid redundant and duplicate state so that you don\u2019t need to keep it in sync.Don\u2019t put propsintostate unless you specifically want to prevent updates.For UI patterns like selection, keep ID or index in state instead of the object itself.If updating deeply nested state is complicated, try flattening it.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewPrinciples for structuring stateGroup related stateAvoid contradictions in stateAvoid redundant stateAvoid duplication in stateAvoid deeply nested stateRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/choosing-the-state-structure#",
                        "https://react.dev/learn/choosing-the-state-structure#principles-for-structuring-state",
                        "https://react.dev/learn/choosing-the-state-structure#group-related-state",
                        "https://react.dev/learn/choosing-the-state-structure#avoid-contradictions-in-state",
                        "https://react.dev/learn/choosing-the-state-structure#avoid-redundant-state",
                        "https://react.dev/learn/choosing-the-state-structure#avoid-duplication-in-state",
                        "https://react.dev/learn/choosing-the-state-structure#avoid-deeply-nested-state",
                        "https://react.dev/learn/choosing-the-state-structure#recap",
                        "https://react.dev/learn/choosing-the-state-structure#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Passing Data Deeply with Context \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/passing-data-deeply-with-context",
        "sections": {
            "summary": "Usually, you will pass information from a parent component to a child component via props. But passing props can become verbose and inconvenient if you have to pass them through many components in the middle, or if many components in your app need the same information.Contextlets the parent component make some information available to any component in the tree below it\u2014no matter how deep\u2014without passing it explicitly through props.\nWhat \u201cprop drilling\u201d isHow to replace repetitive prop passing with contextCommon use cases for contextCommon alternatives to context",
            "content": [
                {
                    "title": "The problem with passing props",
                    "description": "Passing propsis a great way to explicitly pipe data through your UI tree to the components that use it.\nBut passing props can become verbose and inconvenient when you need to pass some prop deeply through the tree, or if many components need the same prop. The nearest common ancestor could be far removed from the components that need data, andlifting state upthat high can lead to a situation called \u201cprop drilling\u201d.\nLifting state up\nProp drilling\nWouldn\u2019t it be great if there were a way to \u201cteleport\u201d data to the components in the tree that need it without passing props? With React\u2019s context feature, there is!",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/passing-data-deeply-with-context/learn/passing-props-to-a-component",
                        "https://react.dev/learn/passing-data-deeply-with-context/learn/sharing-state-between-components"
                    ],
                    "subsections": []
                },
                {
                    "title": "Context: an alternative to passing props",
                    "description": "Context lets a parent component provide data to the entire tree below it. There are many uses for context. Here is one example. Consider thisHeadingcomponent that accepts alevelfor its size:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Using and providing context from the same component",
                    "description": "Currently, you still have to specify each section\u2019slevelmanually:\nSince context lets you read information from a component above, eachSectioncould read thelevelfrom theSectionabove, and passlevel + 1down automatically. Here is how you could do it:\nWith this change, you don\u2019t need to pass thelevelpropeitherto the<Section>or to the<Heading>:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "export default function Page ( ) {\nreturn (\n< Section level { 1 } >\n\n< Section level { 2 } >\n\n< Section level { 3 } >\n"
                        },
                        {
                            "language": "javascript",
                            "code": "import { useContext } from 'react' ;\nimport { LevelContext } from './LevelContext.js' ;\n\nexport default function Section ( { children } ) {\nconst level useContext ( LevelContext ) ;\nreturn (\n< section className \"section\" >\n< LevelContext Provider value { level 1 } >\n{ children }\n</ LevelContext Provider >\n</ section >\n) ;\n}"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Context passes through intermediate components",
                    "description": "You can insert as many components as you like between the component that provides context and the one that uses it. This includes both built-in components like<div>and components you might build yourself.\nIn this example, the samePostcomponent (with a dashed border) is rendered at two different nesting levels. Notice that the<Heading>inside of it gets its level automatically from the closest<Section>:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Before you use context",
                    "description": "Context is very tempting to use! However, this also means it\u2019s too easy to overuse it.Just because you need to pass some props several levels deep doesn\u2019t mean you should put that information into context.\nHere\u2019s a few alternatives you should consider before using context:\nStart bypassing props.If your components are not trivial, it\u2019s not unusual to pass a dozen props down through a dozen components. It may feel like a slog, but it makes it very clear which components use which data! The person maintaining your code will be glad you\u2019ve made the data flow explicit with props.Extract components andpass JSX aschildrento them.If you pass some data through many layers of intermediate components that don\u2019t use that data (and only pass it further down), this often means that you forgot to extract some components along the way. For example, maybe you pass data props likepoststo visual components that don\u2019t use them directly, like<Layout posts={posts} />. Instead, makeLayouttakechildrenas a prop, and render<Layout><Posts posts={posts} /></Layout>. This reduces the number of layers between the component specifying the data and the one that needs it.\nIf neither of these approaches works well for you, consider context.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/passing-data-deeply-with-context/learn/passing-props-to-a-component",
                        "https://react.dev/learn/passing-data-deeply-with-context/learn/passing-props-to-a-component#passing-jsx-as-children"
                    ],
                    "subsections": []
                },
                {
                    "title": "Use cases for context",
                    "description": "Theming:If your app lets the user change its appearance (e.g. dark mode), you can put a context provider at the top of your app, and use that context in components that need to adjust their visual look.Current account:Many components might need to know the currently logged in user. Putting it in context makes it convenient to read it anywhere in the tree. Some apps also let you operate multiple accounts at the same time (e.g. to leave a comment as a different user). In those cases, it can be convenient to wrap a part of the UI into a nested provider with a different current account value.Routing:Most routing solutions use context internally to hold the current route. This is how every link \u201cknows\u201d whether it\u2019s active or not. If you build your own router, you might want to do it too.Managing state:As your app grows, you might end up with a lot of state closer to the top of your app. Many distant components below may want to change it. It is common touse a reducer together with contextto manage complex state and pass it down to distant components without too much hassle.\nContext is not limited to static values. If you pass a different value on the next render, React will update all the components reading it below! This is why context is often used in combination with state.\nIn general, if some information is needed by distant components in different parts of the tree, it\u2019s a good indication that context will help you.\nContext lets a component provide some information to the entire tree below it.To pass context:Create and export it withexport const MyContext = createContext(defaultValue).Pass it to theuseContext(MyContext)Hook to read it in any child component, no matter how deep.Wrap children into<MyContext.Provider value={...}>to provide it from a parent.Context passes through any components in the middle.Context lets you write components that \u201cadapt to their surroundings\u201d.Before you use context, try passing props or passing JSX aschildren.\nCreate and export it withexport const MyContext = createContext(defaultValue).Pass it to theuseContext(MyContext)Hook to read it in any child component, no matter how deep.Wrap children into<MyContext.Provider value={...}>to provide it from a parent.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/passing-data-deeply-with-context/learn/scaling-up-with-reducer-and-context",
                        "https://react.dev/learn/passing-data-deeply-with-context#recap"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Context lets a component provide some information to the entire tree below it.To pass context:Create and export it withexport const MyContext = createContext(defaultValue).Pass it to theuseContext(MyContext)Hook to read it in any child component, no matter how deep.Wrap children into<MyContext.Provider value={...}>to provide it from a parent.Context passes through any components in the middle.Context lets you write components that \u201cadapt to their surroundings\u201d.Before you use context, try passing props or passing JSX aschildren.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewThe problem with passing propsContext: an alternative to passing propsStep 1: Create the contextStep 2: Use the contextStep 3: Provide the contextUsing and providing context from the same componentContext passes through intermediate componentsBefore you use contextUse cases for contextRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/passing-data-deeply-with-context#",
                        "https://react.dev/learn/passing-data-deeply-with-context#the-problem-with-passing-props",
                        "https://react.dev/learn/passing-data-deeply-with-context#context-an-alternative-to-passing-props",
                        "https://react.dev/learn/passing-data-deeply-with-context#step-1-create-the-context",
                        "https://react.dev/learn/passing-data-deeply-with-context#step-2-use-the-context",
                        "https://react.dev/learn/passing-data-deeply-with-context#step-3-provide-the-context",
                        "https://react.dev/learn/passing-data-deeply-with-context#using-and-providing-context-from-the-same-component",
                        "https://react.dev/learn/passing-data-deeply-with-context#context-passes-through-intermediate-components",
                        "https://react.dev/learn/passing-data-deeply-with-context#before-you-use-context",
                        "https://react.dev/learn/passing-data-deeply-with-context#use-cases-for-context",
                        "https://react.dev/learn/passing-data-deeply-with-context#recap",
                        "https://react.dev/learn/passing-data-deeply-with-context#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Queueing a Series of State Updates \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/queueing-a-series-of-state-updates",
        "sections": {
            "summary": "Setting a state variable will queue another render. But sometimes you might want to perform multiple operations on the value before queueing the next render. To do this, it helps to understand how React batches state updates.\nWhat \u201cbatching\u201d is and how React uses it to process multiple state updatesHow to apply several updates to the same state variable in a row",
            "content": [
                {
                    "title": "React batches state updates",
                    "description": "You might expect that clicking the \u201c+3\u201d button will increment the counter three times because it callssetNumber(number + 1)three times:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Updating the same state multiple times before the next render",
                    "description": "It is an uncommon use case, but if you would like to update the same state variable multiple times before the next render, instead of passing thenext state valuelikesetNumber(number + 1), you can pass afunctionthat calculates the next state based on the previous one in the queue, likesetNumber(n => n + 1). It is a way to tell React to \u201cdo something with the state value\u201d instead of just replacing it.\nTry incrementing the counter now:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Setting state does not change the variable in the existing render, but it requests a new render.React processes state updates after event handlers have finished running. This is called batching.To update some state multiple times in one event, you can usesetNumber(n => n + 1)updater function.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewReact batches state updatesUpdating the same state multiple times before the next renderWhat happens if you update state after replacing itWhat happens if you replace state after updating itNaming conventionsRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/queueing-a-series-of-state-updates#",
                        "https://react.dev/learn/queueing-a-series-of-state-updates#react-batches-state-updates",
                        "https://react.dev/learn/queueing-a-series-of-state-updates#updating-the-same-state-multiple-times-before-the-next-render",
                        "https://react.dev/learn/queueing-a-series-of-state-updates#what-happens-if-you-update-state-after-replacing-it",
                        "https://react.dev/learn/queueing-a-series-of-state-updates#what-happens-if-you-replace-state-after-updating-it",
                        "https://react.dev/learn/queueing-a-series-of-state-updates#naming-conventions",
                        "https://react.dev/learn/queueing-a-series-of-state-updates#recap",
                        "https://react.dev/learn/queueing-a-series-of-state-updates#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Keeping Components Pure \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/keeping-components-pure",
        "sections": {
            "summary": "Some JavaScript functions arepure.Pure functions only perform a calculation and nothing more. By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. To get these benefits, though, there are a few rules you must follow.\nWhat purity is and how it helps you avoid bugsHow to keep components pure by keeping changes out of the render phaseHow to use Strict Mode to find mistakes in your components",
            "content": [
                {
                    "title": "Purity: Components as formulas",
                    "description": "In computer science (and especially the world of functional programming),a pure functionis a function with the following characteristics:\nIt minds its own business.It does not change any objects or variables that existed before it was called.Same inputs, same output.Given the same inputs, a pure function should always return the same result.\nYou might already be familiar with one example of pure functions: formulas in math.\nConsider this math formula:y= 2x.\nIfx= 2theny= 4. Always.\nIfx= 3theny= 6. Always.\nIfx= 3,ywon\u2019t sometimes be9or\u20131or2.5depending on the time of day or the state of the stock market.\nIfy= 2xandx= 3,ywillalwaysbe6.\nIf we made this into a JavaScript function, it would look like this:\nIn the above example,doubleis apure function.If you pass it3, it will return6. Always.\nReact is designed around this concept.React assumes that every component you write is a pure function.This means that React components you write must always return the same JSX given the same inputs:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function double ( number ) {\nreturn 2 number ;\n}"
                        }
                    ],
                    "urls": [
                        "https://wikipedia.org/wiki/Pure_function"
                    ],
                    "subsections": []
                },
                {
                    "title": "Side Effects: (un)intended consequences",
                    "description": "React\u2019s rendering process must always be pure. Components should onlyreturntheir JSX, and notchangeany objects or variables that existed before rendering\u2014that would make them impure!\nHere is a component that breaks this rule:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Where you can cause side effects",
                    "description": "While functional programming relies heavily on purity, at some point, somewhere,somethinghas to change. That\u2019s kind of the point of programming! These changes\u2014updating the screen, starting an animation, changing the data\u2014are calledside effects.They\u2019re things that happen\u201con the side\u201d, not during rendering.\nIn React,side effects usually belong insideevent handlers.Event handlers are functions that React runs when you perform some action\u2014for example, when you click a button. Even though event handlers are definedinsideyour component, they don\u2019t runduringrendering!So event handlers don\u2019t need to be pure.\nIf you\u2019ve exhausted all other options and can\u2019t find the right event handler for your side effect, you can still attach it to your returned JSX with auseEffectcall in your component. This tells React to execute it later, after rendering, when side effects are allowed.However, this approach should be your last resort.\nWhen possible, try to express your logic with rendering alone. You\u2019ll be surprised how far this can take you!\nWriting pure functions takes some habit and discipline. But it also unlocks marvelous opportunities:\nYour components could run in a different environment\u2014for example, on the server! Since they return the same result for the same inputs, one component can serve many user requests.You can improve performance byskipping renderingcomponents whose inputs have not changed. This is safe because pure functions always return the same results, so they are safe to cache.If some data changes in the middle of rendering a deep component tree, React can restart rendering without wasting time to finish the outdated render. Purity makes it safe to stop calculating at any time.\nEvery new React feature we\u2019re building takes advantage of purity. From data fetching to animations to performance, keeping components pure unlocks the power of the React paradigm.\nA component must be pure, meaning:It minds its own business.It should not change any objects or variables that existed before rendering.Same inputs, same output.Given the same inputs, a component should always return the same JSX.Rendering can happen at any time, so components should not depend on each others\u2019 rendering sequence.You should not mutate any of the inputs that your components use for rendering. That includes props, state, and context. To update the screen,\u201cset\u201d stateinstead of mutating preexisting objects.Strive to express your component\u2019s logic in the JSX you return. When you need to \u201cchange things\u201d, you\u2019ll usually want to do it in an event handler. As a last resort, you canuseEffect.Writing pure functions takes a bit of practice, but it unlocks the power of React\u2019s paradigm.\nIt minds its own business.It should not change any objects or variables that existed before rendering.Same inputs, same output.Given the same inputs, a component should always return the same JSX.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/keeping-components-pure/learn/responding-to-events",
                        "https://react.dev/learn/keeping-components-pure/reference/react/useEffect",
                        "https://react.dev/learn/keeping-components-pure#why-does-react-care-about-purity",
                        "https://react.dev/learn/keeping-components-pure/reference/react/memo",
                        "https://react.dev/learn/keeping-components-pure#recap",
                        "https://react.dev/learn/keeping-components-pure/learn/state-a-components-memory"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "A component must be pure, meaning:It minds its own business.It should not change any objects or variables that existed before rendering.Same inputs, same output.Given the same inputs, a component should always return the same JSX.Rendering can happen at any time, so components should not depend on each others\u2019 rendering sequence.You should not mutate any of the inputs that your components use for rendering. That includes props, state, and context. To update the screen,\u201cset\u201d stateinstead of mutating preexisting objects.Strive to express your component\u2019s logic in the JSX you return. When you need to \u201cchange things\u201d, you\u2019ll usually want to do it in an event handler. As a last resort, you canuseEffect.Writing pure functions takes a bit of practice, but it unlocks the power of React\u2019s paradigm.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/keeping-components-pure/learn/state-a-components-memory"
                    ],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewPurity: Components as formulasSide Effects: (un)intended consequencesLocal mutation: Your component\u2019s little secretWhere youcancause side effectsRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/keeping-components-pure#",
                        "https://react.dev/learn/keeping-components-pure#purity-components-as-formulas",
                        "https://react.dev/learn/keeping-components-pure#side-effects-unintended-consequences",
                        "https://react.dev/learn/keeping-components-pure#local-mutation-your-components-little-secret",
                        "https://react.dev/learn/keeping-components-pure#where-you-_can_-cause-side-effects",
                        "https://react.dev/learn/keeping-components-pure#recap",
                        "https://react.dev/learn/keeping-components-pure#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Referencing Values with Refs \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/referencing-values-with-refs",
        "sections": {
            "summary": "When you want a component to \u201cremember\u201d some information, but you don\u2019t want that information totrigger new renders, you can use aref.\nHow to add a ref to your componentHow to update a ref\u2019s valueHow refs are different from stateHow to use refs safely",
            "content": [
                {
                    "title": "Adding a ref to your component",
                    "description": "You can add a ref to your component by importing theuseRefHook from React:\nInside your component, call theuseRefHook and pass the initial value that you want to reference as the only argument. For example, here is a ref to the value0:\nuseRefreturns an object like this:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "import { useRef } from 'react' ;"
                        },
                        {
                            "language": "javascript",
                            "code": "const ref useRef ( 0 ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "{\n: 0 // The value you passed to useRef\n}"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Example: building a stopwatch",
                    "description": "You can combine refs and state in a single component. For example, let\u2019s make a stopwatch that the user can start or stop by pressing a button. In order to display how much time has passed since the user pressed \u201cStart\u201d, you will need to keep track of when the Start button was pressed and what the current time is.This information is used for rendering, so you\u2019ll keep it in state:\nWhen the user presses \u201cStart\u201d, you\u2019ll usesetIntervalin order to update the time every 10 milliseconds:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const [ startTime , setStartTime ] useState ( null ) ;\nconst [ now , setNow ] useState ( null ) ;"
                        }
                    ],
                    "urls": [
                        "https://developer.mozilla.org/docs/Web/API/setInterval"
                    ],
                    "subsections": []
                },
                {
                    "title": "Differences between refs and state",
                    "description": "Perhaps you\u2019re thinking refs seem less \u201cstrict\u201d than state\u2014you can mutate them instead of always having to use a state setting function, for instance. But in most cases, you\u2019ll want to use state. Refs are an \u201cescape hatch\u201d you won\u2019t need often. Here\u2019s how state and refs compare:\nHere is a counter button that\u2019s implemented with state:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/referencing-values-with-refs/learn/state-as-a-snapshot"
                    ],
                    "subsections": []
                },
                {
                    "title": "When to use refs",
                    "description": "Typically, you will use a ref when your component needs to \u201cstep outside\u201d React and communicate with external APIs\u2014often a browser API that won\u2019t impact the appearance of the component. Here are a few of these rare situations:\nStoringtimeout IDsStoring and manipulatingDOM elements, which we cover onthe next pageStoring other objects that aren\u2019t necessary to calculate the JSX.\nIf your component needs to store some value, but it doesn\u2019t impact the rendering logic, choose refs.",
                    "code_sample": [],
                    "urls": [
                        "https://developer.mozilla.org/docs/Web/API/setTimeout",
                        "https://developer.mozilla.org/docs/Web/API/Element",
                        "https://react.dev/learn/referencing-values-with-refs/learn/manipulating-the-dom-with-refs"
                    ],
                    "subsections": []
                },
                {
                    "title": "Best practices for refs",
                    "description": "Following these principles will make your components more predictable:\nTreat refs as an escape hatch.Refs are useful when you work with external systems or browser APIs. If much of your application logic and data flow relies on refs, you might want to rethink your approach.Don\u2019t read or writeref.currentduring rendering.If some information is needed during rendering, usestateinstead. Since React doesn\u2019t know whenref.currentchanges, even reading it while rendering makes your component\u2019s behavior difficult to predict. (The only exception to this is code likeif (!ref.current) ref.current = new Thing()which only sets the ref once during the first render.)\nLimitations of React state don\u2019t apply to refs. For example, state acts like asnapshot for every renderanddoesn\u2019t update synchronously.But when you mutate the current value of a ref, it changes immediately:\nThis is becausethe ref itself is a regular JavaScript object,and so it behaves like one.\nYou also don\u2019t need to worry aboutavoiding mutationwhen you work with a ref. As long as the object you\u2019re mutating isn\u2019t used for rendering, React doesn\u2019t care what you do with the ref or its contents.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "ref current 5 ;\nconsole log ( ref current ) ; // 5"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/referencing-values-with-refs/learn/state-a-components-memory",
                        "https://react.dev/learn/referencing-values-with-refs/learn/state-as-a-snapshot",
                        "https://react.dev/learn/referencing-values-with-refs/learn/queueing-a-series-of-state-updates",
                        "https://react.dev/learn/referencing-values-with-refs/learn/updating-objects-in-state"
                    ],
                    "subsections": []
                },
                {
                    "title": "Refs and the DOM",
                    "description": "You can point a ref to any value. However, the most common use case for a ref is to access a DOM element. For example, this is handy if you want to focus an input programmatically. When you pass a ref to arefattribute in JSX, like<div ref={myRef}>, React will put the corresponding DOM element intomyRef.current. Once the element is removed from the DOM, React will updatemyRef.currentto benull. You can read more about this inManipulating the DOM with Refs.\nRefs are an escape hatch to hold onto values that aren\u2019t used for rendering. You won\u2019t need them often.A ref is a plain JavaScript object with a single property calledcurrent, which you can read or set.You can ask React to give you a ref by calling theuseRefHook.Like state, refs let you retain information between re-renders of a component.Unlike state, setting the ref\u2019scurrentvalue does not trigger a re-render.Don\u2019t read or writeref.currentduring rendering. This makes your component hard to predict.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/referencing-values-with-refs/learn/manipulating-the-dom-with-refs",
                        "https://react.dev/learn/referencing-values-with-refs#recap"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Refs are an escape hatch to hold onto values that aren\u2019t used for rendering. You won\u2019t need them often.A ref is a plain JavaScript object with a single property calledcurrent, which you can read or set.You can ask React to give you a ref by calling theuseRefHook.Like state, refs let you retain information between re-renders of a component.Unlike state, setting the ref\u2019scurrentvalue does not trigger a re-render.Don\u2019t read or writeref.currentduring rendering. This makes your component hard to predict.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewAdding a ref to your componentExample: building a stopwatchDifferences between refs and stateWhen to use refsBest practices for refsRefs and the DOMRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/referencing-values-with-refs#",
                        "https://react.dev/learn/referencing-values-with-refs#adding-a-ref-to-your-component",
                        "https://react.dev/learn/referencing-values-with-refs#example-building-a-stopwatch",
                        "https://react.dev/learn/referencing-values-with-refs#differences-between-refs-and-state",
                        "https://react.dev/learn/referencing-values-with-refs#when-to-use-refs",
                        "https://react.dev/learn/referencing-values-with-refs#best-practices-for-refs",
                        "https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom",
                        "https://react.dev/learn/referencing-values-with-refs#recap",
                        "https://react.dev/learn/referencing-values-with-refs#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Writing Markup with JSX \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/writing-markup-with-jsx",
        "sections": {
            "summary": "JSXis a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.\nWhy React mixes markup with rendering logicHow JSX is different from HTMLHow to display information with JSX",
            "content": [
                {
                    "title": "JSX: Putting markup into JavaScript",
                    "description": "The Web has been built on HTML, CSS, and JavaScript. For many years, web developers kept content in HTML, design in CSS, and logic in JavaScript\u2014often in separate files! Content was marked up inside HTML while the page\u2019s logic lived separately in JavaScript:\nHTML\nJavaScript\nBut as the Web became more interactive, logic increasingly determined content. JavaScript was in charge of the HTML! This is whyin React, rendering logic and markup live together in the same place\u2014components.\nSidebar.jsReact component\nForm.jsReact component\nKeeping a button\u2019s rendering logic and markup together ensures that they stay in sync with each other on every edit. Conversely, details that are unrelated, such as the button\u2019s markup and a sidebar\u2019s markup, are isolated from each other, making it safer to change either of them on their own.\nEach React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information. The best way to understand this is to convert some HTML markup to JSX markup.\nJSX and React are two separate things. They\u2019re often used together, but youcanuse them independentlyof each other. JSX is a syntax extension, while React is a JavaScript library.",
                    "code_sample": [],
                    "urls": [
                        "https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#whats-a-jsx-transform"
                    ],
                    "subsections": []
                },
                {
                    "title": "Converting HTML to JSX",
                    "description": "Suppose that you have some (perfectly valid) HTML:\nAnd you want to put it into your component:\nIf you copy and paste it as is, it will not work:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "< h1 > </ h1 >\n< img\nsrc \"https://i.imgur.com/yXOvdOSs.jpg\"\nalt \"Hedy Lamarr\"\nclass \"photo\"\n>\n< ul >\n< li >\n< li >\n< li >\n</ ul >"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function TodoList ( ) {\nreturn (\n// ???\n)\n}"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "The Rules of JSX",
                    "description": "To return multiple elements from a component,wrap them with a single parent tag.\nFor example, you can use a<div>:\nIf you don\u2019t want to add an extra<div>to your markup, you can write<>and</>instead:\nThis empty tag is called aFragment.Fragments let you group things without leaving any trace in the browser HTML tree.\nJSX looks like HTML, but under the hood it is transformed into plain JavaScript objects. You can\u2019t return two objects from a function without wrapping them into an array. This explains why you also can\u2019t return two JSX tags without wrapping them into another tag or a Fragment.\nJSX requires tags to be explicitly closed: self-closing tags like<img>must become<img />, and wrapping tags like<li>orangesmust be written as<li>oranges</li>.\nThis is how Hedy Lamarr\u2019s image and list items look closed:\nJSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables. But JavaScript has limitations on variable names. For example, their names can\u2019t contain dashes or be reserved words likeclass.\nThis is why, in React, many HTML and SVG attributes are written in camelCase. For example, instead ofstroke-widthyou usestrokeWidth. Sinceclassis a reserved word, in React you writeclassNameinstead, named after thecorresponding DOM property:\nYou canfind all these attributes in the list of DOM component props.If you get one wrong, don\u2019t worry\u2014React will print a message with a possible correction to thebrowser console.\nFor historical reasons,aria-*anddata-*attributes are written as in HTML with dashes.\nConverting all these attributes in existing markup can be tedious! We recommend using aconverterto translate your existing HTML and SVG to JSX. Converters are very useful in practice, but it\u2019s still worth understanding what is going on so that you can comfortably write JSX on your own.\nHere is your final result:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "< div >\n< h1 > </ h1 >\n< img\nsrc \"https://i.imgur.com/yXOvdOSs.jpg\"\nalt \"Hedy Lamarr\"\nclass \"photo\"\n>\n< ul >\n\n</ ul >\n</ div >"
                        },
                        {
                            "language": "javascript",
                            "code": "< >\n< h1 > </ h1 >\n< img\nsrc \"https://i.imgur.com/yXOvdOSs.jpg\"\nalt \"Hedy Lamarr\"\nclass \"photo\"\n>\n< ul >\n\n</ ul >\n</ >"
                        },
                        {
                            "language": "javascript",
                            "code": "< >\n< img\nsrc \"https://i.imgur.com/yXOvdOSs.jpg\"\nalt \"Hedy Lamarr\"\nclass \"photo\"\n/>\n< ul >\n< li > </ li >\n< li > </ li >\n< li > </ li >\n</ ul >\n</ >"
                        },
                        {
                            "language": "javascript",
                            "code": "< img\nsrc \"https://i.imgur.com/yXOvdOSs.jpg\"\nalt \"Hedy Lamarr\"\nclassName \"photo\"\n/>"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/writing-markup-with-jsx/reference/react/Fragment",
                        "https://react.dev/learn/writing-markup-with-jsx#why-do-multiple-jsx-tags-need-to-be-wrapped",
                        "https://developer.mozilla.org/en-US/docs/Web/API/Element/className",
                        "https://react.dev/learn/writing-markup-with-jsx/reference/react-dom/components/common",
                        "https://developer.mozilla.org/docs/Tools/Browser_Console",
                        "https://developer.mozilla.org/docs/Web/Accessibility/ARIA",
                        "https://developer.mozilla.org/docs/Learn/HTML/Howto/Use_data_attributes",
                        "https://transform.tools/html-to-jsx"
                    ],
                    "subsections": [
                        {
                            "title": "1. Return a single root element",
                            "description": "To return multiple elements from a component,wrap them with a single parent tag.\nFor example, you can use a<div>:\nIf you don\u2019t want to add an extra<div>to your markup, you can write<>and</>instead:\nThis empty tag is called aFragment.Fragments let you group things without leaving any trace in the browser HTML tree.\nJSX looks like HTML, but under the hood it is transformed into plain JavaScript objects. You can\u2019t return two objects from a function without wrapping them into an array. This explains why you also can\u2019t return two JSX tags without wrapping them into another tag or a Fragment.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "< div >\n< h1 > </ h1 >\n< img\nsrc \"https://i.imgur.com/yXOvdOSs.jpg\"\nalt \"Hedy Lamarr\"\nclass \"photo\"\n>\n< ul >\n\n</ ul >\n</ div >"
                                },
                                {
                                    "language": "javascript",
                                    "code": "< >\n< h1 > </ h1 >\n< img\nsrc \"https://i.imgur.com/yXOvdOSs.jpg\"\nalt \"Hedy Lamarr\"\nclass \"photo\"\n>\n< ul >\n\n</ ul >\n</ >"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/writing-markup-with-jsx/reference/react/Fragment",
                                "https://react.dev/learn/writing-markup-with-jsx#why-do-multiple-jsx-tags-need-to-be-wrapped"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "2. Close all the tags",
                            "description": "JSX requires tags to be explicitly closed: self-closing tags like<img>must become<img />, and wrapping tags like<li>orangesmust be written as<li>oranges</li>.\nThis is how Hedy Lamarr\u2019s image and list items look closed:",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "< >\n< img\nsrc \"https://i.imgur.com/yXOvdOSs.jpg\"\nalt \"Hedy Lamarr\"\nclass \"photo\"\n/>\n< ul >\n< li > </ li >\n< li > </ li >\n< li > </ li >\n</ ul >\n</ >"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "3. camelCase all most of the things!",
                            "description": "JSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables. But JavaScript has limitations on variable names. For example, their names can\u2019t contain dashes or be reserved words likeclass.\nThis is why, in React, many HTML and SVG attributes are written in camelCase. For example, instead ofstroke-widthyou usestrokeWidth. Sinceclassis a reserved word, in React you writeclassNameinstead, named after thecorresponding DOM property:\nYou canfind all these attributes in the list of DOM component props.If you get one wrong, don\u2019t worry\u2014React will print a message with a possible correction to thebrowser console.\nFor historical reasons,aria-*anddata-*attributes are written as in HTML with dashes.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "< img\nsrc \"https://i.imgur.com/yXOvdOSs.jpg\"\nalt \"Hedy Lamarr\"\nclassName \"photo\"\n/>"
                                }
                            ],
                            "urls": [
                                "https://developer.mozilla.org/en-US/docs/Web/API/Element/className",
                                "https://react.dev/learn/writing-markup-with-jsx/reference/react-dom/components/common",
                                "https://developer.mozilla.org/docs/Tools/Browser_Console",
                                "https://developer.mozilla.org/docs/Web/Accessibility/ARIA",
                                "https://developer.mozilla.org/docs/Learn/HTML/Howto/Use_data_attributes"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Pro-tip: Use a JSX Converter",
                            "description": "Converting all these attributes in existing markup can be tedious! We recommend using aconverterto translate your existing HTML and SVG to JSX. Converters are very useful in practice, but it\u2019s still worth understanding what is going on so that you can comfortably write JSX on your own.\nHere is your final result:",
                            "code_sample": [],
                            "urls": [
                                "https://transform.tools/html-to-jsx"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Recap",
                    "description": "Now you know why JSX exists and how to use it in components:\nReact components group rendering logic together with markup because they are related.JSX is similar to HTML, with a few differences. You can use aconverterif you need to.Error messages will often point you in the right direction to fixing your markup.",
                    "code_sample": [],
                    "urls": [
                        "https://transform.tools/html-to-jsx"
                    ],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewJSX: Putting markup into JavaScriptConverting HTML to JSXThe Rules of JSX1. Return a single root element2. Close all the tags3. camelCaseallmost of the things!Pro-tip: Use a JSX ConverterRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/writing-markup-with-jsx#",
                        "https://react.dev/learn/writing-markup-with-jsx#jsx-putting-markup-into-javascript",
                        "https://react.dev/learn/writing-markup-with-jsx#converting-html-to-jsx",
                        "https://react.dev/learn/writing-markup-with-jsx#the-rules-of-jsx",
                        "https://react.dev/learn/writing-markup-with-jsx#1-return-a-single-root-element",
                        "https://react.dev/learn/writing-markup-with-jsx#2-close-all-the-tags",
                        "https://react.dev/learn/writing-markup-with-jsx#3-camelcase-salls-most-of-the-things",
                        "https://react.dev/learn/writing-markup-with-jsx#pro-tip-use-a-jsx-converter",
                        "https://react.dev/learn/writing-markup-with-jsx#recap",
                        "https://react.dev/learn/writing-markup-with-jsx#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Lifecycle of Reactive Effects \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
        "sections": {
            "summary": "Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time. React provides a linter rule to check that you\u2019ve specified your Effect\u2019s dependencies correctly. This keeps your Effect synchronized to the latest props and state.\nHow an Effect\u2019s lifecycle is different from a component\u2019s lifecycleHow to think about each individual Effect in isolationWhen your Effect needs to re-synchronize, and whyHow your Effect\u2019s dependencies are determinedWhat it means for a value to be reactiveWhat an empty dependency array meansHow React verifies your dependencies are correct with a linterWhat to do when you disagree with the linter",
            "content": [
                {
                    "title": "The lifecycle of an Effect",
                    "description": "Every React component goes through the same lifecycle:\nA componentmountswhen it\u2019s added to the screen.A componentupdateswhen it receives new props or state, usually in response to an interaction.A componentunmountswhen it\u2019s removed from the screen.\nIt\u2019s a good way to think about components, butnotabout Effects.Instead, try to think about each Effect independently from your component\u2019s lifecycle. An Effect describes how tosynchronize an external systemto the current props and state. As your code changes, synchronization will need to happen more or less often.\nTo illustrate this point, consider this Effect connecting your component to a chat server:\nYour Effect\u2019s body specifies how tostart synchronizing:\nThe cleanup function returned by your Effect specifies how tostop synchronizing:\nIntuitively, you might think that React wouldstart synchronizingwhen your component mounts andstop synchronizingwhen your component unmounts. However, this is not the end of the story! Sometimes, it may also be necessary tostart and stop synchronizing multiple timeswhile the component remains mounted.\nLet\u2019s look atwhythis is necessary,whenit happens, andhowyou can control this behavior.\nSome Effects don\u2019t return a cleanup function at all.More often than not,you\u2019ll want to return one\u2014but if you don\u2019t, React will behave as if you returned an empty cleanup function.\nImagine thisChatRoomcomponent receives aroomIdprop that the user picks in a dropdown. Let\u2019s say that initially the user picks the\"general\"room as theroomId. Your app displays the\"general\"chat room:\nAfter the UI is displayed, React will run your Effect tostart synchronizing.It connects to the\"general\"room:\nSo far, so good.\nLater, the user picks a different room in the dropdown (for example,\"travel\"). First, React will update the UI:\nThink about what should happen next. The user sees that\"travel\"is the selected chat room in the UI. However, the Effect that ran the last time is still connected to the\"general\"room.TheroomIdprop has changed, so what your Effect did back then (connecting to the\"general\"room) no longer matches the UI.\nAt this point, you want React to do two things:\nStop synchronizing with the oldroomId(disconnect from the\"general\"room)Start synchronizing with the newroomId(connect to the\"travel\"room)\nLuckily, you\u2019ve already taught React how to do both of these things!Your Effect\u2019s body specifies how to start synchronizing, and your cleanup function specifies how to stop synchronizing. All that React needs to do now is to call them in the correct order and with the correct props and state. Let\u2019s see how exactly that happens.\nRecall that yourChatRoomcomponent has received a new value for itsroomIdprop. It used to be\"general\", and now it is\"travel\". React needs to re-synchronize your Effect to re-connect you to a different room.\nTostop synchronizing,React will call the cleanup function that your Effect returned after connecting to the\"general\"room. SinceroomIdwas\"general\", the cleanup function disconnects from the\"general\"room:\nThen React will run the Effect that you\u2019ve provided during this render. This time,roomIdis\"travel\"so it willstart synchronizingto the\"travel\"chat room (until its cleanup function is eventually called too):\nThanks to this, you\u2019re now connected to the same room that the user chose in the UI. Disaster averted!\nEvery time after your component re-renders with a differentroomId, your Effect will re-synchronize. For example, let\u2019s say the user changesroomIdfrom\"travel\"to\"music\". React will againstop synchronizingyour Effect by calling its cleanup function (disconnecting you from the\"travel\"room). Then it willstart synchronizingagain by running its body with the newroomIdprop (connecting you to the\"music\"room).\nFinally, when the user goes to a different screen,ChatRoomunmounts. Now there is no need to stay connected at all. React willstop synchronizingyour Effect one last time and disconnect you from the\"music\"chat room.\nLet\u2019s recap everything that\u2019s happened from theChatRoomcomponent\u2019s perspective:\nChatRoommounted withroomIdset to\"general\"ChatRoomupdated withroomIdset to\"travel\"ChatRoomupdated withroomIdset to\"music\"ChatRoomunmounted\nDuring each of these points in the component\u2019s lifecycle, your Effect did different things:\nYour Effect connected to the\"general\"roomYour Effect disconnected from the\"general\"room and connected to the\"travel\"roomYour Effect disconnected from the\"travel\"room and connected to the\"music\"roomYour Effect disconnected from the\"music\"room\nNow let\u2019s think about what happened from the perspective of the Effect itself:\nThis code\u2019s structure might inspire you to see what happened as a sequence of non-overlapping time periods:\nYour Effect connected to the\"general\"room (until it disconnected)Your Effect connected to the\"travel\"room (until it disconnected)Your Effect connected to the\"music\"room (until it disconnected)\nPreviously, you were thinking from the component\u2019s perspective. When you looked from the component\u2019s perspective, it was tempting to think of Effects as \u201ccallbacks\u201d or \u201clifecycle events\u201d that fire at a specific time like \u201cafter a render\u201d or \u201cbefore unmount\u201d. This way of thinking gets complicated very fast, so it\u2019s best to avoid.\nInstead, always focus on a single start/stop cycle at a time. It shouldn\u2019t matter whether a component is mounting, updating, or unmounting. All you need to do is to describe how to start synchronization and how to stop it. If you do it well, your Effect will be resilient to being started and stopped as many times as it\u2019s needed.\nThis might remind you how you don\u2019t think whether a component is mounting or updating when you write the rendering logic that creates JSX. You describe what should be on the screen, and Reactfigures out the rest.\nHere is a live example that you can play with. Press \u201cOpen chat\u201d to mount theChatRoomcomponent:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const serverUrl 'https://localhost:1234' ;\n\nfunction ChatRoom ( { roomId } ) {\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( ) ;\n} ;\n} , [ roomId ] ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "// ...\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( ) ;\n} ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "// ...\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( ) ;\n} ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "const serverUrl 'https://localhost:1234' ;\n\nfunction ChatRoom ( { roomId /* \"general\" */ } ) {\n// ...\nreturn < h1 > { roomId } </ h1 > ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId /* \"general\" */ } ) {\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ; // Connects to the \"general\" room\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( ) ; // Disconnects from the \"general\" room\n} ;\n} , [ roomId ] ) ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId /* \"travel\" */ } ) {\n// ...\nreturn < h1 > { roomId } </ h1 > ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId /* \"general\" */ } ) {\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ; // Connects to the \"general\" room\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( ) ; // Disconnects from the \"general\" room\n} ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId /* \"travel\" */ } ) {\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ; // Connects to the \"travel\" room\nconnection connect ( ) ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "useEffect ( ( ) => {\n// Your Effect connected to the room specified with roomId...\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\nreturn ( ) => {\n// ...until it disconnected\nconnection disconnect ( ) ;\n} ;\n} , [ roomId ] ) ;"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/lifecycle-of-reactive-effects/learn/synchronizing-with-effects",
                        "https://react.dev/learn/lifecycle-of-reactive-effects/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development",
                        "https://react.dev/learn/lifecycle-of-reactive-effects/learn/reacting-to-input-with-state"
                    ],
                    "subsections": [
                        {
                            "title": "Why synchronization may need to happen more than once",
                            "description": "Imagine thisChatRoomcomponent receives aroomIdprop that the user picks in a dropdown. Let\u2019s say that initially the user picks the\"general\"room as theroomId. Your app displays the\"general\"chat room:\nAfter the UI is displayed, React will run your Effect tostart synchronizing.It connects to the\"general\"room:\nSo far, so good.\nLater, the user picks a different room in the dropdown (for example,\"travel\"). First, React will update the UI:\nThink about what should happen next. The user sees that\"travel\"is the selected chat room in the UI. However, the Effect that ran the last time is still connected to the\"general\"room.TheroomIdprop has changed, so what your Effect did back then (connecting to the\"general\"room) no longer matches the UI.\nAt this point, you want React to do two things:\nStop synchronizing with the oldroomId(disconnect from the\"general\"room)Start synchronizing with the newroomId(connect to the\"travel\"room)\nLuckily, you\u2019ve already taught React how to do both of these things!Your Effect\u2019s body specifies how to start synchronizing, and your cleanup function specifies how to stop synchronizing. All that React needs to do now is to call them in the correct order and with the correct props and state. Let\u2019s see how exactly that happens.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "const serverUrl 'https://localhost:1234' ;\n\nfunction ChatRoom ( { roomId /* \"general\" */ } ) {\n// ...\nreturn < h1 > { roomId } </ h1 > ;\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId /* \"general\" */ } ) {\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ; // Connects to the \"general\" room\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( ) ; // Disconnects from the \"general\" room\n} ;\n} , [ roomId ] ) ;\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId /* \"travel\" */ } ) {\n// ...\nreturn < h1 > { roomId } </ h1 > ;\n}"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "How React re-synchronizes your Effect",
                            "description": "Recall that yourChatRoomcomponent has received a new value for itsroomIdprop. It used to be\"general\", and now it is\"travel\". React needs to re-synchronize your Effect to re-connect you to a different room.\nTostop synchronizing,React will call the cleanup function that your Effect returned after connecting to the\"general\"room. SinceroomIdwas\"general\", the cleanup function disconnects from the\"general\"room:\nThen React will run the Effect that you\u2019ve provided during this render. This time,roomIdis\"travel\"so it willstart synchronizingto the\"travel\"chat room (until its cleanup function is eventually called too):\nThanks to this, you\u2019re now connected to the same room that the user chose in the UI. Disaster averted!\nEvery time after your component re-renders with a differentroomId, your Effect will re-synchronize. For example, let\u2019s say the user changesroomIdfrom\"travel\"to\"music\". React will againstop synchronizingyour Effect by calling its cleanup function (disconnecting you from the\"travel\"room). Then it willstart synchronizingagain by running its body with the newroomIdprop (connecting you to the\"music\"room).\nFinally, when the user goes to a different screen,ChatRoomunmounts. Now there is no need to stay connected at all. React willstop synchronizingyour Effect one last time and disconnect you from the\"music\"chat room.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId /* \"general\" */ } ) {\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ; // Connects to the \"general\" room\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( ) ; // Disconnects from the \"general\" room\n} ;\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId /* \"travel\" */ } ) {\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ; // Connects to the \"travel\" room\nconnection connect ( ) ;\n// ..."
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Thinking from the Effect\u2019s perspective",
                            "description": "Let\u2019s recap everything that\u2019s happened from theChatRoomcomponent\u2019s perspective:\nChatRoommounted withroomIdset to\"general\"ChatRoomupdated withroomIdset to\"travel\"ChatRoomupdated withroomIdset to\"music\"ChatRoomunmounted\nDuring each of these points in the component\u2019s lifecycle, your Effect did different things:\nYour Effect connected to the\"general\"roomYour Effect disconnected from the\"general\"room and connected to the\"travel\"roomYour Effect disconnected from the\"travel\"room and connected to the\"music\"roomYour Effect disconnected from the\"music\"room\nNow let\u2019s think about what happened from the perspective of the Effect itself:\nThis code\u2019s structure might inspire you to see what happened as a sequence of non-overlapping time periods:\nYour Effect connected to the\"general\"room (until it disconnected)Your Effect connected to the\"travel\"room (until it disconnected)Your Effect connected to the\"music\"room (until it disconnected)\nPreviously, you were thinking from the component\u2019s perspective. When you looked from the component\u2019s perspective, it was tempting to think of Effects as \u201ccallbacks\u201d or \u201clifecycle events\u201d that fire at a specific time like \u201cafter a render\u201d or \u201cbefore unmount\u201d. This way of thinking gets complicated very fast, so it\u2019s best to avoid.\nInstead, always focus on a single start/stop cycle at a time. It shouldn\u2019t matter whether a component is mounting, updating, or unmounting. All you need to do is to describe how to start synchronization and how to stop it. If you do it well, your Effect will be resilient to being started and stopped as many times as it\u2019s needed.\nThis might remind you how you don\u2019t think whether a component is mounting or updating when you write the rendering logic that creates JSX. You describe what should be on the screen, and Reactfigures out the rest.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "useEffect ( ( ) => {\n// Your Effect connected to the room specified with roomId...\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\nreturn ( ) => {\n// ...until it disconnected\nconnection disconnect ( ) ;\n} ;\n} , [ roomId ] ) ;"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/lifecycle-of-reactive-effects/learn/reacting-to-input-with-state"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "How React verifies that your Effect can re-synchronize",
                            "description": "Here is a live example that you can play with. Press \u201cOpen chat\u201d to mount theChatRoomcomponent:",
                            "code_sample": [],
                            "urls": [],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Effects \u201creact\u201d to reactive values",
                    "description": "Your Effect reads two variables (serverUrlandroomId), but you only specifiedroomIdas a dependency:\nWhy doesn\u2019tserverUrlneed to be a dependency?\nThis is because theserverUrlnever changes due to a re-render. It\u2019s always the same no matter how many times the component re-renders and why. SinceserverUrlnever changes, it wouldn\u2019t make sense to specify it as a dependency. After all, dependencies only do something when they change over time!\nOn the other hand,roomIdmay be different on a re-render.Props, state, and other values declared inside the component arereactivebecause they\u2019re calculated during rendering and participate in the React data flow.\nIfserverUrlwas a state variable, it would be reactive. Reactive values must be included in dependencies:\nBy includingserverUrlas a dependency, you ensure that the Effect re-synchronizes after it changes.\nTry changing the selected chat room or edit the server URL in this sandbox:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const serverUrl 'https://localhost:1234' ;\n\nfunction ChatRoom ( { roomId } ) {\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( ) ;\n} ;\n} , [ roomId ] ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId } ) { // Props change over time\nconst [ serverUrl , setServerUrl ] useState ( 'https://localhost:1234' ) ; // State may change over time\n\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ; // Your Effect reads props and state\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( ) ;\n} ;\n} , [ roomId , serverUrl ] ) ; // So you tell React that this Effect \"depends on\" on props and state\n// ...\n}"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Components can mount, update, and unmount.Each Effect has a separate lifecycle from the surrounding component.Each Effect describes a separate synchronization process that canstartandstop.When you write and read Effects, think from each individual Effect\u2019s perspective (how to start and stop synchronization) rather than from the component\u2019s perspective (how it mounts, updates, or unmounts).Values declared inside the component body are \u201creactive\u201d.Reactive values should re-synchronize the Effect because they can change over time.The linter verifies that all reactive values used inside the Effect are specified as dependencies.All errors flagged by the linter are legitimate. There\u2019s always a way to fix the code to not break the rules.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewThe lifecycle of an EffectWhy synchronization may need to happen more than onceHow React re-synchronizes your EffectThinking from the Effect\u2019s perspectiveHow React verifies that your Effect can re-synchronizeHow React knows that it needs to re-synchronize the EffectEach Effect represents a separate synchronization processEffects \u201creact\u201d to reactive valuesWhat an Effect with empty dependencies meansAll variables declared in the component body are reactiveReact verifies that you specified every reactive value as a dependencyWhat to do when you don\u2019t want to re-synchronizeRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/lifecycle-of-reactive-effects#",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#the-lifecycle-of-an-effect",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#why-synchronization-may-need-to-happen-more-than-once",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#how-react-re-synchronizes-your-effect",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#thinking-from-the-effects-perspective",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#how-react-verifies-that-your-effect-can-re-synchronize",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#how-react-knows-that-it-needs-to-re-synchronize-the-effect",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#each-effect-represents-a-separate-synchronization-process",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#what-an-effect-with-empty-dependencies-means",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#all-variables-declared-in-the-component-body-are-reactive",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#react-verifies-that-you-specified-every-reactive-value-as-a-dependency",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#what-to-do-when-you-dont-want-to-re-synchronize",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#recap",
                        "https://react.dev/learn/lifecycle-of-reactive-effects#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "You Might Not Need an Effect \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/you-might-not-need-an-effect",
        "sections": {
            "summary": "Effects are an escape hatch from the React paradigm. They let you \u201cstep outside\u201d of React and synchronize your components with some external system like a non-React widget, network, or the browser DOM. If there is no external system involved (for example, if you want to update a component\u2019s state when some props or state change), you shouldn\u2019t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.\nWhy and how to remove unnecessary Effects from your componentsHow to cache expensive computations without EffectsHow to reset and adjust component state without EffectsHow to share logic between event handlersWhich logic should be moved to event handlersHow to notify parent components about changes",
            "content": [
                {
                    "title": "How to remove unnecessary Effects",
                    "description": "There are two common cases in which you don\u2019t need Effects:\nYou don\u2019t need Effects to transform data for rendering.For example, let\u2019s say you want to filter a list before displaying it. You might feel tempted to write an Effect that updates a state variable when the list changes. However, this is inefficient. When you update the state, React will first call your component functions to calculate what should be on the screen. Then React will\u201ccommit\u201dthese changes to the DOM, updating the screen. Then React will run your Effects. If your Effectalsoimmediately updates the state, this restarts the whole process from scratch! To avoid the unnecessary render passes, transform all the data at the top level of your components. That code will automatically re-run whenever your props or state change.You don\u2019t need Effects to handle user events.For example, let\u2019s say you want to send an/api/buyPOST request and show a notification when the user buys a product. In the Buy button click event handler, you know exactly what happened. By the time an Effect runs, you don\u2019t knowwhatthe user did (for example, which button was clicked). This is why you\u2019ll usually handle user events in the corresponding event handlers.\nYoudoneed Effects tosynchronizewith external systems. For example, you can write an Effect that keeps a jQuery widget synchronized with the React state. You can also fetch data with Effects: for example, you can synchronize the search results with the current search query. Keep in mind that modernframeworksprovide more efficient built-in data fetching mechanisms than writing Effects directly in your components.\nTo help you gain the right intuition, let\u2019s look at some common concrete examples!\nSuppose you have a component with two state variables:firstNameandlastName. You want to calculate afullNamefrom them by concatenating them. Moreover, you\u2019d likefullNameto update wheneverfirstNameorlastNamechange. Your first instinct might be to add afullNamestate variable and update it in an Effect:\nThis is more complicated than necessary. It is inefficient too: it does an entire render pass with a stale value forfullName, then immediately re-renders with the updated value. Remove the state variable and the Effect:\nWhen something can be calculated from the existing props or state,don\u2019t put it in state.Instead, calculate it during rendering.This makes your code faster (you avoid the extra \u201ccascading\u201d updates), simpler (you remove some code), and less error-prone (you avoid bugs caused by different state variables getting out of sync with each other). If this approach feels new to you,Thinking in Reactexplains what should go into state.\nThis component computesvisibleTodosby taking thetodosit receives by props and filtering them according to thefilterprop. You might feel tempted to store the result in state and update it from an Effect:\nLike in the earlier example, this is both unnecessary and inefficient. First, remove the state and the Effect:\nUsually, this code is fine! But maybegetFilteredTodos()is slow or you have a lot oftodos. In that case you don\u2019t want to recalculategetFilteredTodos()if some unrelated state variable likenewTodohas changed.\nYou can cache (or\u201cmemoize\u201d) an expensive calculation by wrapping it in auseMemoHook:\nOr, written as a single line:\nThis tells React that you don\u2019t want the inner function to re-run unless eithertodosorfilterhave changed.React will remember the return value ofgetFilteredTodos()during the initial render. During the next renders, it will check iftodosorfilterare different. If they\u2019re the same as last time,useMemowill return the last result it has stored. But if they are different, React will call the inner function again (and store its result).\nThe function you wrap inuseMemoruns during rendering, so this only works forpure calculations.\nIn general, unless you\u2019re creating or looping over thousands of objects, it\u2019s probably not expensive. If you want to get more confidence, you can add a console log to measure the time spent in a piece of code:\nPerform the interaction you\u2019re measuring (for example, typing into the input). You will then see logs likefilter array: 0.15msin your console. If the overall logged time adds up to a significant amount (say,1msor more), it might make sense to memoize that calculation. As an experiment, you can then wrap the calculation inuseMemoto verify whether the total logged time has decreased for that interaction or not:\nuseMemowon\u2019t make thefirstrender faster. It only helps you skip unnecessary work on updates.\nKeep in mind that your machine is probably faster than your users\u2019 so it\u2019s a good idea to test the performance with an artificial slowdown. For example, Chrome offers aCPU Throttlingoption for this.\nAlso note that measuring performance in development will not give you the most accurate results. (For example, whenStrict Modeis on, you will see each component render twice rather than once.) To get the most accurate timings, build your app for production and test it on a device like your users have.\nThisProfilePagecomponent receives auserIdprop. The page contains a comment input, and you use acommentstate variable to hold its value. One day, you notice a problem: when you navigate from one profile to another, thecommentstate does not get reset. As a result, it\u2019s easy to accidentally post a comment on a wrong user\u2019s profile. To fix the issue, you want to clear out thecommentstate variable whenever theuserIdchanges:\nThis is inefficient becauseProfilePageand its children will first render with the stale value, and then render again. It is also complicated because you\u2019d need to do this ineverycomponent that has some state insideProfilePage. For example, if the comment UI is nested, you\u2019d want to clear out nested comment state too.\nInstead, you can tell React that each user\u2019s profile is conceptually adifferentprofile by giving it an explicit key. Split your component in two and pass akeyattribute from the outer component to the inner one:\nNormally, React preserves the state when the same component is rendered in the same spot.By passinguserIdas akeyto theProfilecomponent, you\u2019re asking React to treat twoProfilecomponents with differentuserIdas two different components that should not share any state.Whenever the key (which you\u2019ve set touserId) changes, React will recreate the DOM andreset the stateof theProfilecomponent and all of its children. Now thecommentfield will clear out automatically when navigating between profiles.\nNote that in this example, only the outerProfilePagecomponent is exported and visible to other files in the project. Components renderingProfilePagedon\u2019t need to pass the key to it: they passuserIdas a regular prop. The factProfilePagepasses it as akeyto the innerProfilecomponent is an implementation detail.\nSometimes, you might want to reset or adjust a part of the state on a prop change, but not all of it.\nThisListcomponent receives a list ofitemsas a prop, and maintains the selected item in theselectionstate variable. You want to reset theselectiontonullwhenever theitemsprop receives a different array:\nThis, too, is not ideal. Every time theitemschange, theListand its child components will render with a staleselectionvalue at first. Then React will update the DOM and run the Effects. Finally, thesetSelection(null)call will cause another re-render of theListand its child components, restarting this whole process again.\nStart by deleting the Effect. Instead, adjust the state directly during rendering:\nStoring information from previous renderslike this can be hard to understand, but it\u2019s better than updating the same state in an Effect. In the above example,setSelectionis called directly during a render. React will re-render theListimmediatelyafter it exits with areturnstatement. React has not rendered theListchildren or updated the DOM yet, so this lets theListchildren skip rendering the staleselectionvalue.\nWhen you update a component during rendering, React throws away the returned JSX and immediately retries rendering. To avoid very slow cascading retries, React only lets you update thesamecomponent\u2019s state during a render. If you update another component\u2019s state during a render, you\u2019ll see an error. A condition likeitems !== prevItemsis necessary to avoid loops. You may adjust state like this, but any other side effects (like changing the DOM or setting timeouts) should stay in event handlers or Effects tokeep components pure.\nAlthough this pattern is more efficient than an Effect, most components shouldn\u2019t need it either.No matter how you do it, adjusting state based on props or other state makes your data flow more difficult to understand and debug. Always check whether you canreset all state with a keyorcalculate everything during renderinginstead. For example, instead of storing (and resetting) the selecteditem, you can store the selecteditem ID:\nNow there is no need to \u201cadjust\u201d the state at all. If the item with the selected ID is in the list, it remains selected. If it\u2019s not, theselectioncalculated during rendering will benullbecause no matching item was found. This behavior is different, but arguably better because most changes toitemspreserve the selection.\nLet\u2019s say you have a product page with two buttons (Buy and Checkout) that both let you buy that product. You want to show a notification whenever the user puts the product in the cart. CallingshowNotification()in both buttons\u2019 click handlers feels repetitive so you might be tempted to place this logic in an Effect:\nThis Effect is unnecessary. It will also most likely cause bugs. For example, let\u2019s say that your app \u201cremembers\u201d the shopping cart between the page reloads. If you add a product to the cart once and refresh the page, the notification will appear again. It will keep appearing every time you refresh that product\u2019s page. This is becauseproduct.isInCartwill already betrueon the page load, so the Effect above will callshowNotification().\nWhen you\u2019re not sure whether some code should be in an Effect or in an event handler, ask yourselfwhythis code needs to run. Use Effects only for code that should runbecausethe component was displayed to the user.In this example, the notification should appear because the userpressed the button, not because the page was displayed! Delete the Effect and put the shared logic into a function called from both event handlers:\nThis both removes the unnecessary Effect and fixes the bug.\nThisFormcomponent sends two kinds of POST requests. It sends an analytics event when it mounts. When you fill in the form and click the Submit button, it will send a POST request to the/api/registerendpoint:\nLet\u2019s apply the same criteria as in the example before.\nThe analytics POST request should remain in an Effect. This is because thereasonto send the analytics event is that the form was displayed. (It would fire twice in development, butsee herefor how to deal with that.)\nHowever, the/api/registerPOST request is not caused by the form beingdisplayed. You only want to send the request at one specific moment in time: when the user presses the button. It should only ever happenon that particular interaction. Delete the second Effect and move that POST request into the event handler:\nWhen you choose whether to put some logic into an event handler or an Effect, the main question you need to answer iswhat kind of logicit is from the user\u2019s perspective. If this logic is caused by a particular interaction, keep it in the event handler. If it\u2019s caused by the userseeingthe component on the screen, keep it in the Effect.\nSometimes you might feel tempted to chain Effects that each adjust a piece of state based on other state:\nThere are two problems with this code.\nThe first problem is that it is very inefficient: the component (and its children) have to re-render between eachsetcall in the chain. In the example above, in the worst case (setCard\u2192 render \u2192setGoldCardCount\u2192 render \u2192setRound\u2192 render \u2192setIsGameOver\u2192 render) there are three unnecessary re-renders of the tree below.\nThe second problem is that even if it weren\u2019t slow, as your code evolves, you will run into cases where the \u201cchain\u201d you wrote doesn\u2019t fit the new requirements. Imagine you are adding a way to step through the history of the game moves. You\u2019d do it by updating each state variable to a value from the past. However, setting thecardstate to a value from the past would trigger the Effect chain again and change the data you\u2019re showing. Such code is often rigid and fragile.\nIn this case, it\u2019s better to calculate what you can during rendering, and adjust the state in the event handler:\nThis is a lot more efficient. Also, if you implement a way to view game history, now you will be able to set each state variable to a move from the past without triggering the Effect chain that adjusts every other value. If you need to reuse logic between several event handlers, you canextract a functionand call it from those handlers.\nRemember that inside event handlers,state behaves like a snapshot.For example, even after you callsetRound(round + 1), theroundvariable will reflect the value at the time the user clicked the button. If you need to use the next value for calculations, define it manually likeconst nextRound = round + 1.\nIn some cases, youcan\u2019tcalculate the next state directly in the event handler. For example, imagine a form with multiple dropdowns where the options of the next dropdown depend on the selected value of the previous dropdown. Then, a chain of Effects is appropriate because you are synchronizing with network.\nSome logic should only run once when the app loads.\nYou might be tempted to place it in an Effect in the top-level component:\nHowever, you\u2019ll quickly discover that itruns twice in development.This can cause issues\u2014for example, maybe it invalidates the authentication token because the function wasn\u2019t designed to be called twice. In general, your components should be resilient to being remounted. This includes your top-levelAppcomponent.\nAlthough it may not ever get remounted in practice in production, following the same constraints in all components makes it easier to move and reuse code. If some logic must runonce per app loadrather thanonce per component mount, add a top-level variable to track whether it has already executed:\nYou can also run it during module initialization and before the app renders:\nCode at the top level runs once when your component is imported\u2014even if it doesn\u2019t end up being rendered. To avoid slowdown or surprising behavior when importing arbitrary components, don\u2019t overuse this pattern. Keep app-wide initialization logic to root component modules likeApp.jsor in your application\u2019s entry point.\nLet\u2019s say you\u2019re writing aTogglecomponent with an internalisOnstate which can be eithertrueorfalse. There are a few different ways to toggle it (by clicking or dragging). You want to notify the parent component whenever theToggleinternal state changes, so you expose anonChangeevent and call it from an Effect:\nLike earlier, this is not ideal. TheToggleupdates its state first, and React updates the screen. Then React runs the Effect, which calls theonChangefunction passed from a parent component. Now the parent component will update its own state, starting another render pass. It would be better to do everything in a single pass.\nDelete the Effect and instead update the state ofbothcomponents within the same event handler:\nWith this approach, both theTogglecomponent and its parent component update their state during the event. Reactbatches updatesfrom different components together, so there will only be one render pass.\nYou might also be able to remove the state altogether, and instead receiveisOnfrom the parent component:\n\u201cLifting state up\u201dlets the parent component fully control theToggleby toggling the parent\u2019s own state. This means the parent component will have to contain more logic, but there will be less state overall to worry about. Whenever you try to keep two different state variables synchronized, try lifting state up instead!\nThisChildcomponent fetches some data and then passes it to theParentcomponent in an Effect:\nIn React, data flows from the parent components to their children. When you see something wrong on the screen, you can trace where the information comes from by going up the component chain until you find which component passes the wrong prop or has the wrong state. When child components update the state of their parent components in Effects, the data flow becomes very difficult to trace. Since both the child and the parent need the same data, let the parent component fetch that data, andpass it downto the child instead:\nThis is simpler and keeps the data flow predictable: the data flows down from the parent to the child.\nSometimes, your components may need to subscribe to some data outside of the React state. This data could be from a third-party library or a built-in browser API. Since this data can change without React\u2019s knowledge, you need to manually subscribe your components to it. This is often done with an Effect, for example:\nHere, the component subscribes to an external data store (in this case, the browsernavigator.onLineAPI). Since this API does not exist on the server (so it can\u2019t be used for the initial HTML), initially the state is set totrue. Whenever the value of that data store changes in the browser, the component updates its state.\nAlthough it\u2019s common to use Effects for this, React has a purpose-built Hook for subscribing to an external store that is preferred instead. Delete the Effect and replace it with a call touseSyncExternalStore:\nThis approach is less error-prone than manually syncing mutable data to React state with an Effect. Typically, you\u2019ll write a custom Hook likeuseOnlineStatus()above so that you don\u2019t need to repeat this code in the individual components.Read more about subscribing to external stores from React components.\nMany apps use Effects to kick off data fetching. It is quite common to write a data fetching Effect like this:\nYoudon\u2019tneed to move this fetch to an event handler.\nThis might seem like a contradiction with the earlier examples where you needed to put the logic into the event handlers! However, consider that it\u2019s notthe typing eventthat\u2019s the main reason to fetch. Search inputs are often prepopulated from the URL, and the user might navigate Back and Forward without touching the input.\nIt doesn\u2019t matter wherepageandquerycome from. While this component is visible, you want to keepresultssynchronizedwith data from the network for the currentpageandquery. This is why it\u2019s an Effect.\nHowever, the code above has a bug. Imagine you type\"hello\"fast. Then thequerywill change from\"h\", to\"he\",\"hel\",\"hell\", and\"hello\". This will kick off separate fetches, but there is no guarantee about which order the responses will arrive in. For example, the\"hell\"response may arriveafterthe\"hello\"response. Since it will callsetResults()last, you will be displaying the wrong search results. This is called a\u201crace condition\u201d: two different requests \u201craced\u201d against each other and came in a different order than you expected.\nTo fix the race condition, you need toadd a cleanup functionto ignore stale responses:\nThis ensures that when your Effect fetches data, all responses except the last requested one will be ignored.\nHandling race conditions is not the only difficulty with implementing data fetching. You might also want to think about caching responses (so that the user can click Back and see the previous screen instantly), how to fetch data on the server (so that the initial server-rendered HTML contains the fetched content instead of a spinner), and how to avoid network waterfalls (so that a child can fetch data without waiting for every parent).\nThese issues apply to any UI library, not just React. Solving them is not trivial, which is why modernframeworksprovide more efficient built-in data fetching mechanisms than fetching data in Effects.\nIf you don\u2019t use a framework (and don\u2019t want to build your own) but would like to make data fetching from Effects more ergonomic, consider extracting your fetching logic into a custom Hook like in this example:\nYou\u2019ll likely also want to add some logic for error handling and to track whether the content is loading. You can build a Hook like this yourself or use one of the many solutions already available in the React ecosystem.Although this alone won\u2019t be as efficient as using a framework\u2019s built-in data fetching mechanism, moving the data fetching logic into a custom Hook will make it easier to adopt an efficient data fetching strategy later.\nIn general, whenever you have to resort to writing Effects, keep an eye out for when you can extract a piece of functionality into a custom Hook with a more declarative and purpose-built API likeuseDataabove. The fewer rawuseEffectcalls you have in your components, the easier you will find to maintain your application.\nIf you can calculate something during render, you don\u2019t need an Effect.To cache expensive calculations, adduseMemoinstead ofuseEffect.To reset the state of an entire component tree, pass a differentkeyto it.To reset a particular bit of state in response to a prop change, set it during rendering.Code that runs because a component wasdisplayedshould be in Effects, the rest should be in events.If you need to update the state of several components, it\u2019s better to do it during a single event.Whenever you try to synchronize state variables in different components, consider lifting state up.You can fetch data with Effects, but you need to implement cleanup to avoid race conditions.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function Form ( ) {\nconst [ firstName , setFirstName ] useState ( 'Taylor' ) ;\nconst [ lastName , setLastName ] useState ( 'Swift' ) ;\n\n// \ud83d\udd34 Avoid: redundant state and unnecessary Effect\nconst [ fullName , setFullName ] useState ( '' ) ;\nuseEffect ( ( ) => {\nsetFullName ( firstName ' ' lastName ) ;\n} , [ firstName , lastName ] ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Form ( ) {\nconst [ firstName , setFirstName ] useState ( 'Taylor' ) ;\nconst [ lastName , setLastName ] useState ( 'Swift' ) ;\n// \u2705 Good: calculated during rendering\nconst fullName firstName ' ' lastName ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function TodoList ( { todos , filter } ) {\nconst [ newTodo , setNewTodo ] useState ( '' ) ;\n\n// \ud83d\udd34 Avoid: redundant state and unnecessary Effect\nconst [ visibleTodos , setVisibleTodos ] useState ( [ ] ) ;\nuseEffect ( ( ) => {\nsetVisibleTodos ( getFilteredTodos ( todos , filter ) ) ;\n} , [ todos , filter ] ) ;\n\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function TodoList ( { todos , filter } ) {\nconst [ newTodo , setNewTodo ] useState ( '' ) ;\n// \u2705 This is fine if getFilteredTodos() is not slow.\nconst visibleTodos getFilteredTodos ( todos , filter ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "import { useMemo , useState } from 'react' ;\n\nfunction TodoList ( { todos , filter } ) {\nconst [ newTodo , setNewTodo ] useState ( '' ) ;\nconst visibleTodos useMemo ( ( ) => {\n// \u2705 Does not re-run unless todos or filter change\nreturn getFilteredTodos ( todos , filter ) ;\n} , [ todos , filter ] ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "import { useMemo , useState } from 'react' ;\n\nfunction TodoList ( { todos , filter } ) {\nconst [ newTodo , setNewTodo ] useState ( '' ) ;\n// \u2705 Does not re-run getFilteredTodos() unless todos or filter change\nconst visibleTodos useMemo ( ( ) => getFilteredTodos ( todos , filter ) , [ todos , filter ] ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "console time ( 'filter array' ) ;\nconst visibleTodos getFilteredTodos ( todos , filter ) ;\nconsole timeEnd ( 'filter array' ) ;\nconsole time ( 'filter array' ) ;\nconst visibleTodos useMemo ( ( ) => {\nreturn getFilteredTodos ( todos , filter ) ; // Skipped if todos and filter haven't changed\n} , [ todos , filter ] ) ;\nconsole timeEnd ( 'filter array' ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function ProfilePage ( { userId } ) {\nconst [ comment , setComment ] useState ( '' ) ;\n\n// \ud83d\udd34 Avoid: Resetting state on prop change in an Effect\nuseEffect ( ( ) => {\nsetComment ( '' ) ;\n} , [ userId ] ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function ProfilePage ( { userId } ) {\nreturn (\n< Profile\nuserId { userId }\nkey { userId }\n/>\n) ;\n}\n\nfunction Profile ( { userId } ) {\n// \u2705 This and any other state below will reset on key change automatically\nconst [ comment , setComment ] useState ( '' ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function List ( { items } ) {\nconst [ isReverse , setIsReverse ] useState ( false ) ;\nconst [ selection , setSelection ] useState ( null ) ;\n\n// \ud83d\udd34 Avoid: Adjusting state on prop change in an Effect\nuseEffect ( ( ) => {\nsetSelection ( null ) ;\n} , [ items ] ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function List ( { items } ) {\nconst [ isReverse , setIsReverse ] useState ( false ) ;\nconst [ selection , setSelection ] useState ( null ) ;\n\n// Better: Adjust the state while rendering\nconst [ prevItems , setPrevItems ] useState ( items ) ;\nif ( items prevItems ) {\nsetPrevItems ( items ) ;\nsetSelection ( null ) ;\n}\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function List ( { items } ) {\nconst [ isReverse , setIsReverse ] useState ( false ) ;\nconst [ selectedId , setSelectedId ] useState ( null ) ;\n// \u2705 Best: Calculate everything during rendering\nconst selection items find ( item => item id selectedId ) null ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function ProductPage ( { product , addToCart } ) {\n// \ud83d\udd34 Avoid: Event-specific logic inside an Effect\nuseEffect ( ( ) => {\nif ( product isInCart ) {\nshowNotification ( `Added  ${ product name }  to the shopping cart!` ) ;\n}\n} , [ product ] ) ;\n\nfunction handleBuyClick ( ) {\naddToCart ( product ) ;\n}\n\nfunction handleCheckoutClick ( ) {\naddToCart ( product ) ;\nnavigateTo ( '/checkout' ) ;\n}\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function ProductPage ( { product , addToCart } ) {\n// \u2705 Good: Event-specific logic is called from event handlers\nfunction buyProduct ( ) {\naddToCart ( product ) ;\nshowNotification ( `Added  ${ product name }  to the shopping cart!` ) ;\n}\n\nfunction handleBuyClick ( ) {\nbuyProduct ( ) ;\n}\n\nfunction handleCheckoutClick ( ) {\nbuyProduct ( ) ;\nnavigateTo ( '/checkout' ) ;\n}\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Form ( ) {\nconst [ firstName , setFirstName ] useState ( '' ) ;\nconst [ lastName , setLastName ] useState ( '' ) ;\n\n// \u2705 Good: This logic should run because the component was displayed\nuseEffect ( ( ) => {\npost ( '/analytics/event' , { eventName : 'visit_form' } ) ;\n} , [ ] ) ;\n\n// \ud83d\udd34 Avoid: Event-specific logic inside an Effect\nconst [ jsonToSubmit , setJsonToSubmit ] useState ( null ) ;\nuseEffect ( ( ) => {\nif ( jsonToSubmit null ) {\npost ( '/api/register' , jsonToSubmit ) ;\n}\n} , [ jsonToSubmit ] ) ;\n\nfunction handleSubmit ( e ) {\ne preventDefault ( ) ;\nsetJsonToSubmit ( { firstName , lastName } ) ;\n}\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Form ( ) {\nconst [ firstName , setFirstName ] useState ( '' ) ;\nconst [ lastName , setLastName ] useState ( '' ) ;\n\n// \u2705 Good: This logic runs because the component was displayed\nuseEffect ( ( ) => {\npost ( '/analytics/event' , { eventName : 'visit_form' } ) ;\n} , [ ] ) ;\n\nfunction handleSubmit ( e ) {\ne preventDefault ( ) ;\n// \u2705 Good: Event-specific logic is in the event handler\npost ( '/api/register' , { firstName , lastName } ) ;\n}\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Game ( ) {\nconst [ card , setCard ] useState ( null ) ;\nconst [ goldCardCount , setGoldCardCount ] useState ( 0 ) ;\nconst [ round , setRound ] useState ( 1 ) ;\nconst [ isGameOver , setIsGameOver ] useState ( false ) ;\n\n// \ud83d\udd34 Avoid: Chains of Effects that adjust the state solely to trigger each other\nuseEffect ( ( ) => {\nif ( card null card gold ) {\nsetGoldCardCount ( c => c 1 ) ;\n}\n} , [ card ] ) ;\n\nuseEffect ( ( ) => {\nif ( goldCardCount 3 ) {\nsetRound ( r => r 1 )\nsetGoldCardCount ( 0 ) ;\n}\n} , [ goldCardCount ] ) ;\n\nuseEffect ( ( ) => {\nif ( round 5 ) {\nsetIsGameOver ( true ) ;\n}\n} , [ round ] ) ;\n\nuseEffect ( ( ) => {\nalert ( 'Good game!' ) ;\n} , [ isGameOver ] ) ;\n\nfunction handlePlaceCard ( nextCard ) {\nif ( isGameOver ) {\nthrow Error ( 'Game already ended.' ) ;\n} else {\nsetCard ( nextCard ) ;\n}\n}\n\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function Game ( ) {\nconst [ card , setCard ] useState ( null ) ;\nconst [ goldCardCount , setGoldCardCount ] useState ( 0 ) ;\nconst [ round , setRound ] useState ( 1 ) ;\n\n// \u2705 Calculate what you can during rendering\nconst isGameOver round 5 ;\n\nfunction handlePlaceCard ( nextCard ) {\nif ( isGameOver ) {\nthrow Error ( 'Game already ended.' ) ;\n}\n\n// \u2705 Calculate all the next state in the event handler\nsetCard ( nextCard ) ;\nif ( nextCard gold ) {\nif ( goldCardCount 3 ) {\nsetGoldCardCount ( goldCardCount 1 ) ;\n} else {\nsetGoldCardCount ( 0 ) ;\nsetRound ( round 1 ) ;\nif ( round 5 ) {\nalert ( 'Good game!' ) ;\n}\n}\n}\n}\n\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function App ( ) {\n// \ud83d\udd34 Avoid: Effects with logic that should only ever run once\nuseEffect ( ( ) => {\nloadDataFromLocalStorage ( ) ;\ncheckAuthToken ( ) ;\n} , [ ] ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "let didInit false ;\n\nfunction App ( ) {\nuseEffect ( ( ) => {\nif ( didInit ) {\ndidInit true ;\n// \u2705 Only runs once per app load\nloadDataFromLocalStorage ( ) ;\ncheckAuthToken ( ) ;\n}\n} , [ ] ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "if ( typeof window 'undefined' ) { // Check if we're running in the browser.\n// \u2705 Only runs once per app load\ncheckAuthToken ( ) ;\nloadDataFromLocalStorage ( ) ;\n}\n\nfunction App ( ) {\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Toggle ( { onChange } ) {\nconst [ isOn , setIsOn ] useState ( false ) ;\n\n// \ud83d\udd34 Avoid: The onChange handler runs too late\nuseEffect ( ( ) => {\nonChange ( isOn ) ;\n} , [ isOn , onChange ] )\n\nfunction handleClick ( ) {\nsetIsOn ( isOn ) ;\n}\n\nfunction handleDragEnd ( e ) {\nif ( isCloserToRightEdge ( e ) ) {\nsetIsOn ( true ) ;\n} else {\nsetIsOn ( false ) ;\n}\n}\n\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Toggle ( { onChange } ) {\nconst [ isOn , setIsOn ] useState ( false ) ;\n\nfunction updateToggle ( nextIsOn ) {\n// \u2705 Good: Perform all updates during the event that caused them\nsetIsOn ( nextIsOn ) ;\nonChange ( nextIsOn ) ;\n}\n\nfunction handleClick ( ) {\nupdateToggle ( isOn ) ;\n}\n\nfunction handleDragEnd ( e ) {\nif ( isCloserToRightEdge ( e ) ) {\nupdateToggle ( true ) ;\n} else {\nupdateToggle ( false ) ;\n}\n}\n\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "// \u2705 Also good: the component is fully controlled by its parent\nfunction Toggle ( { isOn , onChange } ) {\nfunction handleClick ( ) {\nonChange ( isOn ) ;\n}\n\nfunction handleDragEnd ( e ) {\nif ( isCloserToRightEdge ( e ) ) {\nonChange ( true ) ;\n} else {\nonChange ( false ) ;\n}\n}\n\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Parent ( ) {\nconst [ data , setData ] useState ( null ) ;\n// ...\nreturn < Child onFetched { setData } /> ;\n}\n\nfunction Child ( { onFetched } ) {\nconst data useSomeAPI ( ) ;\n// \ud83d\udd34 Avoid: Passing data to the parent in an Effect\nuseEffect ( ( ) => {\nif ( data ) {\nonFetched ( data ) ;\n}\n} , [ onFetched , data ] ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Parent ( ) {\nconst data useSomeAPI ( ) ;\n// ...\n// \u2705 Good: Passing data down to the child\nreturn < Child data { data } /> ;\n}\n\nfunction Child ( { data } ) {\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function useOnlineStatus ( ) {\n// Not ideal: Manual store subscription in an Effect\nconst [ isOnline , setIsOnline ] useState ( true ) ;\nuseEffect ( ( ) => {\nfunction updateState ( ) {\nsetIsOnline ( navigator onLine ) ;\n}\n\nupdateState ( ) ;\n\nwindow addEventListener ( 'online' , updateState ) ;\nwindow addEventListener ( 'offline' , updateState ) ;\nreturn ( ) => {\nwindow removeEventListener ( 'online' , updateState ) ;\nwindow removeEventListener ( 'offline' , updateState ) ;\n} ;\n} , [ ] ) ;\nreturn isOnline ;\n}\n\nfunction ChatIndicator ( ) {\nconst isOnline useOnlineStatus ( ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function subscribe ( callback ) {\nwindow addEventListener ( 'online' , callback ) ;\nwindow addEventListener ( 'offline' , callback ) ;\nreturn ( ) => {\nwindow removeEventListener ( 'online' , callback ) ;\nwindow removeEventListener ( 'offline' , callback ) ;\n} ;\n}\n\nfunction useOnlineStatus ( ) {\n// \u2705 Good: Subscribing to an external store with a built-in Hook\nreturn useSyncExternalStore (\nsubscribe , // React won't resubscribe for as long as you pass the same function\n( ) => navigator onLine , // How to get the value on the client\n( ) => true // How to get the value on the server\n) ;\n}\n\nfunction ChatIndicator ( ) {\nconst isOnline useOnlineStatus ( ) ;\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function SearchResults ( { query } ) {\nconst [ results , setResults ] useState ( [ ] ) ;\nconst [ page , setPage ] useState ( 1 ) ;\n\nuseEffect ( ( ) => {\n// \ud83d\udd34 Avoid: Fetching without cleanup logic\nfetchResults ( query , page ) then ( json => {\nsetResults ( json ) ;\n} ) ;\n} , [ query , page ] ) ;\n\nfunction handleNextPageClick ( ) {\nsetPage ( page 1 ) ;\n}\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function SearchResults ( { query } ) {\nconst [ results , setResults ] useState ( [ ] ) ;\nconst [ page , setPage ] useState ( 1 ) ;\nuseEffect ( ( ) => {\nlet ignore false ;\nfetchResults ( query , page ) then ( json => {\nif ( ignore ) {\nsetResults ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n} , [ query , page ] ) ;\n\nfunction handleNextPageClick ( ) {\nsetPage ( page 1 ) ;\n}\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function SearchResults ( { query } ) {\nconst [ page , setPage ] useState ( 1 ) ;\nconst params new URLSearchParams ( { query , page } ) ;\nconst results useData ( `/api/search? ${ params } ` ) ;\n\nfunction handleNextPageClick ( ) {\nsetPage ( page 1 ) ;\n}\n// ...\n}\n\nfunction useData ( url ) {\nconst [ data , setData ] useState ( null ) ;\nuseEffect ( ( ) => {\nlet ignore false ;\nfetch ( url )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetData ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n} , [ url ] ) ;\nreturn data ;\n}"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/render-and-commit",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/synchronizing-with-effects#what-are-effects-and-how-are-they-different-from-events",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/start-a-new-react-project#production-grade-react-frameworks",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/choosing-the-state-structure#avoid-redundant-state",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/thinking-in-react#step-3-find-the-minimal-but-complete-representation-of-ui-state",
                        "https://en.wikipedia.org/wiki/Memoization",
                        "https://react.dev/learn/you-might-not-need-an-effect/reference/react/useMemo",
                        "https://react.dev/learn/you-might-not-need-an-effect/reference/react/useMemo",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/keeping-components-pure",
                        "https://react.dev/learn/you-might-not-need-an-effect#how-to-tell-if-a-calculation-is-expensive",
                        "https://developer.chrome.com/blog/new-in-devtools-61/#throttling",
                        "https://react.dev/learn/you-might-not-need-an-effect/reference/react/StrictMode",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/preserving-and-resetting-state#option-2-resetting-state-with-a-key",
                        "https://react.dev/learn/you-might-not-need-an-effect/reference/react/useState#storing-information-from-previous-renders",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/keeping-components-pure",
                        "https://react.dev/learn/you-might-not-need-an-effect#resetting-all-state-when-a-prop-changes",
                        "https://react.dev/learn/you-might-not-need-an-effect#updating-state-based-on-props-or-state",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/synchronizing-with-effects#sending-analytics",
                        "https://react.dev/learn/you-might-not-need-an-effect#sharing-logic-between-event-handlers",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/state-as-a-snapshot",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/queueing-a-series-of-state-updates",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/sharing-state-between-components",
                        "https://react.dev/learn/you-might-not-need-an-effect/reference/react/useSyncExternalStore",
                        "https://react.dev/learn/you-might-not-need-an-effect/reference/react/useSyncExternalStore",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/synchronizing-with-effects",
                        "https://en.wikipedia.org/wiki/Race_condition",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/synchronizing-with-effects#fetching-data",
                        "https://react.dev/learn/you-might-not-need-an-effect/learn/start-a-new-react-project#production-grade-react-frameworks",
                        "https://react.dev/learn/you-might-not-need-an-effect#recap"
                    ],
                    "subsections": [
                        {
                            "title": "Updating state based on props or state",
                            "description": "Suppose you have a component with two state variables:firstNameandlastName. You want to calculate afullNamefrom them by concatenating them. Moreover, you\u2019d likefullNameto update wheneverfirstNameorlastNamechange. Your first instinct might be to add afullNamestate variable and update it in an Effect:\nThis is more complicated than necessary. It is inefficient too: it does an entire render pass with a stale value forfullName, then immediately re-renders with the updated value. Remove the state variable and the Effect:\nWhen something can be calculated from the existing props or state,don\u2019t put it in state.Instead, calculate it during rendering.This makes your code faster (you avoid the extra \u201ccascading\u201d updates), simpler (you remove some code), and less error-prone (you avoid bugs caused by different state variables getting out of sync with each other). If this approach feels new to you,Thinking in Reactexplains what should go into state.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function Form ( ) {\nconst [ firstName , setFirstName ] useState ( 'Taylor' ) ;\nconst [ lastName , setLastName ] useState ( 'Swift' ) ;\n\n// \ud83d\udd34 Avoid: redundant state and unnecessary Effect\nconst [ fullName , setFullName ] useState ( '' ) ;\nuseEffect ( ( ) => {\nsetFullName ( firstName ' ' lastName ) ;\n} , [ firstName , lastName ] ) ;\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function Form ( ) {\nconst [ firstName , setFirstName ] useState ( 'Taylor' ) ;\nconst [ lastName , setLastName ] useState ( 'Swift' ) ;\n// \u2705 Good: calculated during rendering\nconst fullName firstName ' ' lastName ;\n// ...\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/choosing-the-state-structure#avoid-redundant-state",
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/thinking-in-react#step-3-find-the-minimal-but-complete-representation-of-ui-state"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Caching expensive calculations",
                            "description": "This component computesvisibleTodosby taking thetodosit receives by props and filtering them according to thefilterprop. You might feel tempted to store the result in state and update it from an Effect:\nLike in the earlier example, this is both unnecessary and inefficient. First, remove the state and the Effect:\nUsually, this code is fine! But maybegetFilteredTodos()is slow or you have a lot oftodos. In that case you don\u2019t want to recalculategetFilteredTodos()if some unrelated state variable likenewTodohas changed.\nYou can cache (or\u201cmemoize\u201d) an expensive calculation by wrapping it in auseMemoHook:\nOr, written as a single line:\nThis tells React that you don\u2019t want the inner function to re-run unless eithertodosorfilterhave changed.React will remember the return value ofgetFilteredTodos()during the initial render. During the next renders, it will check iftodosorfilterare different. If they\u2019re the same as last time,useMemowill return the last result it has stored. But if they are different, React will call the inner function again (and store its result).\nThe function you wrap inuseMemoruns during rendering, so this only works forpure calculations.\nIn general, unless you\u2019re creating or looping over thousands of objects, it\u2019s probably not expensive. If you want to get more confidence, you can add a console log to measure the time spent in a piece of code:\nPerform the interaction you\u2019re measuring (for example, typing into the input). You will then see logs likefilter array: 0.15msin your console. If the overall logged time adds up to a significant amount (say,1msor more), it might make sense to memoize that calculation. As an experiment, you can then wrap the calculation inuseMemoto verify whether the total logged time has decreased for that interaction or not:\nuseMemowon\u2019t make thefirstrender faster. It only helps you skip unnecessary work on updates.\nKeep in mind that your machine is probably faster than your users\u2019 so it\u2019s a good idea to test the performance with an artificial slowdown. For example, Chrome offers aCPU Throttlingoption for this.\nAlso note that measuring performance in development will not give you the most accurate results. (For example, whenStrict Modeis on, you will see each component render twice rather than once.) To get the most accurate timings, build your app for production and test it on a device like your users have.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function TodoList ( { todos , filter } ) {\nconst [ newTodo , setNewTodo ] useState ( '' ) ;\n\n// \ud83d\udd34 Avoid: redundant state and unnecessary Effect\nconst [ visibleTodos , setVisibleTodos ] useState ( [ ] ) ;\nuseEffect ( ( ) => {\nsetVisibleTodos ( getFilteredTodos ( todos , filter ) ) ;\n} , [ todos , filter ] ) ;\n\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function TodoList ( { todos , filter } ) {\nconst [ newTodo , setNewTodo ] useState ( '' ) ;\n// \u2705 This is fine if getFilteredTodos() is not slow.\nconst visibleTodos getFilteredTodos ( todos , filter ) ;\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "import { useMemo , useState } from 'react' ;\n\nfunction TodoList ( { todos , filter } ) {\nconst [ newTodo , setNewTodo ] useState ( '' ) ;\nconst visibleTodos useMemo ( ( ) => {\n// \u2705 Does not re-run unless todos or filter change\nreturn getFilteredTodos ( todos , filter ) ;\n} , [ todos , filter ] ) ;\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "import { useMemo , useState } from 'react' ;\n\nfunction TodoList ( { todos , filter } ) {\nconst [ newTodo , setNewTodo ] useState ( '' ) ;\n// \u2705 Does not re-run getFilteredTodos() unless todos or filter change\nconst visibleTodos useMemo ( ( ) => getFilteredTodos ( todos , filter ) , [ todos , filter ] ) ;\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "console time ( 'filter array' ) ;\nconst visibleTodos getFilteredTodos ( todos , filter ) ;\nconsole timeEnd ( 'filter array' ) ;\nconsole time ( 'filter array' ) ;\nconst visibleTodos useMemo ( ( ) => {\nreturn getFilteredTodos ( todos , filter ) ; // Skipped if todos and filter haven't changed\n} , [ todos , filter ] ) ;\nconsole timeEnd ( 'filter array' ) ;"
                                }
                            ],
                            "urls": [
                                "https://en.wikipedia.org/wiki/Memoization",
                                "https://react.dev/learn/you-might-not-need-an-effect/reference/react/useMemo",
                                "https://react.dev/learn/you-might-not-need-an-effect/reference/react/useMemo",
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/keeping-components-pure",
                                "https://react.dev/learn/you-might-not-need-an-effect#how-to-tell-if-a-calculation-is-expensive",
                                "https://developer.chrome.com/blog/new-in-devtools-61/#throttling",
                                "https://react.dev/learn/you-might-not-need-an-effect/reference/react/StrictMode"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Resetting all state when a prop changes",
                            "description": "ThisProfilePagecomponent receives auserIdprop. The page contains a comment input, and you use acommentstate variable to hold its value. One day, you notice a problem: when you navigate from one profile to another, thecommentstate does not get reset. As a result, it\u2019s easy to accidentally post a comment on a wrong user\u2019s profile. To fix the issue, you want to clear out thecommentstate variable whenever theuserIdchanges:\nThis is inefficient becauseProfilePageand its children will first render with the stale value, and then render again. It is also complicated because you\u2019d need to do this ineverycomponent that has some state insideProfilePage. For example, if the comment UI is nested, you\u2019d want to clear out nested comment state too.\nInstead, you can tell React that each user\u2019s profile is conceptually adifferentprofile by giving it an explicit key. Split your component in two and pass akeyattribute from the outer component to the inner one:\nNormally, React preserves the state when the same component is rendered in the same spot.By passinguserIdas akeyto theProfilecomponent, you\u2019re asking React to treat twoProfilecomponents with differentuserIdas two different components that should not share any state.Whenever the key (which you\u2019ve set touserId) changes, React will recreate the DOM andreset the stateof theProfilecomponent and all of its children. Now thecommentfield will clear out automatically when navigating between profiles.\nNote that in this example, only the outerProfilePagecomponent is exported and visible to other files in the project. Components renderingProfilePagedon\u2019t need to pass the key to it: they passuserIdas a regular prop. The factProfilePagepasses it as akeyto the innerProfilecomponent is an implementation detail.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "export default function ProfilePage ( { userId } ) {\nconst [ comment , setComment ] useState ( '' ) ;\n\n// \ud83d\udd34 Avoid: Resetting state on prop change in an Effect\nuseEffect ( ( ) => {\nsetComment ( '' ) ;\n} , [ userId ] ) ;\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "export default function ProfilePage ( { userId } ) {\nreturn (\n< Profile\nuserId { userId }\nkey { userId }\n/>\n) ;\n}\n\nfunction Profile ( { userId } ) {\n// \u2705 This and any other state below will reset on key change automatically\nconst [ comment , setComment ] useState ( '' ) ;\n// ...\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/preserving-and-resetting-state#option-2-resetting-state-with-a-key"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Adjusting some state when a prop changes",
                            "description": "Sometimes, you might want to reset or adjust a part of the state on a prop change, but not all of it.\nThisListcomponent receives a list ofitemsas a prop, and maintains the selected item in theselectionstate variable. You want to reset theselectiontonullwhenever theitemsprop receives a different array:\nThis, too, is not ideal. Every time theitemschange, theListand its child components will render with a staleselectionvalue at first. Then React will update the DOM and run the Effects. Finally, thesetSelection(null)call will cause another re-render of theListand its child components, restarting this whole process again.\nStart by deleting the Effect. Instead, adjust the state directly during rendering:\nStoring information from previous renderslike this can be hard to understand, but it\u2019s better than updating the same state in an Effect. In the above example,setSelectionis called directly during a render. React will re-render theListimmediatelyafter it exits with areturnstatement. React has not rendered theListchildren or updated the DOM yet, so this lets theListchildren skip rendering the staleselectionvalue.\nWhen you update a component during rendering, React throws away the returned JSX and immediately retries rendering. To avoid very slow cascading retries, React only lets you update thesamecomponent\u2019s state during a render. If you update another component\u2019s state during a render, you\u2019ll see an error. A condition likeitems !== prevItemsis necessary to avoid loops. You may adjust state like this, but any other side effects (like changing the DOM or setting timeouts) should stay in event handlers or Effects tokeep components pure.\nAlthough this pattern is more efficient than an Effect, most components shouldn\u2019t need it either.No matter how you do it, adjusting state based on props or other state makes your data flow more difficult to understand and debug. Always check whether you canreset all state with a keyorcalculate everything during renderinginstead. For example, instead of storing (and resetting) the selecteditem, you can store the selecteditem ID:\nNow there is no need to \u201cadjust\u201d the state at all. If the item with the selected ID is in the list, it remains selected. If it\u2019s not, theselectioncalculated during rendering will benullbecause no matching item was found. This behavior is different, but arguably better because most changes toitemspreserve the selection.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function List ( { items } ) {\nconst [ isReverse , setIsReverse ] useState ( false ) ;\nconst [ selection , setSelection ] useState ( null ) ;\n\n// \ud83d\udd34 Avoid: Adjusting state on prop change in an Effect\nuseEffect ( ( ) => {\nsetSelection ( null ) ;\n} , [ items ] ) ;\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function List ( { items } ) {\nconst [ isReverse , setIsReverse ] useState ( false ) ;\nconst [ selection , setSelection ] useState ( null ) ;\n\n// Better: Adjust the state while rendering\nconst [ prevItems , setPrevItems ] useState ( items ) ;\nif ( items prevItems ) {\nsetPrevItems ( items ) ;\nsetSelection ( null ) ;\n}\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function List ( { items } ) {\nconst [ isReverse , setIsReverse ] useState ( false ) ;\nconst [ selectedId , setSelectedId ] useState ( null ) ;\n// \u2705 Best: Calculate everything during rendering\nconst selection items find ( item => item id selectedId ) null ;\n// ...\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/you-might-not-need-an-effect/reference/react/useState#storing-information-from-previous-renders",
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/keeping-components-pure",
                                "https://react.dev/learn/you-might-not-need-an-effect#resetting-all-state-when-a-prop-changes",
                                "https://react.dev/learn/you-might-not-need-an-effect#updating-state-based-on-props-or-state"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Sharing logic between event handlers",
                            "description": "Let\u2019s say you have a product page with two buttons (Buy and Checkout) that both let you buy that product. You want to show a notification whenever the user puts the product in the cart. CallingshowNotification()in both buttons\u2019 click handlers feels repetitive so you might be tempted to place this logic in an Effect:\nThis Effect is unnecessary. It will also most likely cause bugs. For example, let\u2019s say that your app \u201cremembers\u201d the shopping cart between the page reloads. If you add a product to the cart once and refresh the page, the notification will appear again. It will keep appearing every time you refresh that product\u2019s page. This is becauseproduct.isInCartwill already betrueon the page load, so the Effect above will callshowNotification().\nWhen you\u2019re not sure whether some code should be in an Effect or in an event handler, ask yourselfwhythis code needs to run. Use Effects only for code that should runbecausethe component was displayed to the user.In this example, the notification should appear because the userpressed the button, not because the page was displayed! Delete the Effect and put the shared logic into a function called from both event handlers:\nThis both removes the unnecessary Effect and fixes the bug.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function ProductPage ( { product , addToCart } ) {\n// \ud83d\udd34 Avoid: Event-specific logic inside an Effect\nuseEffect ( ( ) => {\nif ( product isInCart ) {\nshowNotification ( `Added  ${ product name }  to the shopping cart!` ) ;\n}\n} , [ product ] ) ;\n\nfunction handleBuyClick ( ) {\naddToCart ( product ) ;\n}\n\nfunction handleCheckoutClick ( ) {\naddToCart ( product ) ;\nnavigateTo ( '/checkout' ) ;\n}\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function ProductPage ( { product , addToCart } ) {\n// \u2705 Good: Event-specific logic is called from event handlers\nfunction buyProduct ( ) {\naddToCart ( product ) ;\nshowNotification ( `Added  ${ product name }  to the shopping cart!` ) ;\n}\n\nfunction handleBuyClick ( ) {\nbuyProduct ( ) ;\n}\n\nfunction handleCheckoutClick ( ) {\nbuyProduct ( ) ;\nnavigateTo ( '/checkout' ) ;\n}\n// ...\n}"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Sending a POST request",
                            "description": "ThisFormcomponent sends two kinds of POST requests. It sends an analytics event when it mounts. When you fill in the form and click the Submit button, it will send a POST request to the/api/registerendpoint:\nLet\u2019s apply the same criteria as in the example before.\nThe analytics POST request should remain in an Effect. This is because thereasonto send the analytics event is that the form was displayed. (It would fire twice in development, butsee herefor how to deal with that.)\nHowever, the/api/registerPOST request is not caused by the form beingdisplayed. You only want to send the request at one specific moment in time: when the user presses the button. It should only ever happenon that particular interaction. Delete the second Effect and move that POST request into the event handler:\nWhen you choose whether to put some logic into an event handler or an Effect, the main question you need to answer iswhat kind of logicit is from the user\u2019s perspective. If this logic is caused by a particular interaction, keep it in the event handler. If it\u2019s caused by the userseeingthe component on the screen, keep it in the Effect.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function Form ( ) {\nconst [ firstName , setFirstName ] useState ( '' ) ;\nconst [ lastName , setLastName ] useState ( '' ) ;\n\n// \u2705 Good: This logic should run because the component was displayed\nuseEffect ( ( ) => {\npost ( '/analytics/event' , { eventName : 'visit_form' } ) ;\n} , [ ] ) ;\n\n// \ud83d\udd34 Avoid: Event-specific logic inside an Effect\nconst [ jsonToSubmit , setJsonToSubmit ] useState ( null ) ;\nuseEffect ( ( ) => {\nif ( jsonToSubmit null ) {\npost ( '/api/register' , jsonToSubmit ) ;\n}\n} , [ jsonToSubmit ] ) ;\n\nfunction handleSubmit ( e ) {\ne preventDefault ( ) ;\nsetJsonToSubmit ( { firstName , lastName } ) ;\n}\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function Form ( ) {\nconst [ firstName , setFirstName ] useState ( '' ) ;\nconst [ lastName , setLastName ] useState ( '' ) ;\n\n// \u2705 Good: This logic runs because the component was displayed\nuseEffect ( ( ) => {\npost ( '/analytics/event' , { eventName : 'visit_form' } ) ;\n} , [ ] ) ;\n\nfunction handleSubmit ( e ) {\ne preventDefault ( ) ;\n// \u2705 Good: Event-specific logic is in the event handler\npost ( '/api/register' , { firstName , lastName } ) ;\n}\n// ...\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/synchronizing-with-effects#sending-analytics"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Chains of computations",
                            "description": "Sometimes you might feel tempted to chain Effects that each adjust a piece of state based on other state:\nThere are two problems with this code.\nThe first problem is that it is very inefficient: the component (and its children) have to re-render between eachsetcall in the chain. In the example above, in the worst case (setCard\u2192 render \u2192setGoldCardCount\u2192 render \u2192setRound\u2192 render \u2192setIsGameOver\u2192 render) there are three unnecessary re-renders of the tree below.\nThe second problem is that even if it weren\u2019t slow, as your code evolves, you will run into cases where the \u201cchain\u201d you wrote doesn\u2019t fit the new requirements. Imagine you are adding a way to step through the history of the game moves. You\u2019d do it by updating each state variable to a value from the past. However, setting thecardstate to a value from the past would trigger the Effect chain again and change the data you\u2019re showing. Such code is often rigid and fragile.\nIn this case, it\u2019s better to calculate what you can during rendering, and adjust the state in the event handler:\nThis is a lot more efficient. Also, if you implement a way to view game history, now you will be able to set each state variable to a move from the past without triggering the Effect chain that adjusts every other value. If you need to reuse logic between several event handlers, you canextract a functionand call it from those handlers.\nRemember that inside event handlers,state behaves like a snapshot.For example, even after you callsetRound(round + 1), theroundvariable will reflect the value at the time the user clicked the button. If you need to use the next value for calculations, define it manually likeconst nextRound = round + 1.\nIn some cases, youcan\u2019tcalculate the next state directly in the event handler. For example, imagine a form with multiple dropdowns where the options of the next dropdown depend on the selected value of the previous dropdown. Then, a chain of Effects is appropriate because you are synchronizing with network.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function Game ( ) {\nconst [ card , setCard ] useState ( null ) ;\nconst [ goldCardCount , setGoldCardCount ] useState ( 0 ) ;\nconst [ round , setRound ] useState ( 1 ) ;\nconst [ isGameOver , setIsGameOver ] useState ( false ) ;\n\n// \ud83d\udd34 Avoid: Chains of Effects that adjust the state solely to trigger each other\nuseEffect ( ( ) => {\nif ( card null card gold ) {\nsetGoldCardCount ( c => c 1 ) ;\n}\n} , [ card ] ) ;\n\nuseEffect ( ( ) => {\nif ( goldCardCount 3 ) {\nsetRound ( r => r 1 )\nsetGoldCardCount ( 0 ) ;\n}\n} , [ goldCardCount ] ) ;\n\nuseEffect ( ( ) => {\nif ( round 5 ) {\nsetIsGameOver ( true ) ;\n}\n} , [ round ] ) ;\n\nuseEffect ( ( ) => {\nalert ( 'Good game!' ) ;\n} , [ isGameOver ] ) ;\n\nfunction handlePlaceCard ( nextCard ) {\nif ( isGameOver ) {\nthrow Error ( 'Game already ended.' ) ;\n} else {\nsetCard ( nextCard ) ;\n}\n}\n\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "function Game ( ) {\nconst [ card , setCard ] useState ( null ) ;\nconst [ goldCardCount , setGoldCardCount ] useState ( 0 ) ;\nconst [ round , setRound ] useState ( 1 ) ;\n\n// \u2705 Calculate what you can during rendering\nconst isGameOver round 5 ;\n\nfunction handlePlaceCard ( nextCard ) {\nif ( isGameOver ) {\nthrow Error ( 'Game already ended.' ) ;\n}\n\n// \u2705 Calculate all the next state in the event handler\nsetCard ( nextCard ) ;\nif ( nextCard gold ) {\nif ( goldCardCount 3 ) {\nsetGoldCardCount ( goldCardCount 1 ) ;\n} else {\nsetGoldCardCount ( 0 ) ;\nsetRound ( round 1 ) ;\nif ( round 5 ) {\nalert ( 'Good game!' ) ;\n}\n}\n}\n}\n\n// ..."
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/you-might-not-need-an-effect#sharing-logic-between-event-handlers",
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/state-as-a-snapshot"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Initializing the application",
                            "description": "Some logic should only run once when the app loads.\nYou might be tempted to place it in an Effect in the top-level component:\nHowever, you\u2019ll quickly discover that itruns twice in development.This can cause issues\u2014for example, maybe it invalidates the authentication token because the function wasn\u2019t designed to be called twice. In general, your components should be resilient to being remounted. This includes your top-levelAppcomponent.\nAlthough it may not ever get remounted in practice in production, following the same constraints in all components makes it easier to move and reuse code. If some logic must runonce per app loadrather thanonce per component mount, add a top-level variable to track whether it has already executed:\nYou can also run it during module initialization and before the app renders:\nCode at the top level runs once when your component is imported\u2014even if it doesn\u2019t end up being rendered. To avoid slowdown or surprising behavior when importing arbitrary components, don\u2019t overuse this pattern. Keep app-wide initialization logic to root component modules likeApp.jsor in your application\u2019s entry point.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function App ( ) {\n// \ud83d\udd34 Avoid: Effects with logic that should only ever run once\nuseEffect ( ( ) => {\nloadDataFromLocalStorage ( ) ;\ncheckAuthToken ( ) ;\n} , [ ] ) ;\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "let didInit false ;\n\nfunction App ( ) {\nuseEffect ( ( ) => {\nif ( didInit ) {\ndidInit true ;\n// \u2705 Only runs once per app load\nloadDataFromLocalStorage ( ) ;\ncheckAuthToken ( ) ;\n}\n} , [ ] ) ;\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "if ( typeof window 'undefined' ) { // Check if we're running in the browser.\n// \u2705 Only runs once per app load\ncheckAuthToken ( ) ;\nloadDataFromLocalStorage ( ) ;\n}\n\nfunction App ( ) {\n// ...\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Notifying parent components about state changes",
                            "description": "Let\u2019s say you\u2019re writing aTogglecomponent with an internalisOnstate which can be eithertrueorfalse. There are a few different ways to toggle it (by clicking or dragging). You want to notify the parent component whenever theToggleinternal state changes, so you expose anonChangeevent and call it from an Effect:\nLike earlier, this is not ideal. TheToggleupdates its state first, and React updates the screen. Then React runs the Effect, which calls theonChangefunction passed from a parent component. Now the parent component will update its own state, starting another render pass. It would be better to do everything in a single pass.\nDelete the Effect and instead update the state ofbothcomponents within the same event handler:\nWith this approach, both theTogglecomponent and its parent component update their state during the event. Reactbatches updatesfrom different components together, so there will only be one render pass.\nYou might also be able to remove the state altogether, and instead receiveisOnfrom the parent component:\n\u201cLifting state up\u201dlets the parent component fully control theToggleby toggling the parent\u2019s own state. This means the parent component will have to contain more logic, but there will be less state overall to worry about. Whenever you try to keep two different state variables synchronized, try lifting state up instead!",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function Toggle ( { onChange } ) {\nconst [ isOn , setIsOn ] useState ( false ) ;\n\n// \ud83d\udd34 Avoid: The onChange handler runs too late\nuseEffect ( ( ) => {\nonChange ( isOn ) ;\n} , [ isOn , onChange ] )\n\nfunction handleClick ( ) {\nsetIsOn ( isOn ) ;\n}\n\nfunction handleDragEnd ( e ) {\nif ( isCloserToRightEdge ( e ) ) {\nsetIsOn ( true ) ;\n} else {\nsetIsOn ( false ) ;\n}\n}\n\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function Toggle ( { onChange } ) {\nconst [ isOn , setIsOn ] useState ( false ) ;\n\nfunction updateToggle ( nextIsOn ) {\n// \u2705 Good: Perform all updates during the event that caused them\nsetIsOn ( nextIsOn ) ;\nonChange ( nextIsOn ) ;\n}\n\nfunction handleClick ( ) {\nupdateToggle ( isOn ) ;\n}\n\nfunction handleDragEnd ( e ) {\nif ( isCloserToRightEdge ( e ) ) {\nupdateToggle ( true ) ;\n} else {\nupdateToggle ( false ) ;\n}\n}\n\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "// \u2705 Also good: the component is fully controlled by its parent\nfunction Toggle ( { isOn , onChange } ) {\nfunction handleClick ( ) {\nonChange ( isOn ) ;\n}\n\nfunction handleDragEnd ( e ) {\nif ( isCloserToRightEdge ( e ) ) {\nonChange ( true ) ;\n} else {\nonChange ( false ) ;\n}\n}\n\n// ...\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/queueing-a-series-of-state-updates",
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/sharing-state-between-components"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Passing data to the parent",
                            "description": "ThisChildcomponent fetches some data and then passes it to theParentcomponent in an Effect:\nIn React, data flows from the parent components to their children. When you see something wrong on the screen, you can trace where the information comes from by going up the component chain until you find which component passes the wrong prop or has the wrong state. When child components update the state of their parent components in Effects, the data flow becomes very difficult to trace. Since both the child and the parent need the same data, let the parent component fetch that data, andpass it downto the child instead:\nThis is simpler and keeps the data flow predictable: the data flows down from the parent to the child.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function Parent ( ) {\nconst [ data , setData ] useState ( null ) ;\n// ...\nreturn < Child onFetched { setData } /> ;\n}\n\nfunction Child ( { onFetched } ) {\nconst data useSomeAPI ( ) ;\n// \ud83d\udd34 Avoid: Passing data to the parent in an Effect\nuseEffect ( ( ) => {\nif ( data ) {\nonFetched ( data ) ;\n}\n} , [ onFetched , data ] ) ;\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function Parent ( ) {\nconst data useSomeAPI ( ) ;\n// ...\n// \u2705 Good: Passing data down to the child\nreturn < Child data { data } /> ;\n}\n\nfunction Child ( { data } ) {\n// ...\n}"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Subscribing to an external store",
                            "description": "Sometimes, your components may need to subscribe to some data outside of the React state. This data could be from a third-party library or a built-in browser API. Since this data can change without React\u2019s knowledge, you need to manually subscribe your components to it. This is often done with an Effect, for example:\nHere, the component subscribes to an external data store (in this case, the browsernavigator.onLineAPI). Since this API does not exist on the server (so it can\u2019t be used for the initial HTML), initially the state is set totrue. Whenever the value of that data store changes in the browser, the component updates its state.\nAlthough it\u2019s common to use Effects for this, React has a purpose-built Hook for subscribing to an external store that is preferred instead. Delete the Effect and replace it with a call touseSyncExternalStore:\nThis approach is less error-prone than manually syncing mutable data to React state with an Effect. Typically, you\u2019ll write a custom Hook likeuseOnlineStatus()above so that you don\u2019t need to repeat this code in the individual components.Read more about subscribing to external stores from React components.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function useOnlineStatus ( ) {\n// Not ideal: Manual store subscription in an Effect\nconst [ isOnline , setIsOnline ] useState ( true ) ;\nuseEffect ( ( ) => {\nfunction updateState ( ) {\nsetIsOnline ( navigator onLine ) ;\n}\n\nupdateState ( ) ;\n\nwindow addEventListener ( 'online' , updateState ) ;\nwindow addEventListener ( 'offline' , updateState ) ;\nreturn ( ) => {\nwindow removeEventListener ( 'online' , updateState ) ;\nwindow removeEventListener ( 'offline' , updateState ) ;\n} ;\n} , [ ] ) ;\nreturn isOnline ;\n}\n\nfunction ChatIndicator ( ) {\nconst isOnline useOnlineStatus ( ) ;\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function subscribe ( callback ) {\nwindow addEventListener ( 'online' , callback ) ;\nwindow addEventListener ( 'offline' , callback ) ;\nreturn ( ) => {\nwindow removeEventListener ( 'online' , callback ) ;\nwindow removeEventListener ( 'offline' , callback ) ;\n} ;\n}\n\nfunction useOnlineStatus ( ) {\n// \u2705 Good: Subscribing to an external store with a built-in Hook\nreturn useSyncExternalStore (\nsubscribe , // React won't resubscribe for as long as you pass the same function\n( ) => navigator onLine , // How to get the value on the client\n( ) => true // How to get the value on the server\n) ;\n}\n\nfunction ChatIndicator ( ) {\nconst isOnline useOnlineStatus ( ) ;\n// ...\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/you-might-not-need-an-effect/reference/react/useSyncExternalStore",
                                "https://react.dev/learn/you-might-not-need-an-effect/reference/react/useSyncExternalStore"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Fetching data",
                            "description": "Many apps use Effects to kick off data fetching. It is quite common to write a data fetching Effect like this:\nYoudon\u2019tneed to move this fetch to an event handler.\nThis might seem like a contradiction with the earlier examples where you needed to put the logic into the event handlers! However, consider that it\u2019s notthe typing eventthat\u2019s the main reason to fetch. Search inputs are often prepopulated from the URL, and the user might navigate Back and Forward without touching the input.\nIt doesn\u2019t matter wherepageandquerycome from. While this component is visible, you want to keepresultssynchronizedwith data from the network for the currentpageandquery. This is why it\u2019s an Effect.\nHowever, the code above has a bug. Imagine you type\"hello\"fast. Then thequerywill change from\"h\", to\"he\",\"hel\",\"hell\", and\"hello\". This will kick off separate fetches, but there is no guarantee about which order the responses will arrive in. For example, the\"hell\"response may arriveafterthe\"hello\"response. Since it will callsetResults()last, you will be displaying the wrong search results. This is called a\u201crace condition\u201d: two different requests \u201craced\u201d against each other and came in a different order than you expected.\nTo fix the race condition, you need toadd a cleanup functionto ignore stale responses:\nThis ensures that when your Effect fetches data, all responses except the last requested one will be ignored.\nHandling race conditions is not the only difficulty with implementing data fetching. You might also want to think about caching responses (so that the user can click Back and see the previous screen instantly), how to fetch data on the server (so that the initial server-rendered HTML contains the fetched content instead of a spinner), and how to avoid network waterfalls (so that a child can fetch data without waiting for every parent).\nThese issues apply to any UI library, not just React. Solving them is not trivial, which is why modernframeworksprovide more efficient built-in data fetching mechanisms than fetching data in Effects.\nIf you don\u2019t use a framework (and don\u2019t want to build your own) but would like to make data fetching from Effects more ergonomic, consider extracting your fetching logic into a custom Hook like in this example:\nYou\u2019ll likely also want to add some logic for error handling and to track whether the content is loading. You can build a Hook like this yourself or use one of the many solutions already available in the React ecosystem.Although this alone won\u2019t be as efficient as using a framework\u2019s built-in data fetching mechanism, moving the data fetching logic into a custom Hook will make it easier to adopt an efficient data fetching strategy later.\nIn general, whenever you have to resort to writing Effects, keep an eye out for when you can extract a piece of functionality into a custom Hook with a more declarative and purpose-built API likeuseDataabove. The fewer rawuseEffectcalls you have in your components, the easier you will find to maintain your application.\nIf you can calculate something during render, you don\u2019t need an Effect.To cache expensive calculations, adduseMemoinstead ofuseEffect.To reset the state of an entire component tree, pass a differentkeyto it.To reset a particular bit of state in response to a prop change, set it during rendering.Code that runs because a component wasdisplayedshould be in Effects, the rest should be in events.If you need to update the state of several components, it\u2019s better to do it during a single event.Whenever you try to synchronize state variables in different components, consider lifting state up.You can fetch data with Effects, but you need to implement cleanup to avoid race conditions.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function SearchResults ( { query } ) {\nconst [ results , setResults ] useState ( [ ] ) ;\nconst [ page , setPage ] useState ( 1 ) ;\n\nuseEffect ( ( ) => {\n// \ud83d\udd34 Avoid: Fetching without cleanup logic\nfetchResults ( query , page ) then ( json => {\nsetResults ( json ) ;\n} ) ;\n} , [ query , page ] ) ;\n\nfunction handleNextPageClick ( ) {\nsetPage ( page 1 ) ;\n}\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function SearchResults ( { query } ) {\nconst [ results , setResults ] useState ( [ ] ) ;\nconst [ page , setPage ] useState ( 1 ) ;\nuseEffect ( ( ) => {\nlet ignore false ;\nfetchResults ( query , page ) then ( json => {\nif ( ignore ) {\nsetResults ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n} , [ query , page ] ) ;\n\nfunction handleNextPageClick ( ) {\nsetPage ( page 1 ) ;\n}\n// ...\n}"
                                },
                                {
                                    "language": "javascript",
                                    "code": "function SearchResults ( { query } ) {\nconst [ page , setPage ] useState ( 1 ) ;\nconst params new URLSearchParams ( { query , page } ) ;\nconst results useData ( `/api/search? ${ params } ` ) ;\n\nfunction handleNextPageClick ( ) {\nsetPage ( page 1 ) ;\n}\n// ...\n}\n\nfunction useData ( url ) {\nconst [ data , setData ] useState ( null ) ;\nuseEffect ( ( ) => {\nlet ignore false ;\nfetch ( url )\nthen ( response => response json ( ) )\nthen ( json => {\nif ( ignore ) {\nsetData ( json ) ;\n}\n} ) ;\nreturn ( ) => {\nignore true ;\n} ;\n} , [ url ] ) ;\nreturn data ;\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/synchronizing-with-effects",
                                "https://en.wikipedia.org/wiki/Race_condition",
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/synchronizing-with-effects#fetching-data",
                                "https://react.dev/learn/you-might-not-need-an-effect/learn/start-a-new-react-project#production-grade-react-frameworks",
                                "https://react.dev/learn/you-might-not-need-an-effect#recap"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Recap",
                    "description": "If you can calculate something during render, you don\u2019t need an Effect.To cache expensive calculations, adduseMemoinstead ofuseEffect.To reset the state of an entire component tree, pass a differentkeyto it.To reset a particular bit of state in response to a prop change, set it during rendering.Code that runs because a component wasdisplayedshould be in Effects, the rest should be in events.If you need to update the state of several components, it\u2019s better to do it during a single event.Whenever you try to synchronize state variables in different components, consider lifting state up.You can fetch data with Effects, but you need to implement cleanup to avoid race conditions.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewHow to remove unnecessary EffectsUpdating state based on props or stateCaching expensive calculationsResetting all state when a prop changesAdjusting some state when a prop changesSharing logic between event handlersSending a POST requestChains of computationsInitializing the applicationNotifying parent components about state changesPassing data to the parentSubscribing to an external storeFetching dataRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/you-might-not-need-an-effect#",
                        "https://react.dev/learn/you-might-not-need-an-effect#how-to-remove-unnecessary-effects",
                        "https://react.dev/learn/you-might-not-need-an-effect#updating-state-based-on-props-or-state",
                        "https://react.dev/learn/you-might-not-need-an-effect#caching-expensive-calculations",
                        "https://react.dev/learn/you-might-not-need-an-effect#resetting-all-state-when-a-prop-changes",
                        "https://react.dev/learn/you-might-not-need-an-effect#adjusting-some-state-when-a-prop-changes",
                        "https://react.dev/learn/you-might-not-need-an-effect#sharing-logic-between-event-handlers",
                        "https://react.dev/learn/you-might-not-need-an-effect#sending-a-post-request",
                        "https://react.dev/learn/you-might-not-need-an-effect#chains-of-computations",
                        "https://react.dev/learn/you-might-not-need-an-effect#initializing-the-application",
                        "https://react.dev/learn/you-might-not-need-an-effect#notifying-parent-components-about-state-changes",
                        "https://react.dev/learn/you-might-not-need-an-effect#passing-data-to-the-parent",
                        "https://react.dev/learn/you-might-not-need-an-effect#subscribing-to-an-external-store",
                        "https://react.dev/learn/you-might-not-need-an-effect#fetching-data",
                        "https://react.dev/learn/you-might-not-need-an-effect#recap",
                        "https://react.dev/learn/you-might-not-need-an-effect#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "JavaScript in JSX with Curly Braces \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces",
        "sections": {
            "summary": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to open a window to JavaScript.\nHow to pass strings with quotesHow to reference a JavaScript variable inside JSX with curly bracesHow to call a JavaScript function inside JSX with curly bracesHow to use a JavaScript object inside JSX with curly braces",
            "content": [
                {
                    "title": "Passing strings with quotes",
                    "description": "When you want to pass a string attribute to JSX, you put it in single or double quotes:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Using curly braces: A window into the JavaScript world",
                    "description": "JSX is a special way of writing JavaScript. That means it\u2019s possible to use JavaScript inside it\u2014with curly braces{ }. The example below first declares a name for the scientist,name, then embeds it with curly braces inside the<h1>:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Using \u201cdouble curlies\u201d: CSS and other objects in JSX",
                    "description": "In addition to strings, numbers, and other JavaScript expressions, you can even pass objects in JSX. Objects are also denoted with curly braces, like{ name: \"Hedy Lamarr\", inventions: 5 }. Therefore, to pass a JS object in JSX, you must wrap the object in another pair of curly braces:person={{ name: \"Hedy Lamarr\", inventions: 5 }}.\nYou may see this with inline CSS styles in JSX. React does not require you to use inline styles (CSS classes work great for most cases). But when you need an inline style, you pass an object to thestyleattribute:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "More fun with JavaScript objects and curly braces",
                    "description": "You can move several expressions into one object, and reference them in your JSX inside curly braces:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Now you know almost everything about JSX:\nJSX attributes inside quotes are passed as strings.Curly braces let you bring JavaScript logic and variables into your markup.They work inside the JSX tag content or immediately after=in attributes.{{and}}is not special syntax: it\u2019s a JavaScript object tucked inside JSX curly braces.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewPassing strings with quotesUsing curly braces: A window into the JavaScript worldWhere to use curly bracesUsing \u201cdouble curlies\u201d: CSS and other objects in JSXMore fun with JavaScript objects and curly bracesRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/javascript-in-jsx-with-curly-braces#",
                        "https://react.dev/learn/javascript-in-jsx-with-curly-braces#passing-strings-with-quotes",
                        "https://react.dev/learn/javascript-in-jsx-with-curly-braces#using-curly-braces-a-window-into-the-javascript-world",
                        "https://react.dev/learn/javascript-in-jsx-with-curly-braces#where-to-use-curly-braces",
                        "https://react.dev/learn/javascript-in-jsx-with-curly-braces#using-double-curlies-css-and-other-objects-in-jsx",
                        "https://react.dev/learn/javascript-in-jsx-with-curly-braces#more-fun-with-javascript-objects-and-curly-braces",
                        "https://react.dev/learn/javascript-in-jsx-with-curly-braces#recap",
                        "https://react.dev/learn/javascript-in-jsx-with-curly-braces#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Updating Objects in State \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/updating-objects-in-state",
        "sections": {
            "summary": "State can hold any kind of JavaScript value, including objects. But you shouldn\u2019t change objects that you hold in the React state directly. Instead, when you want to update an object, you need to create a new one (or make a copy of an existing one), and then set the state to use that copy.\nHow to correctly update an object in React stateHow to update a nested object without mutating itWhat immutability is, and how not to break itHow to make object copying less repetitive with Immer",
            "content": [
                {
                    "title": "What\u2019s a mutation?",
                    "description": "You can store any kind of JavaScript value in state.\nSo far you\u2019ve been working with numbers, strings, and booleans. These kinds of JavaScript values are \u201cimmutable\u201d, meaning unchangeable or \u201cread-only\u201d. You can trigger a re-render toreplacea value:\nThexstate changed from0to5, but thenumber0itselfdid not change. It\u2019s not possible to make any changes to the built-in primitive values like numbers, strings, and booleans in JavaScript.\nNow consider an object in state:\nTechnically, it is possible to change the contents ofthe object itself.This is called a mutation:\nHowever, although objects in React state are technically mutable, you should treat themas ifthey were immutable\u2014like numbers, booleans, and strings. Instead of mutating them, you should always replace them.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const [ x , setX ] useState ( 0 ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "setX ( 5 ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "const [ position , setPosition ] useState ( { x : 0 , y : 0 } ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "position x 5 ;"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Treat state as read-only",
                    "description": "In other words, you shouldtreat any JavaScript object that you put into state as read-only.\nThis example holds an object in state to represent the current pointer position. The red dot is supposed to move when you touch or move the cursor over the preview area. But the dot stays in the initial position:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Copying objects with the spread syntax",
                    "description": "In the previous example, thepositionobject is always created fresh from the current cursor position. But often, you will want to includeexistingdata as a part of the new object you\u2019re creating. For example, you may want to updateonly onefield in a form, but keep the previous values for all other fields.\nThese input fields don\u2019t work because theonChangehandlers mutate the state:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Updating a nested object",
                    "description": "Consider a nested object structure like this:\nIf you wanted to updateperson.artwork.city, it\u2019s clear how to do it with mutation:\nBut in React, you treat state as immutable! In order to changecity, you would first need to produce the newartworkobject (pre-populated with data from the previous one), and then produce the newpersonobject which points at the newartwork:\nOr, written as a single function call:\nThis gets a bit wordy, but it works fine for many cases:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const [ person , setPerson ] useState ( {\nname : 'Niki de Saint Phalle' ,\nartwork : {\ntitle : 'Blue Nana' ,\ncity : 'Hamburg' ,\nimage : 'https://i.imgur.com/Sd1AgUOm.jpg' ,\n}\n} ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "person artwork city 'New Delhi' ;"
                        },
                        {
                            "language": "javascript",
                            "code": "const nextArtwork { ... person artwork , city : 'New Delhi' } ;\nconst nextPerson { ... person , artwork : nextArtwork } ;\nsetPerson ( nextPerson ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "setPerson ( {\n... person , // Copy other fields\nartwork : { // but replace the artwork\n... person artwork , // with the same one\ncity : 'New Delhi' // but in New Delhi!\n}\n} ) ;"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Treat all state in React as immutable.When you store objects in state, mutating them will not trigger renders and will change the state in previous render \u201csnapshots\u201d.Instead of mutating an object, create anewversion of it, and trigger a re-render by setting state to it.You can use the{...obj, something: 'newValue'}object spread syntax to create copies of objects.Spread syntax is shallow: it only copies one level deep.To update a nested object, you need to create copies all the way up from the place you\u2019re updating.To reduce repetitive copying code, use Immer.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewWhat\u2019s a mutation?Treat state as read-onlyCopying objects with the spread syntaxUpdating a nested objectWrite concise update logic with ImmerRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/updating-objects-in-state#",
                        "https://react.dev/learn/updating-objects-in-state#whats-a-mutation",
                        "https://react.dev/learn/updating-objects-in-state#treat-state-as-read-only",
                        "https://react.dev/learn/updating-objects-in-state#copying-objects-with-the-spread-syntax",
                        "https://react.dev/learn/updating-objects-in-state#updating-a-nested-object",
                        "https://react.dev/learn/updating-objects-in-state#write-concise-update-logic-with-immer",
                        "https://react.dev/learn/updating-objects-in-state#recap",
                        "https://react.dev/learn/updating-objects-in-state#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Describing the UI \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/describing-the-ui",
        "sections": {
            "summary": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestablecomponents.From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you\u2019ll learn to create, customize, and conditionally display React components.\nHow to write your first React componentWhen and how to create multi-component filesHow to add markup to JavaScript with JSXHow to use curly braces with JSX to access JavaScript functionality from your componentsHow to configure components with propsHow to conditionally render componentsHow to render multiple components at a timeHow to avoid confusing bugs by keeping components pureWhy understanding your UI as trees is useful",
            "content": [
                {
                    "title": "Your first component",
                    "description": "React applications are built from isolated pieces of UI calledcomponents. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is aGallerycomponent rendering threeProfilecomponents:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadYour First Componentto learn how to declare and use React components.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/describing-the-ui/learn/your-first-component"
                    ],
                    "subsections": []
                },
                {
                    "title": "Importing and exporting components",
                    "description": "You can declare many components in one file, but large files can get difficult to navigate. To solve this, you canexporta component into its own file, and thenimportthat component from another file:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadImporting and Exporting Componentsto learn how to split components into their own files.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/describing-the-ui/learn/importing-and-exporting-components"
                    ],
                    "subsections": []
                },
                {
                    "title": "Writing markup with JSX",
                    "description": "Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.\nIf we paste existing HTML markup into a React component, it won\u2019t always work:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadWriting Markup with JSXto learn how to write valid JSX.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/describing-the-ui/learn/writing-markup-with-jsx"
                    ],
                    "subsections": []
                },
                {
                    "title": "JavaScript in JSX with curly braces",
                    "description": "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to \u201copen a window\u201d to JavaScript:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadJavaScript in JSX with Curly Bracesto learn how to access JavaScript data from JSX.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/describing-the-ui/learn/javascript-in-jsx-with-curly-braces"
                    ],
                    "subsections": []
                },
                {
                    "title": "Passing props to a component",
                    "description": "React components usepropsto communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadPassing Props to a Componentto learn how to pass and read props.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/describing-the-ui/learn/passing-props-to-a-component"
                    ],
                    "subsections": []
                },
                {
                    "title": "Conditional rendering",
                    "description": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax likeifstatements,&&, and? :operators.\nIn this example, the JavaScript&&operator is used to conditionally render a checkmark:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadConditional Renderingto learn the different ways to render content conditionally.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/describing-the-ui/learn/conditional-rendering"
                    ],
                    "subsections": []
                },
                {
                    "title": "Rendering lists",
                    "description": "You will often want to display multiple similar components from a collection of data. You can use JavaScript\u2019sfilter()andmap()with React to filter and transform your array of data into an array of components.\nFor each array item, you will need to specify akey. Usually, you will want to use an ID from the database as akey. Keys let React keep track of each item\u2019s place in the list even if the list changes.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadRendering Liststo learn how to render a list of components, and how to choose a key.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/describing-the-ui/learn/rendering-lists"
                    ],
                    "subsections": []
                },
                {
                    "title": "Keeping components pure",
                    "description": "Some JavaScript functions arepure.A pure function:\nMinds its own business.It does not change any objects or variables that existed before it was called.Same inputs, same output.Given the same inputs, a pure function should always return the same result.\nBy strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadKeeping Components Pureto learn how to write components as pure, predictable functions.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/describing-the-ui/learn/keeping-components-pure"
                    ],
                    "subsections": []
                },
                {
                    "title": "Your UI as a tree",
                    "description": "React uses trees to model the relationships between components and modules.\nA React render tree is a representation of the parent and child relationship between components.\nAn example React render tree.\nComponents near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.\nModelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.\nAn example module dependency tree.\nA dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.\nReadYour UI as a Treeto learn how to create a render and module dependency trees for a React app and how they\u2019re useful mental models for improving user experience and performance.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/describing-the-ui/learn/understanding-your-ui-as-a-tree",
                        "https://react.dev/learn/describing-the-ui/learn/understanding-your-ui-as-a-tree"
                    ],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadYour UI as a Treeto learn how to create a render and module dependency trees for a React app and how they\u2019re useful mental models for improving user experience and performance.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/describing-the-ui/learn/understanding-your-ui-as-a-tree"
                    ],
                    "subsections": []
                },
                {
                    "title": "What\u2019s next?",
                    "description": "Head over toYour First Componentto start reading this chapter page by page!\nOr, if you\u2019re already familiar with these topics, why not read aboutAdding Interactivity?",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/describing-the-ui/learn/your-first-component",
                        "https://react.dev/learn/describing-the-ui/learn/adding-interactivity"
                    ],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewYour first componentImporting and exporting componentsWriting markup with JSXJavaScript in JSX with curly bracesPassing props to a componentConditional renderingRendering listsKeeping components pureYour UI as a treeWhat\u2019s next?",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/describing-the-ui#",
                        "https://react.dev/learn/describing-the-ui#your-first-component",
                        "https://react.dev/learn/describing-the-ui#importing-and-exporting-components",
                        "https://react.dev/learn/describing-the-ui#writing-markup-with-jsx",
                        "https://react.dev/learn/describing-the-ui#javascript-in-jsx-with-curly-braces",
                        "https://react.dev/learn/describing-the-ui#passing-props-to-a-component",
                        "https://react.dev/learn/describing-the-ui#conditional-rendering",
                        "https://react.dev/learn/describing-the-ui#rendering-lists",
                        "https://react.dev/learn/describing-the-ui#keeping-components-pure",
                        "https://react.dev/learn/describing-the-ui#your-ui-as-a-tree",
                        "https://react.dev/learn/describing-the-ui#whats-next"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Separating Events from Effects \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/separating-events-from-effects",
        "sections": {
            "summary": "Event handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if some value they read, like a prop or a state variable, is different from what it was during the last render. Sometimes, you also want a mix of both behaviors: an Effect that re-runs in response to some values but not others. This page will teach you how to do that.\nHow to choose between an event handler and an EffectWhy Effects are reactive, and event handlers are notWhat to do when you want a part of your Effect\u2019s code to not be reactiveWhat Effect Events are, and how to extract them from your EffectsHow to read the latest props and state from Effects using Effect Events",
            "content": [
                {
                    "title": "Choosing between event handlers and Effects",
                    "description": "First, let\u2019s recap the difference between event handlers and Effects.\nImagine you\u2019re implementing a chat room component. Your requirements look like this:\nYour component should automatically connect to the selected chat room.When you click the \u201cSend\u201d button, it should send a message to the chat.\nLet\u2019s say you\u2019ve already implemented the code for them, but you\u2019re not sure where to put it. Should you use event handlers or Effects? Every time you need to answer this question, considerwhythe code needs to run.\nFrom the user\u2019s perspective, sending a message should happenbecausethe particular \u201cSend\u201d button was clicked. The user will get rather upset if you send their message at any other time or for any other reason. This is why sending a message should be an event handler. Event handlers let you handle specific interactions:\nWith an event handler, you can be sure thatsendMessage(message)willonlyrun if the user presses the button.\nRecall that you also need to keep the component connected to the chat room. Where does that code go?\nThereasonto run this code is not some particular interaction. It doesn\u2019t matter why or how the user navigated to the chat room screen. Now that they\u2019re looking at it and could interact with it, the component needs to stay connected to the selected chat server. Even if the chat room component was the initial screen of your app, and the user has not performed any interactions at all, you wouldstillneed to connect. This is why it\u2019s an Effect:\nWith this code, you can be sure that there is always an active connection to the currently selected chat server,regardlessof the specific interactions performed by the user. Whether the user has only opened your app, selected a different room, or navigated to another screen and back, your Effect ensures that the component willremain synchronizedwith the currently selected room, and willre-connect whenever it\u2019s necessary.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId } ) {\nconst [ message , setMessage ] useState ( '' ) ;\n// ...\nfunction handleSendClick ( ) {\nsendMessage ( message ) ;\n}\n// ...\nreturn (\n< >\n< input value { message } onChange { e => setMessage ( e target value ) } />\n< button onClick { handleSendClick } > </ button >\n</ >\n) ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId } ) {\n// ...\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( ) ;\n} ;\n} , [ roomId ] ) ;\n// ...\n}"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/separating-events-from-effects/learn/synchronizing-with-effects#what-are-effects-and-how-are-they-different-from-events",
                        "https://react.dev/learn/separating-events-from-effects/learn/lifecycle-of-reactive-effects#why-synchronization-may-need-to-happen-more-than-once"
                    ],
                    "subsections": [
                        {
                            "title": "Event handlers run in response to specific interactions",
                            "description": "From the user\u2019s perspective, sending a message should happenbecausethe particular \u201cSend\u201d button was clicked. The user will get rather upset if you send their message at any other time or for any other reason. This is why sending a message should be an event handler. Event handlers let you handle specific interactions:\nWith an event handler, you can be sure thatsendMessage(message)willonlyrun if the user presses the button.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId } ) {\nconst [ message , setMessage ] useState ( '' ) ;\n// ...\nfunction handleSendClick ( ) {\nsendMessage ( message ) ;\n}\n// ...\nreturn (\n< >\n< input value { message } onChange { e => setMessage ( e target value ) } />\n< button onClick { handleSendClick } > </ button >\n</ >\n) ;\n}"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Effects run whenever synchronization is needed",
                            "description": "Recall that you also need to keep the component connected to the chat room. Where does that code go?\nThereasonto run this code is not some particular interaction. It doesn\u2019t matter why or how the user navigated to the chat room screen. Now that they\u2019re looking at it and could interact with it, the component needs to stay connected to the selected chat server. Even if the chat room component was the initial screen of your app, and the user has not performed any interactions at all, you wouldstillneed to connect. This is why it\u2019s an Effect:\nWith this code, you can be sure that there is always an active connection to the currently selected chat server,regardlessof the specific interactions performed by the user. Whether the user has only opened your app, selected a different room, or navigated to another screen and back, your Effect ensures that the component willremain synchronizedwith the currently selected room, and willre-connect whenever it\u2019s necessary.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function ChatRoom ( { roomId } ) {\n// ...\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( ) ;\n} ;\n} , [ roomId ] ) ;\n// ...\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/separating-events-from-effects/learn/lifecycle-of-reactive-effects#why-synchronization-may-need-to-happen-more-than-once"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Reactive values and reactive logic",
                    "description": "Intuitively, you could say that event handlers are always triggered \u201cmanually\u201d, for example by clicking a button. Effects, on the other hand, are \u201cautomatic\u201d: they run and re-run as often as it\u2019s needed to stay synchronized.\nThere is a more precise way to think about this.\nProps, state, and variables declared inside your component\u2019s body are calledreactive values. In this example,serverUrlis not a reactive value, butroomIdandmessageare. They participate in the rendering data flow:\nReactive values like these can change due to a re-render. For example, the user may edit themessageor choose a differentroomIdin a dropdown. Event handlers and Effects respond to changes differently:\nLogic inside event handlers isnot reactive.It will not run again unless the user performs the same interaction (e.g. a click) again. Event handlers can read reactive values without \u201creacting\u201d to their changes.Logic inside Effects isreactive.If your Effect reads a reactive value,you have to specify it as a dependency.Then, if a re-render causes that value to change, React will re-run your Effect\u2019s logic with the new value.\nLet\u2019s revisit the previous example to illustrate this difference.\nTake a look at this line of code. Should this logic be reactive or not?\nFrom the user\u2019s perspective,a change to themessagedoesnotmean that they want to send a message.It only means that the user is typing. In other words, the logic that sends a message should not be reactive. It should not run again only because thereactive valuehas changed. That\u2019s why it belongs in the event handler:\nEvent handlers aren\u2019t reactive, sosendMessage(message)will only run when the user clicks the Send button.\nNow let\u2019s return to these lines:\nFrom the user\u2019s perspective,a change to theroomIddoesmean that they want to connect to a different room.In other words, the logic for connecting to the room should be reactive. Youwantthese lines of code to \u201ckeep up\u201d with thereactive value, and to run again if that value is different. That\u2019s why it belongs in an Effect:\nEffects are reactive, socreateConnection(serverUrl, roomId)andconnection.connect()will run for every distinct value ofroomId. Your Effect keeps the chat connection synchronized to the currently selected room.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const serverUrl 'https://localhost:1234' ;\n\nfunction ChatRoom ( { roomId } ) {\nconst [ message , setMessage ] useState ( '' ) ;\n\n// ...\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "// ...\nsendMessage ( message ) ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function handleSendClick ( ) {\nsendMessage ( message ) ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "// ...\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "useEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( )\n} ;\n} , [ roomId ] ) ;"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/separating-events-from-effects/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values"
                    ],
                    "subsections": [
                        {
                            "title": "Logic inside event handlers is not reactive",
                            "description": "Take a look at this line of code. Should this logic be reactive or not?\nFrom the user\u2019s perspective,a change to themessagedoesnotmean that they want to send a message.It only means that the user is typing. In other words, the logic that sends a message should not be reactive. It should not run again only because thereactive valuehas changed. That\u2019s why it belongs in the event handler:\nEvent handlers aren\u2019t reactive, sosendMessage(message)will only run when the user clicks the Send button.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "// ...\nsendMessage ( message ) ;\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "function handleSendClick ( ) {\nsendMessage ( message ) ;\n}"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        },
                        {
                            "title": "Logic inside Effects is reactive",
                            "description": "Now let\u2019s return to these lines:\nFrom the user\u2019s perspective,a change to theroomIddoesmean that they want to connect to a different room.In other words, the logic for connecting to the room should be reactive. Youwantthese lines of code to \u201ckeep up\u201d with thereactive value, and to run again if that value is different. That\u2019s why it belongs in an Effect:\nEffects are reactive, socreateConnection(serverUrl, roomId)andconnection.connect()will run for every distinct value ofroomId. Your Effect keeps the chat connection synchronized to the currently selected room.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "// ...\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\n// ..."
                                },
                                {
                                    "language": "javascript",
                                    "code": "useEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( )\n} ;\n} , [ roomId ] ) ;"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Extracting non-reactive logic out of Effects",
                    "description": "Things get more tricky when you want to mix reactive logic with non-reactive logic.\nFor example, imagine that you want to show a notification when the user connects to the chat. You read the current theme (dark or light) from the props so that you can show the notification in the correct color:\nHowever,themeis a reactive value (it can change as a result of re-rendering), andevery reactive value read by an Effect must be declared as its dependency.Now you have to specifythemeas a dependency of your Effect:\nPlay with this example and see if you can spot the problem with this user experience:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId , theme } ) {\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection on ( 'connected' , ( ) => {\nshowNotification ( 'Connected!' , theme ) ;\n} ) ;\nconnection connect ( ) ;\n// ..."
                        },
                        {
                            "language": "javascript",
                            "code": "function ChatRoom ( { roomId , theme } ) {\nuseEffect ( ( ) => {\nconst connection createConnection ( serverUrl , roomId ) ;\nconnection on ( 'connected' , ( ) => {\nshowNotification ( 'Connected!' , theme ) ;\n} ) ;\nconnection connect ( ) ;\nreturn ( ) => {\nconnection disconnect ( )\n} ;\n} , [ roomId , theme ] ) ; // \u2705 All dependencies declared\n// ..."
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/separating-events-from-effects/learn/lifecycle-of-reactive-effects#react-verifies-that-you-specified-every-reactive-value-as-a-dependency"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Event handlers run in response to specific interactions.Effects run whenever synchronization is needed.Logic inside event handlers is not reactive.Logic inside Effects is reactive.You can move non-reactive logic from Effects into Effect Events.Only call Effect Events from inside Effects.Don\u2019t pass Effect Events to other components or Hooks.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewChoosing between event handlers and EffectsEvent handlers run in response to specific interactionsEffects run whenever synchronization is neededReactive values and reactive logicLogic inside event handlers is not reactiveLogic inside Effects is reactiveExtracting non-reactive logic out of EffectsDeclaring an Effect EventReading latest props and state with Effect EventsLimitations of Effect EventsRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/separating-events-from-effects#",
                        "https://react.dev/learn/separating-events-from-effects#choosing-between-event-handlers-and-effects",
                        "https://react.dev/learn/separating-events-from-effects#event-handlers-run-in-response-to-specific-interactions",
                        "https://react.dev/learn/separating-events-from-effects#effects-run-whenever-synchronization-is-needed",
                        "https://react.dev/learn/separating-events-from-effects#reactive-values-and-reactive-logic",
                        "https://react.dev/learn/separating-events-from-effects#logic-inside-event-handlers-is-not-reactive",
                        "https://react.dev/learn/separating-events-from-effects#logic-inside-effects-is-reactive",
                        "https://react.dev/learn/separating-events-from-effects#extracting-non-reactive-logic-out-of-effects",
                        "https://react.dev/learn/separating-events-from-effects#declaring-an-effect-event",
                        "https://react.dev/learn/separating-events-from-effects#reading-latest-props-and-state-with-effect-events",
                        "https://react.dev/learn/separating-events-from-effects#limitations-of-effect-events",
                        "https://react.dev/learn/separating-events-from-effects#recap",
                        "https://react.dev/learn/separating-events-from-effects#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Installation \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/installation",
        "sections": {
            "summary": "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.\nHow to start a new React projectHow to add React to an existing projectHow to set up your editorHow to install React Developer Tools",
            "content": [
                {
                    "title": "Try React",
                    "description": "You don\u2019t need to install anything to play with React. Try editing this sandbox!",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Start a new React project",
                    "description": "If you want to build an app or a website fully with React,start a new React project.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/installation/learn/start-a-new-react-project"
                    ],
                    "subsections": []
                },
                {
                    "title": "Add React to an existing project",
                    "description": "If want to try using React in your existing app or a website,add React to an existing project.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/installation/learn/add-react-to-an-existing-project"
                    ],
                    "subsections": []
                },
                {
                    "title": "Next steps",
                    "description": "Head to theQuick Startguide for a tour of the most important React concepts you will encounter every day.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/installation/learn"
                    ],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewTry ReactTry React locallyStart a new React projectAdd React to an existing projectNext steps",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/installation#",
                        "https://react.dev/learn/installation#try-react",
                        "https://react.dev/learn/installation#try-react-locally",
                        "https://react.dev/learn/installation#start-a-new-react-project",
                        "https://react.dev/learn/installation#add-react-to-an-existing-project",
                        "https://react.dev/learn/installation#next-steps"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "State as a Snapshot \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/state-as-a-snapshot",
        "sections": {
            "summary": "State variables might look like regular JavaScript variables that you can read and write to. However, state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render.\nHow setting state triggers re-rendersWhen and how state updatesWhy state does not update immediately after you set itHow event handlers access a \u201csnapshot\u201d of the state",
            "content": [
                {
                    "title": "Setting state triggers renders",
                    "description": "You might think of your user interface as changing directly in response to the user event like a click. In React, it works a little differently from this mental model. On the previous page, you saw thatsetting state requests a re-renderfrom React. This means that for an interface to react to the event, you need toupdate the state.\nIn this example, when you press \u201csend\u201d,setIsSent(true)tells React to re-render the UI:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/state-as-a-snapshot/learn/render-and-commit#step-1-trigger-a-render"
                    ],
                    "subsections": []
                },
                {
                    "title": "Rendering takes a snapshot in time",
                    "description": "\u201cRendering\u201dmeans that React is calling your component, which is a function. The JSX you return from that function is like a snapshot of the UI in time. Its props, event handlers, and local variables were all calculatedusing its state at the time of the render.\nUnlike a photograph or a movie frame, the UI \u201csnapshot\u201d you return is interactive. It includes logic like event handlers that specify what happens in response to inputs. React updates the screen to match this snapshot and connects the event handlers. As a result, pressing a button will trigger the click handler from your JSX.\nWhen React re-renders a component:\nReact calls your function again.Your function returns a new JSX snapshot.React then updates the screen to match the snapshot your function returned.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/state-as-a-snapshot/learn/render-and-commit#step-2-react-renders-your-components"
                    ],
                    "subsections": []
                },
                {
                    "title": "State over time",
                    "description": "Well, that was fun. Try to guess what clicking this button will alert:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Setting state requests a new render.React stores state outside of your component, as if on a shelf.When you calluseState, React gives you a snapshot of the statefor that render.Variables and event handlers don\u2019t \u201csurvive\u201d re-renders. Every render has its own event handlers.Every render (and functions inside it) will always \u201csee\u201d the snapshot of the state that React gave tothatrender.You can mentally substitute state in event handlers, similarly to how you think about the rendered JSX.Event handlers created in the past have the state values from the render in which they were created.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewSetting state triggers rendersRendering takes a snapshot in timeState over timeRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/state-as-a-snapshot#",
                        "https://react.dev/learn/state-as-a-snapshot#setting-state-triggers-renders",
                        "https://react.dev/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time",
                        "https://react.dev/learn/state-as-a-snapshot#state-over-time",
                        "https://react.dev/learn/state-as-a-snapshot#recap",
                        "https://react.dev/learn/state-as-a-snapshot#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Passing Props to a Component \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/passing-props-to-a-component",
        "sections": {
            "summary": "React components usepropsto communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions.\nHow to pass props to a componentHow to read props from a componentHow to specify default values for propsHow to pass some JSX to a componentHow props change over time",
            "content": [
                {
                    "title": "Familiar props",
                    "description": "Props are the information that you pass to a JSX tag. For example,className,src,alt,width, andheightare some of the props you can pass to an<img>:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Passing props to a component",
                    "description": "In this code, theProfilecomponent isn\u2019t passing any props to its child component,Avatar:\nYou can giveAvatarsome props in two steps.\nFirst, pass some props toAvatar. For example, let\u2019s pass two props:person(an object), andsize(a number):\nIf double curly braces afterperson=confuse you, recallthey\u2019re merely an objectinside the JSX curlies.\nNow you can read these props inside theAvatarcomponent.\nYou can read these props by listing their namesperson, sizeseparated by the commas inside({and})directly afterfunction Avatar. This lets you use them inside theAvatarcode, like you would with a variable.\nAdd some logic toAvatarthat uses thepersonandsizeprops for rendering, and you\u2019re done.\nNow you can configureAvatarto render in many different ways with different props. Try tweaking the values!",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "export default function Profile ( ) {\nreturn (\n< Avatar />\n) ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "export default function Profile ( ) {\nreturn (\n< Avatar\nperson { { name : 'Lin Lanying' , imageId : '1bX5QH6' } }\nsize { 100 }\n/>\n) ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Avatar ( { person , size } ) {\n// person and size are available here\n}"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/passing-props-to-a-component/learn/javascript-in-jsx-with-curly-braces#using-double-curlies-css-and-other-objects-in-jsx"
                    ],
                    "subsections": [
                        {
                            "title": "Step 1: Pass props to the child component",
                            "description": "First, pass some props toAvatar. For example, let\u2019s pass two props:person(an object), andsize(a number):\nIf double curly braces afterperson=confuse you, recallthey\u2019re merely an objectinside the JSX curlies.\nNow you can read these props inside theAvatarcomponent.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "export default function Profile ( ) {\nreturn (\n< Avatar\nperson { { name : 'Lin Lanying' , imageId : '1bX5QH6' } }\nsize { 100 }\n/>\n) ;\n}"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/passing-props-to-a-component/learn/javascript-in-jsx-with-curly-braces#using-double-curlies-css-and-other-objects-in-jsx"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "Step 2: Read props inside the child component",
                            "description": "You can read these props by listing their namesperson, sizeseparated by the commas inside({and})directly afterfunction Avatar. This lets you use them inside theAvatarcode, like you would with a variable.\nAdd some logic toAvatarthat uses thepersonandsizeprops for rendering, and you\u2019re done.\nNow you can configureAvatarto render in many different ways with different props. Try tweaking the values!",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "function Avatar ( { person , size } ) {\n// person and size are available here\n}"
                                }
                            ],
                            "urls": [],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Specifying a default value for a prop",
                    "description": "If you want to give a prop a default value to fall back on when no value is specified, you can do it with the destructuring by putting=and the default value right after the parameter:\nNow, if<Avatar person={...} />is rendered with nosizeprop, thesizewill be set to100.\nThe default value is only used if thesizeprop is missing or if you passsize={undefined}. But if you passsize={null}orsize={0}, the default value willnotbe used.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function Avatar ( { person , size 100 } ) {\n// ...\n}"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Forwarding props with the JSX spread syntax",
                    "description": "Sometimes, passing props gets very repetitive:\nThere\u2019s nothing wrong with repetitive code\u2014it can be more legible. But at times you may value conciseness. Some components forward all of their props to their children, like how thisProfiledoes withAvatar. Because they don\u2019t use any of their props directly, it can make sense to use a more concise \u201cspread\u201d syntax:\nThis forwards all ofProfile\u2019s props to theAvatarwithout listing each of their names.\nUse spread syntax with restraint.If you\u2019re using it in every other component, something is wrong. Often, it indicates that you should split your components and pass children as JSX. More on that next!",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "function Profile ( { person , size , isSepia , thickBorder } ) {\nreturn (\n< div className \"card\" >\n< Avatar\nperson { person }\nsize { size }\nisSepia { isSepia }\nthickBorder { thickBorder }\n/>\n</ div >\n) ;\n}"
                        },
                        {
                            "language": "javascript",
                            "code": "function Profile ( props ) {\nreturn (\n< div className \"card\" >\n< Avatar { ... props } />\n</ div >\n) ;\n}"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Passing JSX as children",
                    "description": "It is common to nest built-in browser tags:\nSometimes you\u2019ll want to nest your own components the same way:\nWhen you nest content inside a JSX tag, the parent component will receive that content in a prop calledchildren. For example, theCardcomponent below will receive achildrenprop set to<Avatar />and render it in a wrapper div:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "< div >\n< img />\n</ div >"
                        },
                        {
                            "language": "javascript",
                            "code": "< Card >\n< Avatar />\n</ Card >"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "How props change over time",
                    "description": "TheClockcomponent below receives two props from its parent component:colorandtime. (The parent component\u2019s code is omitted because it usesstate, which we won\u2019t dive into just yet.)\nTry changing the color in the select box below:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/passing-props-to-a-component/learn/state-a-components-memory"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "To pass props, add them to the JSX, just like you would with HTML attributes.To read props, use thefunction Avatar({ person, size })destructuring syntax.You can specify a default value likesize = 100, which is used for missing andundefinedprops.You can forward all props with<Avatar {...props} />JSX spread syntax, but don\u2019t overuse it!Nested JSX like<Card><Avatar /></Card>will appear asCardcomponent\u2019schildrenprop.Props are read-only snapshots in time: every render receives a new version of props.You can\u2019t change props. When you need interactivity, you\u2019ll need to set state.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewFamiliar propsPassing props to a componentStep 1: Pass props to the child componentStep 2: Read props inside the child componentSpecifying a default value for a propForwarding props with the JSX spread syntaxPassing JSX as childrenHow props change over timeRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/passing-props-to-a-component#",
                        "https://react.dev/learn/passing-props-to-a-component#familiar-props",
                        "https://react.dev/learn/passing-props-to-a-component#passing-props-to-a-component",
                        "https://react.dev/learn/passing-props-to-a-component#step-1-pass-props-to-the-child-component",
                        "https://react.dev/learn/passing-props-to-a-component#step-2-read-props-inside-the-child-component",
                        "https://react.dev/learn/passing-props-to-a-component#specifying-a-default-value-for-a-prop",
                        "https://react.dev/learn/passing-props-to-a-component#forwarding-props-with-the-jsx-spread-syntax",
                        "https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children",
                        "https://react.dev/learn/passing-props-to-a-component#how-props-change-over-time",
                        "https://react.dev/learn/passing-props-to-a-component#recap",
                        "https://react.dev/learn/passing-props-to-a-component#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Adding Interactivity \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/adding-interactivity",
        "sections": {
            "summary": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is calledstate.You can add state to any component, and update it as needed. In this chapter, you\u2019ll learn how to write components that handle interactions, update their state, and display different output over time.\nHow to handle user-initiated eventsHow to make components \u201cremember\u201d information with stateHow React updates the UI in two phasesWhy state doesn\u2019t update right after you change itHow to queue multiple state updatesHow to update an object in stateHow to update an array in state",
            "content": [
                {
                    "title": "Responding to events",
                    "description": "React lets you addevent handlersto your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.\nBuilt-in components like<button>only support built-in browser events likeonClick. However, you can also create your own components, and give their event handler props any application-specific names that you like.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadResponding to Eventsto learn how to add event handlers.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/adding-interactivity/learn/responding-to-events"
                    ],
                    "subsections": []
                },
                {
                    "title": "State: a component\u2019s memory",
                    "description": "Components often need to change what\u2019s on the screen as a result of an interaction. Typing into the form should update the input field, clicking \u201cnext\u201d on an image carousel should change which image is displayed, clicking \u201cbuy\u201d puts a product in the shopping cart. Components need to \u201cremember\u201d things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is calledstate.\nYou can add state to a component with auseStateHook.Hooksare special functions that let your components use React features (state is one of those features). TheuseStateHook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.\nHere is how an image gallery uses and updates state on click:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "const [ index , setIndex ] useState ( 0 ) ;\nconst [ showMore , setShowMore ] useState ( false ) ;"
                        }
                    ],
                    "urls": [
                        "https://react.dev/learn/adding-interactivity/reference/react/useState"
                    ],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadState: A Component\u2019s Memoryto learn how to remember a value and update it on interaction.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/adding-interactivity/learn/state-a-components-memory"
                    ],
                    "subsections": []
                },
                {
                    "title": "Render and commit",
                    "description": "Before your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.\nImagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:\nTriggeringa render (delivering the diner\u2019s order to the kitchen)Renderingthe component (preparing the order in the kitchen)Committingto the DOM (placing the order on the table)",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadRender and Committo learn the lifecycle of a UI update.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/adding-interactivity/learn/render-and-commit"
                    ],
                    "subsections": []
                },
                {
                    "title": "State as a snapshot",
                    "description": "Unlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!\nThis behavior helps you avoid subtle bugs. Here is a little chat app. Try to guess what happens if you press \u201cSend\u201d first andthenchange the recipient to Bob. Whose name will appear in thealertfive seconds later?",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "console log ( count ) ; // 0\nsetCount ( count 1 ) ; // Request a re-render with 1\nconsole log ( count ) ; // Still 0!"
                        }
                    ],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadState as a Snapshotto learn why state appears \u201cfixed\u201d and unchanging inside the event handlers.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/adding-interactivity/learn/state-as-a-snapshot"
                    ],
                    "subsections": []
                },
                {
                    "title": "Queueing a series of state updates",
                    "description": "This component is buggy: clicking \u201c+3\u201d increments the score only once.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadQueueing a Series of State Updatesto learn how to queue a sequence of state updates.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/adding-interactivity/learn/queueing-a-series-of-state-updates"
                    ],
                    "subsections": []
                },
                {
                    "title": "Updating objects in state",
                    "description": "State can hold any kind of JavaScript value, including objects. But you shouldn\u2019t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.\nUsually, you will use the...spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadUpdating Objects in Stateto learn how to update objects correctly.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/adding-interactivity/learn/updating-objects-in-state"
                    ],
                    "subsections": []
                },
                {
                    "title": "Updating arrays in state",
                    "description": "Arrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Ready to learn this topic?",
                    "description": "ReadUpdating Arrays in Stateto learn how to update arrays correctly.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/adding-interactivity/learn/updating-arrays-in-state"
                    ],
                    "subsections": []
                },
                {
                    "title": "What\u2019s next?",
                    "description": "Head over toResponding to Eventsto start reading this chapter page by page!\nOr, if you\u2019re already familiar with these topics, why not read aboutManaging State?",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/adding-interactivity/learn/responding-to-events",
                        "https://react.dev/learn/adding-interactivity/learn/managing-state"
                    ],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewResponding to eventsState: a component\u2019s memoryRender and commitState as a snapshotQueueing a series of state updatesUpdating objects in stateUpdating arrays in stateWhat\u2019s next?",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/adding-interactivity#",
                        "https://react.dev/learn/adding-interactivity#responding-to-events",
                        "https://react.dev/learn/adding-interactivity#state-a-components-memory",
                        "https://react.dev/learn/adding-interactivity#render-and-commit",
                        "https://react.dev/learn/adding-interactivity#state-as-a-snapshot",
                        "https://react.dev/learn/adding-interactivity#queueing-a-series-of-state-updates",
                        "https://react.dev/learn/adding-interactivity#updating-objects-in-state",
                        "https://react.dev/learn/adding-interactivity#updating-arrays-in-state",
                        "https://react.dev/learn/adding-interactivity#whats-next"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Render and Commit \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/render-and-commit",
        "sections": {
            "summary": "",
            "content": [
                {
                    "title": "Step 1: Trigger a render",
                    "description": "There are two reasons for a component to render:\nIt\u2019s the component\u2019sinitial render.The component\u2019s (or one of its ancestors\u2019)state has been updated.\nWhen your app starts, you need to trigger the initial render. Frameworks and sandboxes sometimes hide this code, but it\u2019s done by callingcreateRootwith the target DOM node, and then calling itsrendermethod with your component:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/render-and-commit/reference/react-dom/client/createRoot"
                    ],
                    "subsections": [
                        {
                            "title": "Initial render",
                            "description": "When your app starts, you need to trigger the initial render. Frameworks and sandboxes sometimes hide this code, but it\u2019s done by callingcreateRootwith the target DOM node, and then calling itsrendermethod with your component:",
                            "code_sample": [],
                            "urls": [
                                "https://react.dev/learn/render-and-commit/reference/react-dom/client/createRoot"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Step 2: React renders your components",
                    "description": "After you trigger a render, React calls your components to figure out what to display on screen.\u201cRendering\u201d is React calling your components.\nOn initial render,React will call the root component.For subsequent renders,React will call the function component whose state update triggered the render.\nThis process is recursive: if the updated component returns some other component, React will renderthatcomponent next, and if that component also returns something, it will renderthatcomponent next, and so on. The process will continue until there are no more nested components and React knows exactly what should be displayed on screen.\nIn the following example, React will callGallery()andImage()several times:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Step 3: React commits changes to the DOM",
                    "description": "After rendering (calling) your components, React will modify the DOM.\nFor the initial render,React will use theappendChild()DOM API to put all the DOM nodes it has created on screen.For re-renders,React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.\nReact only changes the DOM nodes if there\u2019s a difference between renders.For example, here is a component that re-renders with different props passed from its parent every second. Notice how you can add some text into the<input>, updating itsvalue, but the text doesn\u2019t disappear when the component re-renders:",
                    "code_sample": [],
                    "urls": [
                        "https://developer.mozilla.org/docs/Web/API/Node/appendChild"
                    ],
                    "subsections": []
                },
                {
                    "title": "Epilogue: Browser paint",
                    "description": "After rendering is done and React updated the DOM, the browser will repaint the screen. Although this process is known as \u201cbrowser rendering\u201d, we\u2019ll refer to it as \u201cpainting\u201d to avoid confusion throughout the docs.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Any screen update in a React app happens in three steps:TriggerRenderCommitYou can use Strict Mode to find mistakes in your componentsReact does not touch the DOM if the rendering result is the same as last time",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewStep 1: Trigger a renderInitial renderRe-renders when state updatesStep 2: React renders your componentsStep 3: React commits changes to the DOMEpilogue: Browser paintRecap",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/render-and-commit#",
                        "https://react.dev/learn/render-and-commit#step-1-trigger-a-render",
                        "https://react.dev/learn/render-and-commit#initial-render",
                        "https://react.dev/learn/render-and-commit#re-renders-when-state-updates",
                        "https://react.dev/learn/render-and-commit#step-2-react-renders-your-components",
                        "https://react.dev/learn/render-and-commit#step-3-react-commits-changes-to-the-dom",
                        "https://react.dev/learn/render-and-commit#epilogue-browser-paint",
                        "https://react.dev/learn/render-and-commit#recap"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Updating Arrays in State \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/updating-arrays-in-state",
        "sections": {
            "summary": "Arrays are mutable in JavaScript, but you should treat them as immutable when you store them in state. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array.\nHow to add, remove, or change items in an array in React stateHow to update an object inside of an arrayHow to make array copying less repetitive with Immer",
            "content": [
                {
                    "title": "Updating arrays without mutation",
                    "description": "In JavaScript, arrays are just another kind of object.Like with objects,you should treat arrays in React state as read-only.This means that you shouldn\u2019t reassign items inside an array likearr[0] = 'bird', and you also shouldn\u2019t use methods that mutate the array, such aspush()andpop().\nInstead, every time you want to update an array, you\u2019ll want to pass anewarray to your state setting function. To do that, you can create a new array from the original array in your state by calling its non-mutating methods likefilter()andmap(). Then you can set your state to the resulting new array.\nHere is a reference table of common array operations. When dealing with arrays inside React state, you will need to avoid the methods in the left column, and instead prefer the methods in the right column:\nAlternatively, you canuse Immerwhich lets you use methods from both columns.\nUnfortunately,sliceandspliceare named similarly but are very different:\nslicelets you copy an array or a part of it.splicemutatesthe array (to insert or delete items).\nIn React, you will be usingslice(nop!) a lot more often because you don\u2019t want to mutate objects or arrays in state.Updating Objectsexplains what mutation is and why it\u2019s not recommended for state.\npush()will mutate an array, which you don\u2019t want:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/updating-arrays-in-state/learn/updating-objects-in-state",
                        "https://react.dev/learn/updating-arrays-in-state#adding-to-an-array",
                        "https://react.dev/learn/updating-arrays-in-state#removing-from-an-array",
                        "https://react.dev/learn/updating-arrays-in-state#replacing-items-in-an-array",
                        "https://react.dev/learn/updating-arrays-in-state#making-other-changes-to-an-array",
                        "https://react.dev/learn/updating-arrays-in-state#write-concise-update-logic-with-immer",
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice",
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",
                        "https://react.dev/learn/updating-arrays-in-state/learn/updating-objects-in-state"
                    ],
                    "subsections": [
                        {
                            "title": "Adding to an array",
                            "description": "push()will mutate an array, which you don\u2019t want:",
                            "code_sample": [],
                            "urls": [],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Updating objects inside arrays",
                    "description": "Objects are notreallylocated \u201cinside\u201d arrays. They might appear to be \u201cinside\u201d in code, but each object in an array is a separate value, to which the array \u201cpoints\u201d. This is why you need to be careful when changing nested fields likelist[0]. Another person\u2019s artwork list may point to the same element of the array!\nWhen updating nested state, you need to create copies from the point where you want to update, and all the way up to the top level.Let\u2019s see how this works.\nIn this example, two separate artwork lists have the same initial state. They are supposed to be isolated, but because of a mutation, their state is accidentally shared, and checking a box in one list affects the other list:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "You can put arrays into state, but you can\u2019t change them.Instead of mutating an array, create anewversion of it, and update the state to it.You can use the[...arr, newItem]array spread syntax to create arrays with new items.You can usefilter()andmap()to create new arrays with filtered or transformed items.You can use Immer to keep your code concise.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewUpdating arrays without mutationAdding to an arrayRemoving from an arrayTransforming an arrayReplacing items in an arrayInserting into an arrayMaking other changes to an arrayUpdating objects inside arraysWrite concise update logic with ImmerRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/updating-arrays-in-state#",
                        "https://react.dev/learn/updating-arrays-in-state#updating-arrays-without-mutation",
                        "https://react.dev/learn/updating-arrays-in-state#adding-to-an-array",
                        "https://react.dev/learn/updating-arrays-in-state#removing-from-an-array",
                        "https://react.dev/learn/updating-arrays-in-state#transforming-an-array",
                        "https://react.dev/learn/updating-arrays-in-state#replacing-items-in-an-array",
                        "https://react.dev/learn/updating-arrays-in-state#inserting-into-an-array",
                        "https://react.dev/learn/updating-arrays-in-state#making-other-changes-to-an-array",
                        "https://react.dev/learn/updating-arrays-in-state#updating-objects-inside-arrays",
                        "https://react.dev/learn/updating-arrays-in-state#write-concise-update-logic-with-immer",
                        "https://react.dev/learn/updating-arrays-in-state#recap",
                        "https://react.dev/learn/updating-arrays-in-state#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Conditional Rendering \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/conditional-rendering",
        "sections": {
            "summary": "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax likeifstatements,&&, and? :operators.\nHow to return different JSX depending on a conditionHow to conditionally include or exclude a piece of JSXCommon conditional syntax shortcuts you\u2019ll encounter in React codebases",
            "content": [
                {
                    "title": "Conditionally returning JSX",
                    "description": "Let\u2019s say you have aPackingListcomponent rendering severalItems, which can be marked as packed or not:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Conditionally including JSX",
                    "description": "In the previous example, you controlled which (if any!) JSX tree would be returned by the component. You may already have noticed some duplication in the render output:\nis very similar to\nBoth of the conditional branches return<li className=\"item\">...</li>:\nWhile this duplication isn\u2019t harmful, it could make your code harder to maintain. What if you want to change theclassName? You\u2019d have to do it in two places in your code! In such a situation, you could conditionally include a little JSX to make your code moreDRY.\nJavaScript has a compact syntax for writing a conditional expression \u2014 theconditional operatoror \u201cternary operator\u201d.\nInstead of this:\nYou can write this:\nYou can read it as\u201cifisPackedis true, then (?) rendername + ' \u2705', otherwise (:) rendername\u201d.\nIf you\u2019re coming from an object-oriented programming background, you might assume that the two examples above are subtly different because one of them may create two different \u201cinstances\u201d of<li>. But JSX elements aren\u2019t \u201cinstances\u201d because they don\u2019t hold any internal state and aren\u2019t real DOM nodes. They\u2019re lightweight descriptions, like blueprints. So these two examples, in fact,arecompletely equivalent.Preserving and Resetting Stategoes into detail about how this works.\nNow let\u2019s say you want to wrap the completed item\u2019s text into another HTML tag, like<del>to strike it out. You can add even more newlines and parentheses so that it\u2019s easier to nest more JSX in each of the cases:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "< li className \"item\" > { name } </ li >"
                        },
                        {
                            "language": "javascript",
                            "code": "< li className \"item\" > { name } </ li >"
                        },
                        {
                            "language": "javascript",
                            "code": "if ( isPacked ) {\nreturn < li className \"item\" > { name } </ li > ;\n}\nreturn < li className \"item\" > { name } </ li > ;"
                        },
                        {
                            "language": "javascript",
                            "code": "if ( isPacked ) {\nreturn < li className \"item\" > { name } </ li > ;\n}\nreturn < li className \"item\" > { name } </ li > ;"
                        },
                        {
                            "language": "javascript",
                            "code": "return (\n< li className \"item\" >\n{ isPacked name ' \u2705' name }\n</ li >\n) ;"
                        }
                    ],
                    "urls": [
                        "https://en.wikipedia.org/wiki/Don%27t_repeat_yourself",
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",
                        "https://react.dev/learn/conditional-rendering#are-these-two-examples-fully-equivalent",
                        "https://react.dev/learn/conditional-rendering/learn/preserving-and-resetting-state"
                    ],
                    "subsections": [
                        {
                            "title": "Conditional (ternary) operator (? :)",
                            "description": "JavaScript has a compact syntax for writing a conditional expression \u2014 theconditional operatoror \u201cternary operator\u201d.\nInstead of this:\nYou can write this:\nYou can read it as\u201cifisPackedis true, then (?) rendername + ' \u2705', otherwise (:) rendername\u201d.\nIf you\u2019re coming from an object-oriented programming background, you might assume that the two examples above are subtly different because one of them may create two different \u201cinstances\u201d of<li>. But JSX elements aren\u2019t \u201cinstances\u201d because they don\u2019t hold any internal state and aren\u2019t real DOM nodes. They\u2019re lightweight descriptions, like blueprints. So these two examples, in fact,arecompletely equivalent.Preserving and Resetting Stategoes into detail about how this works.\nNow let\u2019s say you want to wrap the completed item\u2019s text into another HTML tag, like<del>to strike it out. You can add even more newlines and parentheses so that it\u2019s easier to nest more JSX in each of the cases:",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "if ( isPacked ) {\nreturn < li className \"item\" > { name } </ li > ;\n}\nreturn < li className \"item\" > { name } </ li > ;"
                                },
                                {
                                    "language": "javascript",
                                    "code": "return (\n< li className \"item\" >\n{ isPacked name ' \u2705' name }\n</ li >\n) ;"
                                }
                            ],
                            "urls": [
                                "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",
                                "https://react.dev/learn/conditional-rendering#are-these-two-examples-fully-equivalent",
                                "https://react.dev/learn/conditional-rendering/learn/preserving-and-resetting-state"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Recap",
                    "description": "In React, you control branching logic with JavaScript.You can return a JSX expression conditionally with anifstatement.You can conditionally save some JSX to a variable and then include it inside other JSX by using the curly braces.In JSX,{cond ? <A /> : <B />}means\u201cifcond, render<A />, otherwise<B />\u201d.In JSX,{cond && <A />}means\u201cifcond, render<A />, otherwise nothing\u201d.The shortcuts are common, but you don\u2019t have to use them if you prefer plainif.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewConditionally returning JSXConditionally returning nothing withnullConditionally including JSXConditional (ternary) operator (? :)Logical AND operator (&&)Conditionally assigning JSX to a variableRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/conditional-rendering#",
                        "https://react.dev/learn/conditional-rendering#conditionally-returning-jsx",
                        "https://react.dev/learn/conditional-rendering#conditionally-returning-nothing-with-null",
                        "https://react.dev/learn/conditional-rendering#conditionally-including-jsx",
                        "https://react.dev/learn/conditional-rendering#conditional-ternary-operator--",
                        "https://react.dev/learn/conditional-rendering#logical-and-operator-",
                        "https://react.dev/learn/conditional-rendering#conditionally-assigning-jsx-to-a-variable",
                        "https://react.dev/learn/conditional-rendering#recap",
                        "https://react.dev/learn/conditional-rendering#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "React Developer Tools \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/react-developer-tools",
        "sections": {
            "summary": "Use React Developer Tools to inspect Reactcomponents, editpropsandstate, and identify performance problems.\nHow to install React Developer Tools",
            "content": [
                {
                    "title": "Browser extension",
                    "description": "The easiest way to debug websites built with React is to install the React Developer Tools browser extension. It is available for several popular browsers:\nInstall forChromeInstall forFirefoxInstall forEdge\nNow, if you visit a websitebuilt with React,you will see theComponentsandProfilerpanels.\nFor other browsers (for example, Safari), install thereact-devtoolsnpm package:\nNext open the developer tools from the terminal:\nThen connect your website by adding the following<script>tag to the beginning of your website\u2019s<head>:\nReload your website in the browser now to view it in developer tools.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "Yarn\nyarn  global  add  react devtools\n\nNpm\nnpm  install g  react devtools"
                        },
                        {
                            "language": "javascript",
                            "code": "react devtools"
                        },
                        {
                            "language": "javascript",
                            "code": "< html >\n< head >\n< script src \"http://localhost:8097\" > </ script >"
                        }
                    ],
                    "urls": [
                        "https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en",
                        "https://addons.mozilla.org/en-US/firefox/addon/react-devtools/",
                        "https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil",
                        "https://www.npmjs.com/package/react-devtools"
                    ],
                    "subsections": [
                        {
                            "title": "Safari and other browsers",
                            "description": "For other browsers (for example, Safari), install thereact-devtoolsnpm package:\nNext open the developer tools from the terminal:\nThen connect your website by adding the following<script>tag to the beginning of your website\u2019s<head>:\nReload your website in the browser now to view it in developer tools.",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "Yarn\nyarn  global  add  react devtools\n\nNpm\nnpm  install g  react devtools"
                                },
                                {
                                    "language": "javascript",
                                    "code": "react devtools"
                                },
                                {
                                    "language": "javascript",
                                    "code": "< html >\n< head >\n< script src \"http://localhost:8097\" > </ script >"
                                }
                            ],
                            "urls": [
                                "https://www.npmjs.com/package/react-devtools"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Mobile (React Native)",
                    "description": "React Developer Tools can be used to inspect apps built withReact Nativeas well.\nThe easiest way to use React Developer Tools is to install it globally:\nNext open the developer tools from the terminal.\nIt should connect to any local React Native app that\u2019s running.\nTry reloading the app if developer tools doesn\u2019t connect after a few seconds.\nLearn more about debugging React Native.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "Yarn\nyarn  global  add  react devtools\n\nNpm\nnpm  install g  react devtools"
                        },
                        {
                            "language": "javascript",
                            "code": "react devtools"
                        }
                    ],
                    "urls": [
                        "https://reactnative.dev/",
                        "https://reactnative.dev/docs/debugging"
                    ],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewBrowser extensionSafari and other browsersMobile (React Native)",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/react-developer-tools#",
                        "https://react.dev/learn/react-developer-tools#browser-extension",
                        "https://react.dev/learn/react-developer-tools#safari-and-other-browsers",
                        "https://react.dev/learn/react-developer-tools#mobile-react-native"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Using TypeScript \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/typescript",
        "sections": {
            "summary": "TypeScript is a popular way to add type definitions to JavaScript codebases. Out of the box, TypeScriptsupports JSXand you can get full React Web support by adding@types/reactand@types/react-domto your project.\nTypeScript with React ComponentsExamples of typing with HooksCommon types from@types/reactFurther learning locations",
            "content": [
                {
                    "title": "Installation",
                    "description": "Allproduction-grade React frameworksoffer support for using TypeScript. Follow the framework specific guide for installation:\nNext.jsRemixGatsbyExpo\nTo install the latest version of React\u2019s type definitions:\nThe following compiler options need to be set in yourtsconfig.json:\ndommust be included inlib(Note: If noliboption is specified,domis included by default).jsxmust be set to one of the valid options.preserveshould suffice for most applications.\nIf you\u2019re publishing a library, consult thejsxdocumentationon what value to choose.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/typescript/learn/start-a-new-react-project#production-grade-react-frameworks",
                        "https://nextjs.org/docs/app/building-your-application/configuring/typescript",
                        "https://remix.run/docs/en/1.19.2/guides/typescript",
                        "https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/",
                        "https://docs.expo.dev/guides/typescript/",
                        "https://www.typescriptlang.org/tsconfig/#lib",
                        "https://www.typescriptlang.org/tsconfig/#jsx",
                        "https://www.typescriptlang.org/tsconfig/#jsx"
                    ],
                    "subsections": [
                        {
                            "title": "Adding TypeScript to an existing React project",
                            "description": "To install the latest version of React\u2019s type definitions:\nThe following compiler options need to be set in yourtsconfig.json:\ndommust be included inlib(Note: If noliboption is specified,domis included by default).jsxmust be set to one of the valid options.preserveshould suffice for most applications.\nIf you\u2019re publishing a library, consult thejsxdocumentationon what value to choose.",
                            "code_sample": [],
                            "urls": [
                                "https://www.typescriptlang.org/tsconfig/#lib",
                                "https://www.typescriptlang.org/tsconfig/#jsx",
                                "https://www.typescriptlang.org/tsconfig/#jsx"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "TypeScript with React Components",
                    "description": "Every file containing JSX must use the.tsxfile extension. This is a TypeScript-specific extension that tells TypeScript that this file contains JSX.\nWriting TypeScript with React is very similar to writing JavaScript with React. The key difference when working with a component is that you can provide types for your component\u2019s props. These types can be used for correctness checking and providing inline documentation in editors.\nTaking theMyButtoncomponentfrom theQuick Startguide, we can add a type describing thetitlefor the button:",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/typescript/learn#components",
                        "https://react.dev/learn/typescript/learn"
                    ],
                    "subsections": []
                },
                {
                    "title": "Example Hooks",
                    "description": "The type definitions from@types/reactinclude types for the built-in Hooks, so you can use them in your components without any additional setup. They are built to take into account the code you write in your component, so you will getinferred typesa lot of the time and ideally do not need to handle the minutiae of providing the types.\nHowever, we can look at a few examples of how to provide types for Hooks.\nTheuseStateHookwill re-use the value passed in as the initial state to determine what the type of the value should be. For example:\nThis will assign the type ofbooleantoenabled, andsetEnabledwill be a function accepting either abooleanargument, or a function that returns aboolean. If you want to explicitly provide a type for the state, you can do so by providing a type argument to theuseStatecall:\nThis isn\u2019t very useful in this case, but a common case where you may want to provide a type is when you have a union type. For example,statushere can be one of a few different strings:\nOr, as recommended inPrinciples for structuring state, you can group related state as an object and describe the different possibilities via object types:\nTheuseReducerHookis a more complex Hook that takes a reducer function and an initial state. The types for the reducer function are inferred from the initial state. You can optionally provide a type argument to theuseReducercall to provide a type for the state, but it is often better to set the type on the initial state instead:",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "// Infer the type as \"boolean\"\nconst [ enabled , setEnabled ] useState ( false ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "// Explicitly set the type to \"boolean\"\nconst [ enabled , setEnabled ] useState boolean ( false ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "type  Status \"idle\" \"loading\" \"success\" \"error\" ;\n\nconst [ status , setStatus ] useState Status ( \"idle\" ) ;"
                        },
                        {
                            "language": "javascript",
                            "code": "type  RequestState\n{ status : 'idle' }\n{ status : 'loading' }\n{ status : 'success' , data : any }\n{ status : 'error' , error : Error } ;\n\nconst [ requestState , setRequestState ] useState RequestState ( { status : 'idle' } ) ;"
                        }
                    ],
                    "urls": [
                        "https://www.typescriptlang.org/docs/handbook/type-inference.html",
                        "https://react.dev/learn/typescript/reference/react/useState",
                        "https://react.dev/learn/typescript/learn/choosing-the-state-structure#principles-for-structuring-state",
                        "https://react.dev/learn/typescript/reference/react/useReducer"
                    ],
                    "subsections": [
                        {
                            "title": "useState",
                            "description": "TheuseStateHookwill re-use the value passed in as the initial state to determine what the type of the value should be. For example:\nThis will assign the type ofbooleantoenabled, andsetEnabledwill be a function accepting either abooleanargument, or a function that returns aboolean. If you want to explicitly provide a type for the state, you can do so by providing a type argument to theuseStatecall:\nThis isn\u2019t very useful in this case, but a common case where you may want to provide a type is when you have a union type. For example,statushere can be one of a few different strings:\nOr, as recommended inPrinciples for structuring state, you can group related state as an object and describe the different possibilities via object types:",
                            "code_sample": [
                                {
                                    "language": "javascript",
                                    "code": "// Infer the type as \"boolean\"\nconst [ enabled , setEnabled ] useState ( false ) ;"
                                },
                                {
                                    "language": "javascript",
                                    "code": "// Explicitly set the type to \"boolean\"\nconst [ enabled , setEnabled ] useState boolean ( false ) ;"
                                },
                                {
                                    "language": "javascript",
                                    "code": "type  Status \"idle\" \"loading\" \"success\" \"error\" ;\n\nconst [ status , setStatus ] useState Status ( \"idle\" ) ;"
                                },
                                {
                                    "language": "javascript",
                                    "code": "type  RequestState\n{ status : 'idle' }\n{ status : 'loading' }\n{ status : 'success' , data : any }\n{ status : 'error' , error : Error } ;\n\nconst [ requestState , setRequestState ] useState RequestState ( { status : 'idle' } ) ;"
                                }
                            ],
                            "urls": [
                                "https://react.dev/learn/typescript/reference/react/useState",
                                "https://react.dev/learn/typescript/learn/choosing-the-state-structure#principles-for-structuring-state"
                            ],
                            "subsections": []
                        },
                        {
                            "title": "useReducer",
                            "description": "TheuseReducerHookis a more complex Hook that takes a reducer function and an initial state. The types for the reducer function are inferred from the initial state. You can optionally provide a type argument to theuseReducercall to provide a type for the state, but it is often better to set the type on the initial state instead:",
                            "code_sample": [],
                            "urls": [
                                "https://react.dev/learn/typescript/reference/react/useReducer"
                            ],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Useful Types",
                    "description": "There is quite an expansive set of types which come from the@types/reactpackage, it is worth a read when you feel comfortable with how React and TypeScript interact. You can find themin React\u2019s folder in DefinitelyTyped. We will cover a few of the more common types here.\nWhen working with DOM events in React, the type of the event can often be inferred from the event handler. However, when you want to extract a function to be passed to an event handler, you will need to explicitly set the type of the event.",
                    "code_sample": [],
                    "urls": [
                        "https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react/index.d.ts"
                    ],
                    "subsections": [
                        {
                            "title": "DOM Events",
                            "description": "When working with DOM events in React, the type of the event can often be inferred from the event handler. However, when you want to extract a function to be passed to an event handler, you will need to explicitly set the type of the event.",
                            "code_sample": [],
                            "urls": [],
                            "subsections": []
                        }
                    ]
                },
                {
                    "title": "Further learning",
                    "description": "This guide has covered the basics of using TypeScript with React, but there is a lot more to learn.\nIndividual API pages on the docs may contain more in-depth documentation on how to use them with TypeScript.\nWe recommend the following resources:\nThe TypeScript handbookis the official documentation for TypeScript, and covers most key language features.The TypeScript release notescover new features in depth.React TypeScript Cheatsheetis a community-maintained cheatsheet for using TypeScript with React, covering a lot of useful edge cases and providing more breadth than this document.TypeScript Community Discordis a great place to ask questions and get help with TypeScript and React issues.",
                    "code_sample": [],
                    "urls": [
                        "https://www.typescriptlang.org/docs/handbook/",
                        "https://devblogs.microsoft.com/typescript/",
                        "https://react-typescript-cheatsheet.netlify.app/",
                        "https://discord.com/invite/typescript"
                    ],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewInstallationAdding TypeScript to an existing React projectTypeScript with React ComponentsExample HooksuseStateuseReduceruseContextuseMemouseCallbackUseful TypesDOM EventsChildrenStyle PropsFurther learning",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/typescript#",
                        "https://react.dev/learn/typescript#installation",
                        "https://react.dev/learn/typescript#adding-typescript-to-an-existing-react-project",
                        "https://react.dev/learn/typescript#typescript-with-react-components",
                        "https://react.dev/learn/typescript#example-hooks",
                        "https://react.dev/learn/typescript#typing-usestate",
                        "https://react.dev/learn/typescript#typing-usereducer",
                        "https://react.dev/learn/typescript#typing-usecontext",
                        "https://react.dev/learn/typescript#typing-usememo",
                        "https://react.dev/learn/typescript#typing-usecallback",
                        "https://react.dev/learn/typescript#useful-types",
                        "https://react.dev/learn/typescript#typing-dom-events",
                        "https://react.dev/learn/typescript#typing-children",
                        "https://react.dev/learn/typescript#typing-style-props",
                        "https://react.dev/learn/typescript#further-learning"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Understanding Your UI as a Tree \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/understanding-your-ui-as-a-tree",
        "sections": {
            "summary": "React, and many other UI libraries, model UI as a tree. Thinking of your app as a tree is useful for understanding the relationship between components. This understanding will help you debug future concepts like performance and state management.\nYour React app is taking shape with many components being nested within each other. How does React keep track of your app\u2019s component structure?\nHow React \u201csees\u201d component structuresWhat a render tree is and what it is useful forWhat a module dependency tree is and what it is useful for",
            "content": [
                {
                    "title": "Your UI as a tree",
                    "description": "Trees are a relationship model between items and UI is often represented using tree structures. For example, browsers use tree structures to model HTML (DOM) and CSS (CSSOM). Mobile platforms also use trees to represent their view hierarchy.\nReact creates a UI tree from your components. In this example, the UI tree is then used to render to the DOM.\nLike browsers and mobile platforms, React also uses tree structures to manage and model the relationship between components in a React app. These trees are useful tools to understand how data flows through a React app and how to optimize rendering and app size.",
                    "code_sample": [],
                    "urls": [
                        "https://developer.mozilla.org/docs/Web/API/Document_Object_Model/Introduction",
                        "https://developer.mozilla.org/docs/Web/API/CSS_Object_Model"
                    ],
                    "subsections": []
                },
                {
                    "title": "The Render Tree",
                    "description": "A major feature of components is the ability to compose components of other components. As wenest components, we have the concept of parent and child components, where each parent component may itself be a child of another component.\nWhen we render a React app, we can model this relationship in a tree, known as the render tree.\nHere is a React app that renders inspirational quotes.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/understanding-your-ui-as-a-tree/learn/your-first-component#nesting-and-organizing-components"
                    ],
                    "subsections": []
                },
                {
                    "title": "The Module Dependency Tree",
                    "description": "Another relationship in a React app that can be modeled with a tree are an app\u2019s module dependencies. As webreak up our componentsand logic into separate files, we createJS moduleswhere we may export components, functions, or constants.\nEach node in a module dependency tree is a module and each branch represents animportstatement in that module.\nIf we take the previous Inspirations app, we can build a module dependency tree, or dependency tree for short.\nThe module dependency tree for the Inspirations app.\nThe root node of the tree is the root module, also known as the entrypoint file. It often is the module that contains the root component.\nComparing to the render tree of the same app, there are similar structures but some notable differences:\nThe nodes that make-up the tree represent modules, not components.Non-component modules, likeinspirations.js, are also represented in this tree. The render tree only encapsulates components.Copyright.jsappears underApp.jsbut in the render tree,Copyright, the component, appears as a child ofInspirationGenerator. This is becauseInspirationGeneratoraccepts JSX aschildren props, so it rendersCopyrightas a child component but does not import the module.\nDependency trees are useful to determine what modules are necessary to run your React app. When building a React app for production, there is typically a build step that will bundle all the necessary JavaScript to ship to the client. The tool responsible for this is called abundler, and bundlers will use the dependency tree to determine what modules should be included.\nAs your app grows, often the bundle size does too. Large bundle sizes are expensive for a client to download and run. Large bundle sizes can delay the time for your UI to get drawn. Getting a sense of your app\u2019s dependency tree may help with debugging these issues.\nTrees are a common way to represent the relationship between entities. They are often used to model UI.Render trees represent the nested relationship between React components across a single render.With conditional rendering, the render tree may change across different renders. With different prop values, components may render different children components.Render trees help identify what the top-level and leaf components are. Top-level components affect the rendering performance of all components beneath them and leaf components are often re-rendered frequently. Identifying them is useful for understanding and debugging rendering performance.Dependency trees represent the module dependencies in a React app.Dependency trees are used by build tools to bundle the necessary code to ship an app.Dependency trees are useful for debugging large bundle sizes that slow time to paint and expose opportunities for optimizing what code is bundled.",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/understanding-your-ui-as-a-tree/learn/importing-and-exporting-components#exporting-and-importing-a-component",
                        "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",
                        "https://react.dev/learn/understanding-your-ui-as-a-tree/learn/passing-props-to-a-component#passing-jsx-as-children",
                        "https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview#the_modern_tooling_ecosystem",
                        "https://react.dev/learn/understanding-your-ui-as-a-tree#recap"
                    ],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "Trees are a common way to represent the relationship between entities. They are often used to model UI.Render trees represent the nested relationship between React components across a single render.With conditional rendering, the render tree may change across different renders. With different prop values, components may render different children components.Render trees help identify what the top-level and leaf components are. Top-level components affect the rendering performance of all components beneath them and leaf components are often re-rendered frequently. Identifying them is useful for understanding and debugging rendering performance.Dependency trees represent the module dependencies in a React app.Dependency trees are used by build tools to bundle the necessary code to ship an app.Dependency trees are useful for debugging large bundle sizes that slow time to paint and expose opportunities for optimizing what code is bundled.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewYour UI as a treeThe Render TreeThe Module Dependency TreeRecap",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/understanding-your-ui-as-a-tree#",
                        "https://react.dev/learn/understanding-your-ui-as-a-tree#your-ui-as-a-tree",
                        "https://react.dev/learn/understanding-your-ui-as-a-tree#the-render-tree",
                        "https://react.dev/learn/understanding-your-ui-as-a-tree#the-module-dependency-tree",
                        "https://react.dev/learn/understanding-your-ui-as-a-tree#recap"
                    ],
                    "subsections": []
                }
            ]
        }
    },
    {
        "title": "Your First Component \u2013 React",
        "source": "react",
        "url": "https://react.dev/learn/your-first-component",
        "sections": {
            "summary": "Componentsare one of the core concepts of React. They are the foundation upon which you build user interfaces (UI), which makes them the perfect place to start your React journey!\nWhat a component isWhat role components play in a React applicationHow to write your first React component",
            "content": [
                {
                    "title": "Components: UI building blocks",
                    "description": "On the Web, HTML lets us create rich structured documents with its built-in set of tags like<h1>and<li>:\nThis markup represents this article<article>, its heading<h1>, and an (abbreviated) table of contents as an ordered list<ol>. Markup like this, combined with CSS for style, and JavaScript for interactivity, lies behind every sidebar, avatar, modal, dropdown\u2014every piece of UI you see on the Web.\nReact lets you combine your markup, CSS, and JavaScript into custom \u201ccomponents\u201d,reusable UI elements for your app.The table of contents code you saw above could be turned into a<TableOfContents />component you could render on every page. Under the hood, it still uses the same HTML tags like<article>,<h1>, etc.\nJust like with HTML tags, you can compose, order and nest components to design whole pages. For example, the documentation page you\u2019re reading is made out of React components:\nAs your project grows, you will notice that many of your designs can be composed by reusing components you already wrote, speeding up your development. Our table of contents above could be added to any screen with<TableOfContents />! You can even jumpstart your project with the thousands of components shared by the React open source community likeChakra UIandMaterial UI.",
                    "code_sample": [
                        {
                            "language": "javascript",
                            "code": "< article >\n< h1 > </ h1 >\n< ol >\n< li > </ li >\n< li > </ li >\n< li > </ li >\n</ ol >\n</ article >"
                        },
                        {
                            "language": "javascript",
                            "code": "< PageLayout >\n< NavigationHeader >\n< SearchBar />\n< Link to \"/docs\" > </ Link >\n</ NavigationHeader >\n< Sidebar />\n< PageContent >\n< TableOfContents />\n< DocumentationText />\n</ PageContent >\n</ PageLayout >"
                        }
                    ],
                    "urls": [
                        "https://chakra-ui.com/",
                        "https://material-ui.com/"
                    ],
                    "subsections": []
                },
                {
                    "title": "Defining a component",
                    "description": "Traditionally when creating web pages, web developers marked up their content and then added interaction by sprinkling on some JavaScript. This worked great when interaction was a nice-to-have on the web. Now it is expected for many sites and all apps. React puts interactivity first while still using the same technology:a React component is a JavaScript function that you cansprinkle with markup.Here\u2019s what that looks like (you can edit the example below):",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Using a component",
                    "description": "Now that you\u2019ve defined yourProfilecomponent, you can nest it inside other components. For example, you can export aGallerycomponent that uses multipleProfilecomponents:",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Recap",
                    "description": "You\u2019ve just gotten your first taste of React! Let\u2019s recap some key points.\nReact lets you create components,reusable UI elements for your app.In a React app, every piece of UI is a component.React components are regular JavaScript functions except:Their names always begin with a capital letter.They return JSX markup.",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "Try out some challenges",
                    "description": "",
                    "code_sample": [],
                    "urls": [],
                    "subsections": []
                },
                {
                    "title": "On this page",
                    "description": "OverviewComponents: UI building blocksDefining a componentStep 1: Export the componentStep 2: Define the functionStep 3: Add markupUsing a componentWhat the browser seesNesting and organizing componentsRecapChallenges",
                    "code_sample": [],
                    "urls": [
                        "https://react.dev/learn/your-first-component#",
                        "https://react.dev/learn/your-first-component#components-ui-building-blocks",
                        "https://react.dev/learn/your-first-component#defining-a-component",
                        "https://react.dev/learn/your-first-component#step-1-export-the-component",
                        "https://react.dev/learn/your-first-component#step-2-define-the-function",
                        "https://react.dev/learn/your-first-component#step-3-add-markup",
                        "https://react.dev/learn/your-first-component#using-a-component",
                        "https://react.dev/learn/your-first-component#what-the-browser-sees",
                        "https://react.dev/learn/your-first-component#nesting-and-organizing-components",
                        "https://react.dev/learn/your-first-component#recap",
                        "https://react.dev/learn/your-first-component#challenges"
                    ],
                    "subsections": []
                }
            ]
        }
    }
]